input ACG_AddDomainInput {
  organisationId: String!
  domain: String!
}

type ACG_AddDomainResponse {
  organisation: Organisation
}

input ACG_AddJoinCodeInput {
  organisationId: String
}

type ACG_AddJoinCodeResponse {
  organisation: Organisation
}

input ACG_AddOrganisationAdminInput {
  organisationId: String!
  userId: String!
}

type ACG_AddOrganisationAdminResponse {
  deleted: Boolean
}

input ACG_AddPointsInput {
  orgId: String!
  amount: Int!
  description: String!
  purchaseDate: String!
}

type ACG_AddPointsResponse {
  organisation: Organisation
}

input ACG_AddToOrganisationInput {
  organisationId: String!
  userId: String!
}

type ACG_AddToOrganisationResponse {
  userIdentity: UserIdentity
}

input ACG_ArchiveOrganisationInput {
  organisationId: String!
}

type ACG_ArchiveOrganisationResponse {
  organisation: Organisation
}

type ACG_Auth0Id {
  userId: String
}

input ACG_billingHistoryInput {
  organisationId: String!
}

type ACG_billingHistoryResponse {
  histories: [BillingHistory!]
}

input ACG_billingSubscriptionInput {
  organisationId: String!
}

type ACG_billingSubscriptionResponse {
  subscription: BillingSubscription
}

input ACG_CreateSelfServiceOrganisationInput {
  name: String!
  startDate: String!
  endDate: String!
  userLicenseCount: Int!
}

type ACG_CreateSelfServiceOrganisationResponse {
  organisation: Organisation
}

input ACG_CreateSubscriptionOrganisationInput {
  name: String!
  accountType: String
  startDate: String!
  endDate: String!
  userLicenseCount: Int!
  packageId: String
}

type ACG_CreateSubscriptionOrganisationResponse {
  organisation: Organisation
}

input ACG_extendOrganisationSubscriptionEndDateInput {
  organisationId: String!
  endDateOverride: String!
  endDateOverrideReason: String!
}

type ACG_extendOrganisationSubscriptionEndDateResponse {
  organisation: Organisation
}

input ACG_GrantSiteRoleInput {
  userId: ID
  role: SiteRole
}

type ACG_GrantSiteRoleResponse {
  userIdentity: UserIdentity
}

type ACG_LearningPath {
  name: String!
  id: String!
  sections: [ACG_LearningPathSection]
}

type ACG_LearningPathSection {
  name: String!
  id: String!
  completed: Boolean
  completedPercent: Float
}

input ACG_Membership_addUserPlanIdFilter_Input {
  userId: ID!
  filter: String
}

input ACG_Membership_addUserPlanOverride_Input {
  userId: ID!
  type: Membership_UserPlanOverrideType
  value: String
}

input ACG_Membership_createSubscription_Input {
  userId: ID!
  providerPlanId: ID!
  planType: Membership_PlanType = b2c
  providerCode: Membership_ProviderCode = chargebee_uk
  paymentMethod: Membership_PaymentMethod_Input!
  billingDetails: Membership_BillingDetailsInput
  skipTrial: Boolean = false
}

input ACG_Membership_endTrial_Input {
  userId: ID!
}

input ACG_Membership_invoices_Input {
  userId: ID!
}

input ACG_Membership_removePaymentMethod_Input {
  userId: ID!
}

input ACG_Membership_removeScheduledCancellation_Input {
  userId: ID!
}

input ACG_Membership_removeScheduledChanges_Input {
  userId: ID!
}

input ACG_Membership_removeUserPlanIdFilter_Input {
  userId: ID!
}

input ACG_Membership_removeUserPlanOverride_Input {
  userId: ID!
  type: Membership_UserPlanOverrideType
}

input ACG_Membership_scheduleCancellation_Input {
  userId: ID!
}

input ACG_Membership_submitCancellationReason_Input {
  userId: ID!
  feedback: String
  reasons: membership_CancellationReasonType
  competitors: membership_CancellationCompetitorType
}

input ACG_Membership_syncSubscription_Input {
  userId: ID!
  syncPaymentMethods: Boolean = false
}

input ACG_Membership_updateBillingDetails_Input {
  userId: String!
  billingDetails: Membership_BillingDetailsInput!
}

input ACG_Membership_updatePaymentMethod_Input {
  userId: ID!
  paymentMethod: Membership_PaymentMethod_Input!
}

input ACG_Membership_updateSubscription_Input {
  userId: ID!
  providerPlanId: ID!
  planType: Membership_PlanType = b2c
  providerCode: Membership_ProviderCode = chargebee_uk
  billingDetails: Membership_BillingDetailsInput
  paymentMethod: Membership_PaymentMethod_Input
  skipTrial: Boolean = false
}

input ACG_Membership_updateSubscriptionPlan_Input {
  userId: ID!
  planId: ID!
}

input ACG_ModifyOrganisationAccountDetailsInput {
  organisationId: String!
  accountType: OrganisationAccountType
  archive: Boolean!
}

type ACG_ModifyOrganisationAccountDetailsResponse {
  organisation: Organisation
}

input ACG_Packaging_AddPackageFeatureInput {
  packageId: ID!
  featureId: ID!
  valueType: Packaging_FeatureValueType
  value: String
}

type ACG_Packaging_AddPackageFeatureResponse {
  packageFeature: ACG_Packaging_AddPackageFeatureResult
}

union ACG_Packaging_AddPackageFeatureResult = ACG_Packaging_PackageFeature | ACG_Packaging_PackageDoesNotExistError | ACG_Packaging_FeatureDoesNotExistError

input ACG_Packaging_AddSubscriptionFeatureOverrideInput {
  featureId: ID!
  subscriberId: ID!
  valueType: Packaging_FeatureValueType
  value: String
}

type ACG_Packaging_AddSubscriptionFeatureOverrideResponse {
  subscriptionFeatureOverride: ACG_Packaging_AddSubscriptionFeatureOverrideResult
}

union ACG_Packaging_AddSubscriptionFeatureOverrideResult = ACG_Packaging_SubscriptionFeatureOverride | ACG_Packaging_SubscriberHasOverrideError | ACG_Packaging_FeatureDoesNotExistError

input ACG_Packaging_CreateFeatureInput {
  id: ID!
  name: String!
  displayName: String!
  valueType: String!
}

type ACG_Packaging_CreateFeatureResponse {
  feature: ACG_Packaging_CreateFeatureResult
}

union ACG_Packaging_CreateFeatureResult = ACG_Packaging_Feature | ACG_Packaging_FeatureExistsError

input ACG_Packaging_CreatePackageInput {
  id: ID!
  name: String!
  displayName: String!
  description: String
  type: Packaging_PackageType!
  baseId: ID
  isPrivate: String
}

type ACG_Packaging_CreatePackageResponse {
  package: ACG_Packaging_CreatePackageResult
}

union ACG_Packaging_CreatePackageResult = ACG_Packaging_Package | ACG_Packaging_PackageExistsError | ACG_Packaging_PackageBaseIdDoesNotExistError | ACG_Packaging_PackageIdSameAsBaseIdError

type ACG_Packaging_EmptyOrganisationIdError {
  message: String
}

type ACG_Packaging_EmptyUserIdError {
  message: String
}

type ACG_Packaging_Feature {
  id: ID!
  name: String!
  displayName: String!
  valueType: String!
}

type ACG_Packaging_FeatureDoesNotExistError {
  featureIdNotFound: ID
  message: String
}

type ACG_Packaging_FeatureExistsError {
  featureId: ID
  message: String
}

type ACG_Packaging_FeatureOverride {
  featureId: ID!
  value: Packaging_FeatureAccessLevel!
}

input ACG_Packaging_FeatureOverrideInput {
  featureId: ID!
  value: Packaging_FeatureAccessLevel!
}

type ACG_Packaging_FeaturesNotFound {
  featuresIds: [ID]
  message: String
}

type ACG_Packaging_FeaturesResponse {
  features: [ACG_Packaging_Feature]!
}

type ACG_Packaging_GlobalAuditTrail {
  id: ID!
  action: String!
  createdAt: String!
  type: String
  displayName: String
  packageId: ID
  featureId: ID
  actionedAt: String
  actionedBy: String
}

type ACG_Packaging_GlobalAuditTrailResponse {
  globalAuditTrail: [ACG_Packaging_GlobalAuditTrail]
}

type ACG_Packaging_OrganisationAuditTrail {
  id: ID!
  organisationId: ID!
  action: String!
  createdAt: String!
  type: String!
  packageId: ID
  featureId: ID
  previousPackageId: ID
  actionedAt: String
  actionedBy: String
}

input ACG_Packaging_OrganisationAuditTrailInput {
  organisationId: ID!
}

type ACG_Packaging_OrganisationAuditTrailResponse {
  organisationFeatureAccessAudit: [ACG_Packaging_OrganisationAuditTrailResult]
}

union ACG_Packaging_OrganisationAuditTrailResult = ACG_Packaging_OrganisationAuditTrail | ACG_Packaging_EmptyOrganisationIdError

type ACG_Packaging_OrganisationFeatureOverrides {
  organisationId: ID!
  overrides: [ACG_Packaging_FeatureOverride]!
}

type ACG_Packaging_Package {
  id: ID!
  name: String!
  displayName: String!
  description: String
  type: Packaging_PackageType!
  baseId: ID
  isPrivate: String
}

type ACG_Packaging_PackageBaseIdDoesNotExistError {
  packageId: ID
  baseId: ID
  message: String
}

type ACG_Packaging_PackageDoesNotExistError {
  packageIdNotFound: ID
  message: String
}

type ACG_Packaging_PackageExistsError {
  packageId: ID
  message: String
}

type ACG_Packaging_PackageFeature {
  packageId: ID!
  featureId: ID!
  boolValue: String
  numberValue: Int
  stringValue: String
}

type ACG_Packaging_PackageFeatures {
  packageId: ID!
  packageName: String!
  packageType: String!
  features: String!
}

type ACG_Packaging_PackageIdSameAsBaseIdError {
  packageId: ID
  invalidBaseId: ID
  message: String
}

type ACG_Packaging_PackagesFeaturesResponse {
  packagesFeatures: [ACG_Packaging_PackageFeatures]!
}

type ACG_Packaging_PackagesResponse {
  packages: [ACG_Packaging_Package]!
}

type ACG_Packaging_SubscriberHasOverrideError {
  subscriberIdHasOverride: ID
  message: String
}

type ACG_Packaging_SubscriberPackage {
  packageId: ID!
  packageName: String!
  features: String!
  overrides: String
}

input ACG_Packaging_SubscriberPackageInput {
  organisationId: ID
  userId: ID
}

type ACG_Packaging_SubscriberPackageNotFound {
  subscriberId: ID
  message: String
}

type ACG_Packaging_SubscriberPackageResponse {
  subscriberPackage: ACG_Packaging_SubscriberPackageResult
}

union ACG_Packaging_SubscriberPackageResult = ACG_Packaging_SubscriberPackage | ACG_Packaging_SubscriberPackageNotFound

type ACG_Packaging_SubscriptionFeatureOverride {
  subscriberId: ID!
  featureId: ID!
  boolValue: String
  numberValue: Int
  stringValue: String
}

input ACG_Packaging_UpdateOrganisationFeatureOverridesInput {
  organisationId: ID!
  overrides: [ACG_Packaging_FeatureOverrideInput]!
}

type ACG_Packaging_UpdateOrganisationFeatureOverridesResponse {
  organisationOverrides: ACG_Packaging_UpdateOrganisationFeatureOverridesResult
}

union ACG_Packaging_UpdateOrganisationFeatureOverridesResult = ACG_Packaging_OrganisationFeatureOverrides | ACG_Packaging_EmptyOrganisationIdError | ACG_Packaging_FeaturesNotFound

input ACG_Packaging_UpdateOrganisationPackageInput {
  organisationId: ID!
  packageId: ID!
}

type ACG_Packaging_UpdateOrganisationPackageResponse {
  subscriberPackage: ACG_Packaging_UpdateOrganisationPackageResult
}

union ACG_Packaging_UpdateOrganisationPackageResult = ACG_Packaging_SubscriberPackage | ACG_Packaging_PackageDoesNotExistError

input ACG_Packaging_UpdateUserFeatureOverridesInput {
  userId: ID!
  overrides: [ACG_Packaging_FeatureOverrideInput]!
}

type ACG_Packaging_UpdateUserFeatureOverridesResponse {
  userOverrides: ACG_Packaging_UpdateUserFeatureOverridesResult
}

union ACG_Packaging_UpdateUserFeatureOverridesResult = ACG_Packaging_UserFeatureOverrides | ACG_Packaging_EmptyUserIdError | ACG_Packaging_FeaturesNotFound

input ACG_Packaging_UpdateUserPackageInput {
  userId: ID!
  packageId: ID!
}

type ACG_Packaging_UpdateUserPackageResponse {
  subscriberPackage: ACG_Packaging_UpdateUserPackageResult
}

union ACG_Packaging_UpdateUserPackageResult = ACG_Packaging_SubscriberPackage | ACG_Packaging_PackageDoesNotExistError

type ACG_Packaging_UserAuditTrail {
  id: ID!
  userId: ID!
  action: String!
  createdAt: String!
  type: String!
  packageId: ID
  featureId: ID
  previousPackageId: ID
  actionedAt: String
  actionedBy: String
}

input ACG_Packaging_UserAuditTrailInput {
  userId: ID!
}

type ACG_Packaging_UserAuditTrailResponse {
  userFeatureAccessAudit: [ACG_Packaging_UserAuditTrailResult]
}

union ACG_Packaging_UserAuditTrailResult = ACG_Packaging_UserAuditTrail | ACG_Packaging_EmptyUserIdError

input ACG_Packaging_UserFeatureAccessInput {
  organisationId: ID
  userId: ID!
  roles: Packaging_UserFeatureAccessRolesInput!
}

type ACG_Packaging_UserFeatureAccessResponse {
  userFeatureAccess: Packaging_UserFeatureAccess
}

type ACG_Packaging_UserFeatureOverrides {
  userId: ID!
  overrides: [ACG_Packaging_FeatureOverride]!
}

input ACG_RemoveDomainInput {
  organisationId: String!
  domain: String!
}

type ACG_RemoveDomainResponse {
  organisation: Organisation
}

input ACG_RemoveFromOrganisationInput {
  organisationId: String!
  userId: String!
}

type ACG_RemoveFromOrganisationResponse {
  userIdentity: UserIdentity
}

input ACG_RemoveJoinCodeInput {
  organisationId: String
  code: String
}

type ACG_RemoveJoinCodeResponse {
  organisation: Organisation
}

input ACG_RemoveOrganisationAdminInput {
  organisationId: String!
  userId: String!
}

type ACG_RemoveOrganisationAdminResponse {
  deleted: Boolean
}

input ACG_RestoreArchivedOrganisationInput {
  organisationId: String!
}

type ACG_RestoreArchivedOrganisationResponse {
  organisation: Organisation
}

input ACG_RevokeSiteRoleInput {
  userId: ID
  role: SiteRole
}

type ACG_RevokeSiteRoleResponse {
  userIdentity: UserIdentity
}

type ACG_SearchApiKeyResponse {
  id: ID!
  publicApiKey: SearchApiKey
  scopedApiKey: SearchApiKey
  privateApiKey: SearchApiKey
}

type ACG_SearchAuth0UsersResponse {
  auth0Users: [Auth0User]
  userIdentities: [UserIdentity]
}

input ACG_syncBillingSubscriptionInput {
  organisationId: String!
}

type ACG_syncBillingSubscriptionResponse {
  subscription: BillingSubscription
}

input ACG_UpdateEmailForUserInput {
  userId: String
  email: String
}

type ACG_UpdateEmailForUserResponse {
  userIdentity: UserIdentity
}

input ACG_updateOrganisationDisableInvitationsInput {
  organisationId: String!
  disableInvitations: Boolean!
}

input ACG_UpdateOrganisationInput {
  orgId: String!
  name: String
  chargeModel: String
  website: String
  connectionName: String
  features: OrganisationFeaturesInput
  reporting: OrganisationReportingInput
  subscription: OrganisationSubscriptionInput
}

type ACG_UpdateOrganisationResponse {
  organisation: Organisation
}

input ACG_updateOrganisationSamlConnectionNameInput {
  organisationId: String!
  connectionName: String
}

input ACG_UpdateOrganisationSubscriptionInput {
  organisationId: String!
  subscriptionStartDate: String!
  subscriptionEndDate: String!
  subscriptionUserLicenseCount: Int!
}

type ACG_UpdateOrganisationSubscriptionResponse {
  organisation: Organisation
}

input ACG_UpdateUserCloudProfileInput {
  userId: String
  displayname: String
  name: String
  email: String
  picture: String
  bio: String
  employeeId: String
  employer: String
  jobTitle: String
  twitterUrl: String
  githubUrl: String
  facebookUrl: String
  linkedinUrl: String
  registrationMethod: String
  location: String
}

type ACG_UpdateUserCloudProfileResponse {
  userCloudProfile: UserCloudProfile
}

input ACG_userFeatureAccessInput {
  organisationId: ID
  userId: ID!
  roles: UserFeatureAccessRoles!
}

input ACGDEV_convertToMarketplaceChargeModelInput {
  organisationId: String!
  ProductCode: String!
  CustomerIdentifier: String!
}

input ACGDEV_convertToSubscriptionChargeModelInput {
  organisationId: String!
}

input ACGDEV_Membership_cancelSubscription_Input {
  userId: ID!
}

input ACGDEV_Membership_createSubscription_Input {
  userId: ID!
  providerPlanId: ID = "personal-basic-2020-aug-usd-monthly"
  providerCode: Membership_ProviderCode = chargebee_uk
  planType: Membership_PlanType = b2c
  billingDetails: Membership_BillingDetailsInput
  skipTrial: Boolean = false
}

input ACGDEV_Membership_importSubscriptions_Input {
  """
  The latest nextBillingAt allowed when filtering subscriptions before import.
  """
  latestNextBillingAt: String
}

input ACGDEV_Membership_removeSubscription_Input {
  userId: ID!
}

input ACGDEV_Membership_webhook_Input {
  userId: String!
  eventType: Membership_WebhookEventType!
  content: String = "{}"
}

input ACGDEV_recreateBillingSubscriptionInput {
  providerSubscriptionId: ID!
  providerCode: String!
  plan: BillingSubscriptionPlanInput!
}

type ACGDEV_recreateBillingSubscriptionResponse {
  subscription: BillingSubscription!
}

input ACGDEV_sendAssignIdentityRoleEmailInput {
  role: String!
  organisationId: String!
  organisationName: String!
  teamName: String!
  email: String!
}

input ACGHandsonLabsEventInput {
  platform: String
  contentType: String!
  grantType: String
  durationInSeconds: Int!
  courseId: String
  courseTitle: String
  courseUrl: String
  sectionId: String
  sectionTitle: String
  sectionUrl: String
  componentId: String
  componentTitle: String
  componentUrl: String
  acgHandsonlabId: String
  acgHandsonlabTitle: String
  acgHandsonlabUrl: String
  acgHandsonlabVideoIndex: Int
  acgHandsonlabVideoCount: Int
  acgHandsonlabVideoTitle: String
  acgHandsonlabVideoPrimaryId: String
  contentId: String
  metadataAsJSON: String
}

input AchievementInput {
  vendor: String!
  name: String!
  date: Float!
}

input ActivateStudyGroupInput {
  id: String!
  startDate: String!
  completeDate: String!
  emailNotification: Boolean
}

type ActivateStudyGroupResponse {
  studyGroup: StudyGroup
}

type ActiveUserCertification {
  userId: String!
  count: Int!
}

type ActivityData {
  rownum: String
  courseId: String
  courseTitle: String
  overallProgress: String
  lessonsPercentage: String
  quizzesPercentage: String
  lessonsCompleted: String
  quizzesCompleted: String
  userId: String!
  displayName: String
  fullName: String
  organisationId: String
  companyName: String
  lastActivity: String
}

input AdaptiveStreamingConfiguration {
  format: String!
  segmentDuration: String!
  videoStreams: [String!]!
  audioStreams: [String!]!
}

input AddBillingSubscriptionSeatsInput {
  seatsExtra: Int!
}

type AddBillingSubscriptionSeatsResponse {
  subscription: BillingSubscription!
}

input AddCareerInformationInput {
  role: String
  goal: String
}

type AddCareerInformationResponse {
  userIdentity: UserIdentity
}

type AddJoinCodeResponse {
  organisation: Organisation
}

input AddOrganisationAdminInput {
  userId: String!
}

type AddOrganisationAdminResponse {
  deleted: Boolean
  organisationId: String
  userId: String
  organisationUser: UserIdentity
}

input AddPackageFeatureInput {
  packageId: ID!
  featureId: ID!
  valueType: FeatureValueType
  value: String
}

input AddUserCertificateInput {
  certificationId: String!
  acquiredDate: ISODate!
  expiryDate: ISODate
  credentialUrl: String
  certificateNumber: String!

  """base64 encoded file"""
  file: String!
}

input AddUsersToTeamsAndRemoveFromOldTeamInput {
  addUsersToTeams: [UsersToTeamsInput]
}

type AddUsersToTeamsAndRemoveFromOldTeamResponse {
  taskId: String!
  addedTeamUserConnections: [TeamUserConnection]
  removedTeamUserConnections: [TeamUserConnection]
}

input AddUserToGroupInput {
  userId: String!
  groupId: String!
  admin: Boolean
}

type AddUserToGroupResponse {
  groupUserConnection: GroupUserConnection
}

input AddUserToOrganisationByInvitationInput {
  invitationCode: String!
}

type AddUserToOrganisationByInvitationResponse {
  userIdentity: UserIdentity
}

input AddUserToStudyGroupInput {
  userId: String!
  studyGroupId: String!
}

type AddUserToStudyGroupResponse {
  groupUserConnection: GroupUserConnection
}

input AddUserToStudyPlanInput {
  userId: String!
  courseId: String!
  week: Int
}

type AddUserToStudyPlanResponse {
  success: Boolean!
}

type AlgoliaSecuredApiKey {
  apiKey: String
  validUntil: String
}

input AnalyticsEchoInput {
  echo: String
}

type AnalyticsEchoResponse {
  echo: String
}

type Answer {
  answerId: String
  text: String
  correct: Boolean
}

type ApiSettings {
  id: ID!
  applicationName: String!
  version: String
  createdAt: ISODate
  createdBy: String
}

type Application {
  id: String!
  applicationId: String!
  userId: String!
  jobId: String!
  createdAt: Float!
  updatedAt: Float!
  status: String!
}

type AssessmentAnswer {
  answerId: String
  text: String
}

type AssessmentCandidateSession {
  id: ID!
  organisationName: String
  startedAt: Float
  dueDate: Float
  state: AssessmentCandidateSessionState
  currentQuestion: SkillsAssessmentQuestion
  results: AssessmentResults
  assessmentTimeLimitInSeconds: Int
}

enum AssessmentCandidateSessionState {
  NOT_STARTED
  ACHIEVEMENT
  QUESTION
  TIMED_OUT
  EXPIRED
  COMPLETED
}

type AssessmentMetadata {
  technologies: [AssessmentMetadataValue!]
  services: [AssessmentMetadataValue!]
  topics: [AssessmentMetadataValue!]
  roles: [AssessmentMetadataValue!]
}

input AssessmentMetadataInput {
  value: String
  type: AssessmentMetadataTypeEnum
}

enum AssessmentMetadataTypeEnum {
  TOPIC
  TECHNOLOGY
  SERVICE
  ROLE
}

type AssessmentMetadataValue {
  id: String
  value: String
}

type AssessmentResult {
  role: String
  userInputLevel: Int
  assessedLevel: Int
  correctQuestions: Int
  totalQuestions: Int
}

type AssessmentResults {
  primaryDomain: AssessmentResult
  secondaryDomains: [AssessmentResult]
}

type AssessmentsAssessment {
  id: ID!
  title: String
  assessmentId: String
  description: String
  numberOfQuestions: Int
  skillLevel: String
  questionPool: [AssessmentsQuestionPool]
  assessmentType: String
  timeLimit: String
  timeLimitRaw: Int
  passingGrade: Int
  coverImageUrl: String
}

type AssessmentsAttempt {
  id: ID!
  title: String
  description: String
  status: String
  numberOfQuestions: Int
  skillLevel: String
  questionPool: [AssessmentsAttemptQuestionPool]
  assessmentType: String
  timeLimit: String
  assessmentEndDate: String
  createdDate: String
  passingGrade: Int
  coverImageUrl: String
  currentQuestionIndex: Int
  questions: [AssessmentsAttemptQuestion]
}

type AssessmentsAttemptChoice {
  id: ID!
  questionId: String
  text: String
}

type AssessmentsAttemptDomainGrade {
  id: ID!
  domainName: String
  domainDescription: String
  attemptId: String
  questionPoolId: String
  score: Int
  createdAt: String
  order: Int
  weight: Float
  questionsCorrect: Int
}

type AssessmentsAttemptGrade {
  id: ID!
  totalQuestions: Int
  questionsCorrect: Int
  attemptId: String
  didPass: Boolean
  score: Int
}

type AssessmentsAttemptGradedChoice {
  id: ID!
  questionId: String
  text: String
  correctAnswer: Boolean
  explanation: String
}

type AssessmentsAttemptGradedQuestion {
  id: ID!
  questionId: String
  attemptId: String
  order: Int
  poolId: String
  questionText: String
  type: String
  possibleCorrect: Int
  examTypes: [String]
  tags: [String]
  archived: Boolean
  choices: [AssessmentsAttemptGradedChoice]
  submitted: Boolean
  flagged: Boolean
  selectedChoiceIds: [String]
  updatedAt: Int
  grade: AssessmentsQuestionResults
}

type AssessmentsAttemptQuestion {
  id: ID!
  questionId: String
  attemptId: String
  order: Int
  poolId: String
  questionText: String
  type: String
  possibleCorrect: Int
  examTypes: [String]
  tags: [String]
  archived: Boolean
  choices: [AssessmentsAttemptChoice]
  submitted: Boolean
  flagged: Boolean
  selectedChoiceIds: [String]
  updatedAt: Int
}

type AssessmentsAttemptQuestionPool {
  id: ID!
  weight: Float
  questionCount: Int
}

type AssessmentsContentAssessment {
  id: ID!
  name: String!
  numberOfQuestions: Int
  assessmentType: String
  categories: [String]
  timeAllowed: Int
  avgCompletionTime: Int
  passingScore: Int
  description: String
  difficulty: [String]
  tags: [String]
  certificationPath: Boolean
  published: Boolean
  publishedAt: String
  badgeImage: String
  createdAt: String
  updatedAt: String
  authorId: String
  domains: [AssessmentsContentDomain]
}

type AssessmentsContentAssessmentChoice {
  id: String
  questionId: String
  text: String
  explanation: String
  correctAnswer: Boolean
}

input AssessmentsContentAssessmentInput {
  id: ID
  name: String!
  numberOfQuestions: Int
  assessmentType: String
  categories: [String]
  timeAllowed: Int
  avgCompletionTime: Int
  passingScore: Int
  description: String
  difficulty: [String]
  tags: [String]
  certificationPath: Boolean
  published: Boolean
  publishedAt: Int
  badgeImage: String
  createdAt: Int
  updatedAt: Int
  authorId: String
  domains: [AssessmentsContentDomainInput]
}

type AssessmentsContentAssessmentQuestions {
  id: ID
  poolId: String
  questionText: String
  type: String
  possibleCorrect: Int
  choices: [AssessmentsContentAssessmentChoice]
}

input AssessmentsContentAssessmentQuestionsInput {
  id: String!
  questionCount: Int!
}

type AssessmentsContentChoice {
  id: ID
  text: String
  explanation: String
  correctAnswer: Boolean
}

input AssessmentsContentChoiceInput {
  id: ID
  text: String
  explanation: String
  correctAnswer: Boolean
}

type AssessmentsContentDeleteQuestionPoolResponse {
  success: Boolean
}

type AssessmentsContentDomain {
  id: ID
  title: String
  description: String
  weight: Float
  questionPoolId: String
}

input AssessmentsContentDomainInput {
  id: ID
  title: String
  description: String
  weight: Float
  questionPoolId: String
}

type AssessmentsContentQuestion {
  id: ID
  poolId: String
  questionText: String
  type: String
  tags: [String]
  bloomsTaxonomy: String
  difficulty: String
  domain: String
  possibleCorrect: Int
  createdAt: String
  updatedAt: String
  choices: [AssessmentsContentChoice]
}

input AssessmentsContentQuestionInput {
  id: ID
  poolId: String
  questionText: String
  type: String
  tags: [String]
  bloomsTaxonomy: String
  difficulty: String
  domain: String
  choices: [AssessmentsContentChoiceInput]
}

type AssessmentsContentQuestionPool {
  id: ID!
  name: String
  createdBy: String
  questionCount: Int
  createdAt: String
  updatedAt: String
  questions: [AssessmentsContentQuestion]
}

input AssessmentsContentQuestionPoolInput {
  id: ID
  name: String
  createdBy: String
  questions: [AssessmentsContentQuestionInput]
}

input AssessmentsContentRemoveQuestionInput {
  questionId: String!
  poolId: String!
}

input AssessmentsCreateAttemptInput {
  assessmentId: String!
  courseId: String
}

input AssessmentsGradeAttemptInput {
  attemptId: String!
}

type AssessmentsGradedAttempt {
  id: ID!
  title: String
  description: String
  status: String
  numberOfQuestions: Int
  skillLevel: String
  questionPool: [AssessmentsAttemptQuestionPool]
  assessmentType: String
  timeLimit: String
  assessmentEndDate: String
  createdDate: String
  passingGrade: Int
  coverImageUrl: String
  currentQuestionIndex: Int
  gradedDate: String
  grade: AssessmentsAttemptGrade
  domainGrades: [AssessmentsAttemptDomainGrade]
  questions: [AssessmentsAttemptGradedQuestion]
}

input AssessmentsQuestionFlagInput {
  questionId: String!
  attemptId: String!
  flagStatus: Boolean
}

type AssessmentsQuestionPool {
  id: ID!
  weight: Float
  domainName: String
}

type AssessmentsQuestionResults {
  id: ID!
  isCorrect: Boolean
  currentQuestionIndex: Int
  correctAnswers: [AssessmentsResultAnswers]
  incorrectSelectedAnswers: [AssessmentsResultAnswers]
}

type AssessmentsResultAnswers {
  id: ID!
  questionId: String
  text: String
  explanation: String
  correctAnswer: Boolean
}

input AssessmentsSubmitChoicesInput {
  questionId: String!
  attemptId: String!
  selectedChoiceIds: [String!]
}

input AssessmentsUpdateQuestionIndexInput {
  attemptId: String!
  questionIndex: Int!
}

enum AssessmentTypeEnum {
  SKILL_ASSESSMENT
  EXAM_SIMULATOR
  COURSE
}

input AssignGroupAdminInput {
  userId: String!
  groupId: String!
}

type AssignGroupAdminResponse {
  groupUserConnection: GroupUserConnection
}

input AssignLearningPathInput {
  learningPathId: String!
  userId: String!
}

input AssignOrganisationRoleInput {
  role: OrganisationRole!
  userId: String!
  teamId: String
}

type AssignOrganisationRoleResponse {
  taskId: String!
}

input AssignOrganisationUserRoleInput {
  role: OrganisationUserRole
  userId: String!
  teamId: String
}

type AssignOrganisationUserRoleResponse {
  taskId: String!
}

input AssignTeamToInvitationsInput {
  invitationCodes: [String]!
  teamId: String!
}

type AudioVisualAdaptiveStream {
  playlistKey: String!
  segmentDuration: String!
  ext: String!
  streamType: String!
  sources: [AudioVisualSource!]!

  """User has access, this will be included"""
  signedUrl: String
}

type AudioVisualContent {
  contentId: String!
  createdDate: Float!
  transcodeStatus: String!
  transcodeStatusMessage: String

  """Nullable until completion"""
  finishedDate: Float
  duration: Int
  mediaType: String
  sources(videoQuality: Int): [AudioVisualSource!]
  adaptiveStreams: [AudioVisualAdaptiveStream!]
  thumbnailList: [Thumbnail!]
}

type AudioVisualSource {
  sourceType: String!
  ext: String!
  key: String!
  presetId: String!
  fileSize: String!
  duration: Int!

  """Audio Only"""
  audioBitRate: String
  audioMaxBitRate: String

  """Video Only"""
  frameRate: String
  height: Int
  maxHeight: Int
  width: Int
  maxWidth: Int
  videoBitRate: String
  videoMaxBitRate: String

  """Adaptive only"""
  segmentDuration: String

  """User has access, this will be included"""
  signedUrl: String
}

type Auth0User {
  email: String
  email_verified: Boolean
  username: String
  phone_number: String
  phone_verified: Boolean
  user_id: String
  created_at: String
  updated_at: String
  picture: String
  name: String
  nickname: String
  multifactor: [String]
  last_ip: String
  last_login: String
  logins_count: Int
  blocked: Boolean
  given_name: String
  family_name: String
  identities: [Auth0UserIdentity]
  location: String
  job_title: String
  employer: String
  linkedinUrl: String
  bio: String
}

type Auth0UserIdentity {
  connection: String
  user_id: String
  provider: String
  isSocial: Boolean
  profileData: Auth0UserIdentityProfileData
}

type Auth0UserIdentityProfileData {
  email: String
  emailVerified: Boolean
  screen_name: String
  name: String
  picture: String
}

type AvailablePromoCodes {
  promotion: PromoCode
  userPromoCode: PromoCode
}

type Award {
  id: String!
  title: String!
}

enum BetaFeature {
  ADMIN_PORTAL_TEAMS
  ADMIN_PORTAL_SKILLS_ASSESSMENT
}

type BetaFeatureRequest {
  feature: String!
  status: String!
}

input BillingBusinessPlansInput {
  countryCode: String!
}

type BillingBusinessPlansResponse {
  plans: [BillingPlan!]
  selectedCountryCode: String!
}

type BillingEstimate {
  currentTerm: BillingEstimateTerm!
  nextTerm: BillingEstimateTerm
}

type BillingEstimateDiscount {
  amount: Int!
  description: String!
  currencySymbol: String!
  currencyCode: String!
}

type BillingEstimateItem {
  total: Int!
  unitPrice: Int!
  quantity: Int!
  currencySymbol: String!
  currencyCode: String!
  dateFrom: ISODate!
  dateTo: ISODate!
  isTaxed: Boolean!
  taxAmount: Int!
  taxRate: Float
}

type BillingEstimateTerm {
  total: Int
  amountDue: Int
  currencySymbol: String!
  currencyCode: String!
  charges: [BillingEstimateItem!]
  credits: [BillingEstimateItem!]
  discounts: [BillingEstimateDiscount!]
}

type BillingHistory {
  userId: String!
  email: String
  event: String!
  createdAt: ISODate!
  message: String!
}

type BillingHistoryResponse {
  histories: [BillingHistory!]
}

type BillingInvoice {
  id: ID!
  providerCode: String!
  status: String!
  date: ISODate!
  dueDate: ISODate!
  total: Int!
  currencyCode: String!
  downloadUrl: String!
}

type BillingInvoicesResponse {
  invoices: [BillingInvoice!]
}

input BillingPaymentSourceInput {
  token: String
  paymentIntentId: String
}

type BillingPlan {
  id: ID!
  name: String!
  packageId: String
  packageName: String
  providerCode: String!
  providerPlanId: String!
  currencyCode: String!
  currencySymbol: String!
  unitPrice: Int!
  unitMin: Int!
  unitMax: Int!
  unitDefault: Int!
  trialDuration: Int!
  trialUnit: String!
  createdAt: ISODate!
  updatedAt: ISODate
  isTaxed: Boolean
  taxRate: Float
}

input BillingPlanInput {
  id: String!
}

type BillingPlanResponse {
  plan: BillingPlan!
}

type BillingSubscription {
  id: ID!
  seats: Int!
  plan: BillingSubscriptionPlan
  organisation: BillingSubscriptionOrganisation
  billing: BillingSubscriptionBilling
  card: BillingSubscriptionCard
  providerCode: String!
  providerSubscriptionId: ID!

  """restricted to: [ADMIN,SERVER]"""
  providerSubscriptionUrl: String
  providerCustomerId: ID!
  providerPlanId: ID!
  createdAt: ISODate!
  updatedAt: ISODate!
  currentTermStart: ISODate!
  currentTermEnd: ISODate!
  trialStart: ISODate
  trialEnd: ISODate
  nextBillingAt: ISODate
  status: String!
  isAutoRenew: Boolean
}

input BillingSubscriptionAdminInput {
  name: String!
  email: String!
}

type BillingSubscriptionBilling {
  name: String!
  email: String!
  company: String!
  address: String!
  city: String!
  state: String
  postcode: String
  country: String!
  vat: String
}

input BillingSubscriptionBillingInput {
  name: String!
  email: String!
  company: String
  address: String!
  city: String!
  state: String
  postcode: String
  country: String!
  vat: String
}

type BillingSubscriptionCard {
  cardType: String!
  expiryMonth: Int!
  expiryYear: Int!
  last4: String!
  maskedNumber: String!
}

type BillingSubscriptionOrganisation {
  id: ID!
  name: String!
  companyLogo: String
  consumedLicenses: Int
}

input BillingSubscriptionOrganisationInput {
  name: String!
}

type BillingSubscriptionPlan {
  id: ID!
  name: String!
  providerCode: String!
  providerPlanId: ID!
  currencyCode: String!
  currencySymbol: String!
  unitPrice: Int!
  unitMin: Int!
  unitMax: Int!
  unitDefault: Int!
  trialDuration: Int!
  trialUnit: String!
  createdAt: ISODate!
  updatedAt: ISODate
  isTaxed: Boolean
  taxRate: Float
  subscriberPackage: BillingSubscriptionPlanPackage
}

input BillingSubscriptionPlanInput {
  id: ID!
}

type BillingSubscriptionPlanPackage {
  packageId: ID!
  packageName: String!
}

type BillingSubscriptionResponse {
  subscription: BillingSubscription
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type CalculateTaxResult {
  total: Float!
  tax: Float
  country: String
  currency: String
  taxRegion: String
  taxNumber: String
  taxNumberValid: Boolean
  taxDeducted: Boolean
  taxDeductedAmount: Float
}

input CancelStudyGroupInput {
  id: String!
}

type CancelStudyGroupResponse {
  studyGroup: StudyGroup
}

type CareerInformation {
  role: String
  goal: String
}

input CareersEchoInput {
  echo: String
}

type CareersEchoResponse {
  echo: String
}

type Certificate {
  id: ID
  title: String
  provider: CertificateProvider
  fullTitle: String
}

type CertificateProvider {
  id: ID
  title: String
  certificates: [Certificate]
}

type Certification {
  id: String!
  title: String!
  provider: String!
  fullTitle: String
}

type CertificationLink {
  error: String
  url: String
  expiry: String
}

type CertificationProvider {
  id: String
  title: String
}

input certificationsEchoInput {
  echo: String
}

type certificationsEchoResponse {
  echo: String
}

type CertificationToUpload {
  signature: String!
  policy: String!
  AWSAccessKey: String!
  fileName: String!
  uploadUri: String!
  bucket: String!
  certificationId: String!
}

type CertificationType {
  id: String
  title: String
  provider: CertificationProvider
}

type Changelog {
  date: ISODate
  description: String
  author: String
}

type ChangeLog {
  content: String
  version: String
}

type CheckSandboxSession {
  acceptedTerms: Boolean
  sandboxSession: SandboxSession
}

type ChildOrganisationIdsResponse {
  organisationId: ID
  childOrganisationIds: [String]
}

type ChildOrganisationResponse {
  organisation: Organisation
}

type ChildOrganisationsResponse {
  organisations: [Organisation]
}

type ClientTokenResult {
  clientToken: String!
}

type CloudPlayground_AccountStatus {
  id: ID!
  tcAccepted: Boolean
  accountType: CloudPlayground_AccountType
  isAccountOwner: Boolean
}

type CloudPlayground_AccountStatusResponse {
  accountStatus: CloudPlayground_AccountStatus
}

enum CloudPlayground_AccountType {
  B2C
  B2B
}

input CloudPlayground_AddServerInstanceVolumeInput {
  instanceId: String!
  volumeId: String!
}

type CloudPlayground_AddServerInstanceVolumeResponse {
  CloudPlayground_myServers: CloudPlayground_MyServers
}

type CloudPlayground_Distribution {
  id: ID
  name: String
  sizes: [CloudPlayground_Instance_Size]
}

input CloudPlayground_ExecuteServerInstanceCommandInput {
  instanceId: String!
  commandId: String!
}

type CloudPlayground_ExecuteServerInstanceCommandResponse {
  CloudPlayground_myServers: CloudPlayground_MyServers
}

type CloudPlayground_Instance_Size {
  id: ID
  specs: String
  units: Int
}

type CloudPlayground_MySandbox {
  id: ID!
  instances: [CloudPlayground_SandboxInstance]
}

type CloudPlayground_MyServers {
  id: ID!
  instances: [CloudPlayground_ServerInstance]
  availableDistributions: [CloudPlayground_Distribution]
  zones: [CloudPlayground_Zone]
  selectedZone: CloudPlayground_Zone
  unitUtilization: CloudPlayground_UnitUtilization
}

input CloudPlayground_ProvisionServerInstanceInput {
  distributionId: String!
  zoneId: String!
  tag: String
  sizeId: String!
}

type CloudPlayground_ProvisionServerInstanceResponse {
  CloudPlayground_myServers: CloudPlayground_MyServers
}

input CloudPlayground_RemoveServerInstanceVolumeInput {
  instanceId: String!
  volumeId: String!
}

type CloudPlayground_RemoveServerInstanceVolumeResponse {
  CloudPlayground_myServers: CloudPlayground_MyServers
}

type CloudPlayground_SandboxInstance {
  id: ID!
  status: String
  remoteInstanceId: String
  consoleType: ConsoleType
  createdAt: ISODate
  updatedAt: ISODate
  shutdownAt: ISODate
  userCredential: CloudPlayground_SandboxUserCredential
  keyCredential: CloudPlayground_SandboxKeyCredential
}

type CloudPlayground_SandboxKeyCredential {
  type: String!
  accessKeyId: String!
  secretAccessKey: String!
}

type CloudPlayground_SandboxUserCredential {
  username: String!
  password: String!
  type: String!
  url: String!
}

type CloudPlayground_ServerInstance {
  id: ID!
  distribution: String
  tag: String
  units: Int
  credentials: CloudPlayground_ServerInstanceCredentials
  ip: CloudPlayground_ServerInstanceIP
  hostname: [String]
  terminalUrl: String
  status: CloudPlayground_ServerStatus
  logs: [CloudPlayground_ServerInstanceLog]
  expiresAt: ISODate
  shutdownAt: ISODate
  availableCommands: [CloudPlayground_ServerInstanceCommands]
  activeCommandStatus: CloudPlayground_ServerInstanceCommandStatus
  volumes: [CloudPlayground_ServerInstanceVolume]
  graphicalShellUrl: String
}

type CloudPlayground_ServerInstanceCommands {
  id: ID!
  commandId: String
  label: String
}

enum CloudPlayground_ServerInstanceCommandStatus {
  AVAILABLE
  EXECUTING
  ERROR_EXECUTING
}

type CloudPlayground_ServerInstanceCredentials {
  username: String
  password: String
}

type CloudPlayground_ServerInstanceIP {
  publicIPv4: String
  privateIPv4: String
  IPv6: String
}

type CloudPlayground_ServerInstanceLog {
  id: ID!
  occurredAt: ISODate
  status: CloudPlayground_ServerStatus
  label: String
  message: String
}

type CloudPlayground_ServerInstanceVolume {
  id: ID
  volumeId: String
  path: String
  state: CloudPlayground_ServerInstanceVolumeState
}

enum CloudPlayground_ServerInstanceVolumeState {
  MOUNTED
  MOUNTING
  UNMOUNTED
}

enum CloudPlayground_ServerStatus {
  INITIALIZED
  CREATING
  CREATED
  ERROR_CREATING
  STARTING
  STARTED
  ERROR_STARTING
  ASSIGNING_IP
  IP_ASSIGNED
  ERROR_ASSIGNING_IP
  VERIFYING_SSH
  SSH_VERIFIED
  ERROR_VERIFYING_SSH
  RUNNING_COMMANDS
  COMMANDS_COMPLETE
  ERROR_RUNNING_COMMANDS
  READY
  STOPPING
  STOPPED
  ERROR_STOPPING
  TERMINATING
  TERMINATED
  ERROR_TERMINATING
}

type CloudPlayground_Split {
  id: ID!
  name: String
  description: String
  value: Boolean
}

input CloudPlayground_StartServerInstanceInput {
  instanceId: String!
}

type CloudPlayground_StartServerInstanceResponse {
  CloudPlayground_myServers: CloudPlayground_MyServers
  serverInstance: CloudPlayground_ServerInstance
}

input CloudPlayground_StopServerInstanceInput {
  instanceId: String!
}

type CloudPlayground_StopServerInstanceResponse {
  CloudPlayground_myServers: CloudPlayground_MyServers
  serverInstance: CloudPlayground_ServerInstance
}

input CloudPlayground_TerminateServerInstanceInput {
  instanceId: String!
}

type CloudPlayground_TerminateServerInstanceResponse {
  CloudPlayground_myServers: CloudPlayground_MyServers
}

type CloudPlayground_UnitUtilization {
  current: Int
  available: Int
  max: Int
}

input CloudPlayground_UpdateSplitInput {
  name: String
  value: Boolean
}

type CloudPlayground_UpdateSplitResponse {
  split: CloudPlayground_Split
}

type CloudPlayground_Zone {
  id: ID!
  name: String
}

input CloudPlaygroundEchoInput {
  echo: String
}

type CloudPlaygroundEchoResponse {
  echo: String
}

input CloudProfile {
  displayname: String
  email: String
  location: String
  jobTitle: String
  employer: String
  bio: String
  picture: String
  name: String
  twitterUrl: String
  githubUrl: String
  linkedinUrl: String
  facebookUrl: String
  employmentHistories: [CloudProfileEmploymentHistoryInput]
  visibilityToggles: VisibilityTogglesInput
}

type CloudProfileCertification {
  title: String!
  dateAcquired: String!
  provider: String!
  certificationId: String!
}

type CloudProfileCommunityEngagement {
  questions: Int!
  answers: Int!
  reputation: Int!
}

type CloudProfileCourseInfo {
  id: String
  artworkUrl: String
  name: String
}

input CloudProfileEchoInput {
  echo: String
}

type CloudProfileEchoResponse {
  echo: String
}

type CloudProfileEmploymentHistory {
  id: String!
  cloudProfileId: String
  company: String!
  title: String!
  description: String
  startDate: ISODate!
  endDate: ISODate
}

input CloudProfileEmploymentHistoryInput {
  id: ID
  company: String!
  title: String!
  description: String
  startDate: ISODate!
  endDate: ISODate
}

type CloudProfileEmploymentHistoryKeys {
  id: String!
  cloudProfileId: String!
}

input CloudProfileEmploymentHistoryKeysInput {
  id: ID
}

type CloudProfileResponse {
  id: String!
  displayname: String
  handle: String!
  email: String
  location: String
  jobTitle: String
  employer: String
  bio: String
  picture: String
  name: String
  twitterUrl: String
  githubUrl: String
  linkedinUrl: String
  facebookUrl: String
  completedCourses: [CloudProfileCourseInfo]!
  certifications: [CloudProfileCertification]
  skills: [CloudProfileSkill]
  employmentHistories: [CloudProfileEmploymentHistory]!
  communityEngagement: CloudProfileCommunityEngagement
  restrictions: OrganisationRestrictions
  visibilityToggles: VisibilityToggles
}

type CloudProfileSkill {
  name: String!
  description: String!
  level: Int!
  maxLevel: Int!
}

type Comment {
  author: String!
  createdTimestamp: Int!
  text: String!
  updatedTimestamp: Int!
}

type CommunityEngagement {
  questions: Int
  answers: Int
  reputation: Int
}

enum ComparisonOperator {
  GREATER_THAN
  GREATER_OR_EQUAL_TO
  EQUAL_TO
  LESS_THAN
  LESS_OR_EQUAL_TO
}

type CompletedCourseComponents {
  courseId: String!
  componentIds: [String!]!
}

type Component {
  id: ID!
  courseId: String!
  sectionId: String!
  description: String
  enhancedSyllabus: Boolean
  metadata: Metadata
  title: String
  sequence: Int
  url: String
  isHidden: Boolean
  resources: [ComponentResourceLink]
  completed: Boolean
  content: CourseComponentContent
  section: Section
}

type ComponentCompleteResult {
  result: String
}

interface ComponentContent {
  type: String!
}

type ComponentResource {
  title: String
  url: String
  bucket: String
  key: String
}

type ComponentResourceLink {
  title: String
  url: String
  bucket: String
  key: String
}

interface CondensedUserComponentContent {
  type: String!
}

type CondensedUserCourseComponent {
  componentIdentifier: String!
  content: CondensedUserComponentContent!
  completed: Boolean
  description: String!
  hasResources: Boolean!
  sequence: Int!
  title: String!
  courseId: String!
  sectionId: String!
}

type CondensedUserLabContent implements CondensedUserComponentContent {
  type: String!
  quickLabsId: String
  labImage: String
  description: String
}

type CondensedUserQuizContent implements CondensedUserComponentContent {
  type: String!
  duration: Int
  quizName: String
  quizId: String
  isPracticeExam: Boolean
  questionCount: Int
}

type CondensedUserTextContent implements CondensedUserComponentContent {
  type: String!
}

type CondensedUserVideoContent implements CondensedUserComponentContent {
  type: String!
  duration: Int
  videoposter: String
  posters: [PosterSource!]
  videosources(filter: VideoSourceFilter): [CondensedUserVideoSource!]
}

type CondensedUserVideoSource {
  type: String!
  description: String
  filesize: Int
  duration: Int
}

type CondensedUserWhitepaperContent implements CondensedUserComponentContent {
  type: String!
  url: String
}

enum ConsoleType {
  AWS
  GCP
  AZURE
}

input ContentEchoInput {
  echo: String
}

type ContentEchoResponse {
  echo: String
}

input ContentSearchEchoInput {
  echo: String
}

type ContentSearchEchoResponse {
  echo: String
}

type ContentTag {
  tagId: String!
  label: String!
  category: String!
  lastModifiedDate: Float
}

input ContentTagCreateInput {
  label: String!
  category: String!
}

type ContentTagExistedError {
  existingTags: [String]!
}

input ContentTaggingEchoInput {
  echo: String
}

type ContentTaggingEchoResponse {
  echo: String
}

input ContentTagUpdateInput {
  tagId: String!
  label: String!
  category: String!
}

type ContentUploadData {
  s3UploadData: S3ContentUploadData!
  contentId: String!
}

type Course {
  allowDownload: Boolean
  audience: [String!]
  authors: [String!]
  brand: String!
  description: String
  duration: Float
  publishedDate: String
  decommissionedDate: String
  enableThumbnails: Boolean
  hasPracticeExams: Boolean
  isPublic: Boolean
  isDirty: Boolean
  metadata: CourseMetadata
  changelogs: [CourseChangelog!]
  outcomes: [String!]
  ogImage: String
  previewVideoUrl: String
  previewVideoPosterUrl: String
  purchaseProductId: String
  questionCount: Int
  quizCount: Int
  quizzesAvailable: Boolean
  requirements: [String!]
  sections: [CourseSection!]
  shortSummary: String
  shortTitle: String
  technology: String
  technologyLogoImage: String
  artworkKey: String!
  testimonials: [Testimonial!]
  metadataSEO: MetadataSEO
  title: String!
  type: String
  artworkUrl: String
  uniqueid: String!
  url: String!
  vendors: [CourseVendor!]
  topics: [CourseTopic!]
  lectureCount: Int
  isFeatured: Boolean
  promoVideoUrl: PromoVideoUrl
  backgroundPosterUrl: String
  ctaTitle: String
  ctaFooter: String
  includesPracticeExams: Boolean
  includesQuizzes: Boolean
  isVisible: Boolean
  prerequisites: [String!]
  primaryTopic: String
  roles: [String!]
  services: [String!]
  skillLevels: [String!]
  isNonMembers: Boolean
}

enum Course_AccessLevel {
  FREE
  PAID
}

input Course_ComponentContentInput {
  type: String!
  contentId: String
  duration: Int
  videoposter: String
  posters: [Course_CourseComponentPosterSourceInput!]
  videosources: [Course_CourseVideoSourceInput!]
  url: String
  labImage: String
  quickLabsId: String
  description: String
  labId: String
  quizId: String
  quizName: String
  quizType: String
  textsources: [Course_CourseTextSourceInput!]
}

input Course_ComponentInput {
  id: String!
  url: String!
  title: String!
  description: String
  enhancedSyllabus: Boolean!
  isHidden: Boolean
  content: Course_ComponentContentInput!
  resources: [Course_CourseComponentResourceInput]
}

type Course_Course {
  id: ID
  type: String
  authors: [String!]
  url: String
  title: String
  shortTitle: String
  description: String
  shortSummary: String
  duration: Float
  ctaTitle: String
  ctaFooter: String
  isPublic: Boolean
  isVisible: Boolean
  isNonMembers: Boolean
  accessLevel: Course_AccessLevel
  publishedDate: Float
  decommissionedDate: Float
  artworkUrl: String
  backgroundPosterUrl: String
  previewVideoContentId: String
  previewVideoUrl: String
  previewVideoPosterUrl: String
  includesPracticeExams: Boolean
  includesQuizzes: Boolean
  primaryTopic: String
  laIsPublished: Boolean
  laPublishedAt: Float
  skillLevels: [String!]
  roles: [String!]
  services: [String!]
  audience: [String!]
  outcomes: [String!]
  prerequisites: [String!]
  requirements: [String!]
  topics: [CourseOverviewTopic!]
  vendors: [CourseOverviewVendor!]
  sections: [Course_CourseSection!]
  metadataSEO: CourseOverviewMetadataSEO
  testimonials: [CourseOverviewTestimonial!]
  metadata: Metadata
  changelogs: [Changelog]
  features: [CourseFeatures]
  certificationPrep: Boolean
  communityEdition: Boolean
  interactiveDiagramURL: String
}

type Course_CourseComponent {
  id: ID!
  isHidden: Boolean
  courseId: String
  sectionId: String
  description: String
  enhancedSyllabus: Boolean
  title: String
  sequence: Int
  url: String
  metadata: Metadata
  resources: [Course_CourseComponentResource]
  content: Course_CourseComponentContent
}

interface Course_CourseComponentContent {
  type: String!
}

type Course_CourseComponentPosterSource {
  url: String
}

input Course_CourseComponentPosterSourceInput {
  url: String
}

type Course_CourseComponentResource {
  title: String
  url: String
  bucket: String
  key: String
}

input Course_CourseComponentResourceInput {
  title: String
  url: String
  bucket: String
  key: String
}

input Course_CourseFeaturesInput {
  id: ID!
  name: String!
}

type Course_CourseSection {
  id: ID!
  isHidden: Boolean
  courseId: String
  description: String
  title: String
  sequence: Int
  url: String
  components: [Course_CourseComponent!]
}

input Course_CourseTestimonialInput {
  id: String
  imageSrc: String
  videoSrc: String
  name: String
  role: String
  quote: String
}

type Course_CourseTextSource {
  key: String
  bucket: String
}

input Course_CourseTextSourceInput {
  key: String
  bucket: String
}

type Course_CourseVideoSource {
  filesize: Int
  signedUrl: String
  key: String
  type: String
  duration: Int
  bucket: String
}

input Course_CourseVideoSourceInput {
  filesize: Int
  signedUrl: String
  key: String
  type: String
  duration: Int
  bucket: String
}

input Course_CreateCourseShellInput {
  uniqueid: String!
  authors: [String!]!
  accessLevel: Course_AccessLevel
  url: String!
  title: String!
  shortTitle: String!
  description: String!
  shortSummary: String!
  duration: Float
  ctaTitle: String
  ctaFooter: String
  artworkUrl: String
  backgroundPosterUrl: String
  previewVideoPosterUrl: String
  primaryTopic: String
  topics: [Course_TopicInput!]
  skillLevels: [String!]
  roles: [String!]
  services: [String!]
  vendors: [Course_VendorInput!]
  audience: [String!]
  outcomes: [String!]
  testimonials: [Course_CourseTestimonialInput]
  prerequisites: [String!]
  requirements: [String!]
  metadataSEO: Course_MetadataSEOInput
  features: [Course_CourseFeaturesInput]
  certificationPrep: Boolean
  communityEdition: Boolean
  interactiveDiagramURL: String
  isPublic: Boolean
  publishedDate: Float
  laIsPublished: Boolean
  laPublishedAt: Float
}

type Course_CreateCourseShellResponse {
  course: Course_Course
}

type Course_HandsOnLabComponentContent implements Course_CourseComponentContent {
  type: String!
  labId: String
}

type Course_LabComponentContent implements Course_CourseComponentContent {
  type: String!
  description: String
  quickLabsId: String
  labImage: String
}

input Course_MetadataSEOInput {
  title: String
  description: String
}

type Course_QuizComponentContent implements Course_CourseComponentContent {
  type: String!
  quizId: String
  quizName: String
  quizType: String
}

input Course_SectionInput {
  id: String!
  url: String!
  title: String!
  description: String
  isHidden: Boolean
  components: [Course_ComponentInput!]
}

input Course_SetCourseComponentInput {
  courseId: String!
  sectionId: String!
  component: Course_ComponentInput!
  notify: Boolean
  changelog: String
}

type Course_SetCourseComponentResponse {
  course: Course_Course
}

input Course_SetCourseOutlineInput {
  uniqueid: String!
  sections: [Course_SectionInput!]
  previewVideoContentId: String
  previewVideoUrl: String
  notify: Boolean
  changelog: String
}

type Course_SetCourseOutlineResponse {
  course: Course_Course
}

input Course_TestimonialInput {
  id: String!
  imageSrc: String
  videoSrc: String
  name: String!
  role: String!
  quote: String!
}

type Course_TextComponentContent implements Course_CourseComponentContent {
  type: String!
  textsources: [Course_CourseTextSource!]
}

input Course_TopicInput {
  name: String!
}

input Course_UpdateCourseShellInput {
  uniqueid: String!
  authors: [String!]!
  accessLevel: Course_AccessLevel
  url: String!
  title: String!
  shortTitle: String!
  description: String!
  shortSummary: String!
  duration: Float
  ctaTitle: String
  ctaFooter: String
  artworkUrl: String
  backgroundPosterUrl: String
  previewVideoPosterUrl: String
  primaryTopic: String
  topics: [Course_TopicInput!]
  skillLevels: [String!]
  roles: [String!]
  services: [String!]
  vendors: [Course_VendorInput!]
  audience: [String!]
  outcomes: [String!]
  testimonials: [Course_CourseTestimonialInput]
  prerequisites: [String!]
  requirements: [String!]
  metadataSEO: Course_MetadataSEOInput
  features: [Course_CourseFeaturesInput]
  certificationPrep: Boolean
  communityEdition: Boolean
  interactiveDiagramURL: String
  isPublic: Boolean
  publishedDate: Float
  laIsPublished: Boolean
  laPublishedAt: Float
}

type Course_UpdateCourseShellResponse {
  course: Course_Course
}

type Course_UserCourses {
  id: ID
  ownedCourses: [CourseOverview]
  startedCourses: [CourseOverview]
  inProgressCourse: InProgressUserCourse
}

input Course_VendorInput {
  name: String!
}

type Course_VideoComponentContent implements Course_CourseComponentContent {
  type: String!
  contentId: String
  subtitleUrl: String
  duration: Int
  videoposter: String
  posters: [Course_CourseComponentPosterSource!]
  videosources(filter: Course_VideoSourceFilter): [Course_CourseVideoSource!]
}

input Course_VideoSourceFilter {
  videoType: String
  preferredQuality: String
}

type Course_WhitepaperComponentContent implements Course_CourseComponentContent {
  type: String!
  url: String
}

type CourseAccessResult {
  result: String!
}

type CourseChangelog {
  date: ISODate
  description: String
  author: String
}

type CourseComponent {
  componentIdentifier: String!
  content: ComponentContent
  description: String
  enhancedSyllabus: Boolean
  isDirty: Boolean
  metadata: CourseComponentMetadata
  resources: [ComponentResource!]
  sequence: Int
  title: String
  url: String
}

interface CourseComponentContent {
  id: ID!
  type: String!
}

input CourseComponentContentModelInput {
  type: String!

  """whitepaper"""
  url: String

  """lab"""
  labImage: String
  quickLabsId: String
  description: String

  """quiz"""
  quizName: String
  quizId: String
}

type CourseComponentMetadata {
  createdDate: ISODate
  notifyUpdatedDate: ISODate
  updatedDate: ISODate
}

type CourseComponentNavigation {
  id: ID!
  sectionId: String
  sectionUrl: String
  sectionSequence: String
  sectionTitle: String
  componentId: String
  componentUrl: String
  componentSequence: String
  componentTitle: String
}

type CourseComponentPosterSource {
  url: String
}

type CourseComponentPreviousNextNavigation {
  previous: CourseComponentNavigation
  next: CourseComponentNavigation
}

input CourseComponentUpdateModelInput {
  id: String!
  url: String!
  title: String!
  description: String!
  enhancedSyllabus: Boolean
  content: CourseComponentContentModelInput!
}

input CourseEchoInput {
  echo: String
}

type CourseEchoResponse {
  echo: String
}

input CourseEventInput {
  platform: String
  contentType: String!
  grantType: String
  durationInSeconds: Int!
  courseId: String
  courseTitle: String
  courseUrl: String
  sectionId: String
  sectionTitle: String
  sectionUrl: String
  componentId: String
  componentTitle: String
  componentUrl: String
  metadataAsJSON: String
}

enum CourseEventType {
  START_COURSE
  COMPLETE_COURSE
}

type CourseFeatures {
  id: ID!
  name: String!
}

type CourseInfo {
  id: ID!
  name: String!
  shortSummary: String
  completed: Boolean!
  duration: Float
  completedPercent: Float
  lastComponentCompletedDate: ISODate
  artworkUrl: String
  url: String
}

input CourseInfoFilter {
  limit: Int
  sort: SortOrder
}

input CourseInput {
  allowDownload: Boolean
  audience: [String]
  authors: [String]!
  brand: String!
  description: String!
  duration: Float
  publishedDate: String
  decommissionedDate: String
  enableThumbnails: Boolean
  hasPracticeExams: Boolean
  isPublic: Boolean
  outcomes: [String]
  ogImage: String
  previewVideoUrl: String
  previewVideoPosterUrl: String
  purchaseProductId: String
  questionCount: Int
  quizCount: Int
  quizzesAvailable: Boolean
  requirements: [String]
  shortSummary: String!
  shortTitle: String!
  technology: String
  technologyLogoImage: String
  title: String!
  artworkUrl: String
  type: String!
  uniqueid: String!
  url: String!
  vendors: [CourseVendorInput!]
  topics: [CourseTopicInput!]
  lectureCount: Int
  isFeatured: Boolean
  featureTestimonial: TestimonialInput
  testimonials: [TestimonialInput!]
  metadataSEO: MetadataSEOInput
  backgroundPosterUrl: String
  ctaTitle: String
  ctaFooter: String
  includesPracticeExams: Boolean
  includesQuizzes: Boolean
  isVisible: Boolean
  prerequisites: [String]
  primaryTopic: String
  roles: [String]
  services: [String]
  skillLevels: [String]
  isNonMembers: Boolean
}

input CourseIssueInput {
  contentType: String!
  comment: String!
  clock: String
  courseId: String
  courseTitle: String
  courseUrl: String
  sectionId: String
  sectionTitle: String
  sectionUrl: String
  componentId: String
  componentTitle: String
  componentUrl: String
}

type CourseMetadata {
  createdDate: ISODate
  notifyUpdatedDate: ISODate
  updatedDate: ISODate
}

type CourseOverview {
  id: ID!
  title: String
  url: String
  authors: [String]
  artworkUrl: String
  shortTitle: String
  shortSummary: String
  description: String
  duration: Float
  publishedDate: Float
  decommissionedDate: Float
  isPublic: Boolean
  numberOfLessons: Int
  outcomes: [String]
  audience: [String]
  quizCount: Int
  lectureCount: Int
  hasPracticeExams: Boolean
  previewVideoContentId: String
  previewVideoUrl: String
  type: String
  purchaseProductId: String
  backgroundPosterUrl: String
  ctaTitle: String
  ctaFooter: String
  includesPracticeExams: Boolean
  includesQuizzes: Boolean
  isVisible: Boolean
  prerequisites: [String]
  primaryTopic: String
  roles: [String]
  services: [String]
  previewVideoPosterUrl: String
  requirements: [String]
  vendors: [CourseOverviewVendor]
  topics: [CourseOverviewTopic]
  skillLevels: [String]
  isNonMembers: Boolean
  accessLevel: Course_AccessLevel
  sandbox: String
  testimonials: [CourseOverviewTestimonial]
  metadataSEO: CourseOverviewMetadataSEO
  laIsPublished: Boolean
  laPublishedAt: Float
  sections: [Section!]!
  completed: Boolean!
  completedPercent: Float
  metadata: Metadata
  changelogs: [Changelog]
  rating: CourseRating
  features: [CourseFeatures]
  certificationPrep: Boolean
  communityEdition: Boolean
  interactiveDiagramURL: String
}

type CourseOverviewMetadataSEO {
  title: String
  description: String
}

type CourseOverviewTestimonial {
  id: String
  imageSrc: String
  videoSrc: String
  name: String
  role: String
  quote: String
}

type CourseOverviewTopic {
  name: String
}

type CourseOverviewVendor {
  name: String
}

type CourseRating {
  id: ID!
  archived: Boolean
  org: String
  entries: [CourseRatingEntry]
  scores: CourseRatingSummary
  percentage: CourseRatingPercentage
  totalScores: Float
}

type CourseRatingEntry {
  id: ID!
  entityId: String
  comment: String
  createdAt: String
  createdBy: String
  score: CourseRatingScore
  updatedAt: String
}

type CourseRatingPercentage {
  positive: Float
  negative: Float
}

enum CourseRatingScore {
  positive
  neutral
  negative
}

type CourseRatingSummary {
  positive: Float
  neutral: Float
  negative: Float
}

type CourseRecommendation {
  id: ID!
  type: String!
  courseId: String!
  reasons: [CourseRecommendationReason]
  score: Float
}

type CourseRecommendationReason {
  reasonData: [String]
  reasonType: String
}

type CourseSection {
  components: [CourseComponent!]
  description: String
  sectionIdentifier: String
  sequence: Int
  title: String
  url: String
}

input CourseSectionUpdateModelInput {
  id: String!
  url: String!
  title: String!
  description: String!
  components: [CourseComponentUpdateModelInput!]!
}

type CourseTextSourceContent {
  id: ID!
  key: String
  bucket: String
}

type CourseTopic {
  name: String!
}

input CourseTopicInput {
  name: String!
}

type CourseVendor {
  name: String!
}

input CourseVendorInput {
  name: String!
}

input CourseVideoSourceFilter {
  videoType: String
  preferredQuality: String
}

type CourseVideosources {
  filesize: Int
  signedUrl: String
  key: String
  type: String
  duration: Int
  bucket: String
  quality: String
}

input CreateApiSettingsInput {
  applicationName: String!
}

type CreateApiSettingsResponse {
  apiSettings: ApiSettings!
  apiKey: String!
}

input CreateBillingSubscriptionInput {
  seats: Int!
  plan: BillingSubscriptionPlanInput!
  organisation: BillingSubscriptionOrganisationInput!
  admin: BillingSubscriptionAdminInput!
  billing: BillingSubscriptionBillingInput!
  paymentSource: BillingPaymentSourceInput
}

type CreateBillingSubscriptionResponse {
  subscription: BillingSubscription!
}

input CreateChildOrganisationInput {
  name: String!
  userLicenseCount: Int
}

union CreateContentTagsResult = CreateTagResults | ContentTagExistedError

type CreatedExamAttempt {
  attempt: ExamAttempt!
  exam: Exam!
}

input CreateEpisodeInput {
  title: String!
  shortSummary: String!
  episodeUrl: String!
  description: String!
}

input CreateGdprRequestInput {
  userId: String!
  email: String!
  name: String
  description: String
}

input CreateGroupInput {
  name: String!
  description: String
  colorScheme: String
}

type CreateGroupResponse {
  group: Group
}

input CreateInvitationInput {
  emails: [String]
  options: CreateInvitationOptions
}

input CreateInvitationOptions {
  skipEmail: Boolean
  inviteAsAdmin: Boolean
  inviteRole: InvitationRoles
  onboarding: Boolean
  postActions: [OrganisationInvitationPostAction]
  invitationMessage: String
}

type CreateInvitationResponse {
  taskId: String!
  invitations: [OrganisationInvitation]
}

input CreateMarketplaceOrganisationInput {
  RegistrationToken: String!
  name: String!
}

type CreateMarketplaceOrganisationResponse {
  organisation: Organisation
}

input CreateOrganisationInput {
  name: String
  chargeModel: String
  subscription: OrganisationSubscriptionInput
}

type CreateOrganisationResponse {
  organisation: Organisation
}

input CreateProductInput {
  sku: Int!
  id: String!
  title: String!
  type: String!
  courses: [ProductCourseInput!]!
  brand: String!
}

input CreatePromoCodeInput {
  id: String!
  description: String
  publicTitle: String
  publicSubTitle: String
  originalQuantity: Int
  remainingQuantity: Int
  products: [String!]
  prices: [ProductPriceInput!]
}

input CreateSkillsAssessmentInput {
  duration: Int!
  timezone: String!
  groups: [SkillsAssessmentGroup]!
}

input CreateSkillsAssessmentRequestInput {
  email: String!
  organisationName: String!
  contactName: String!
  organisationId: String
  studentFacingName: String
}

type CreateSkillsAssessmentResponse {
  id: ID!
}

input CreateStudyGroupInput {
  name: String!
  description: String
  colorScheme: String
  courseId: String!
  cloudProviderId: String
  acceleratorProgramEnabled: Boolean
}

type CreateStudyGroupResponse {
  studyGroup: StudyGroup
}

type CreateTagResults {
  createdTags: [ContentTag]!
}

input CreateTeamInput {
  name: String!
  description: String
}

type CreateTeamResponse {
  team: Team
}

type CreditCardPaymentMethod {
  cardType: String!
  expirationDate: String!
  maskedNumber: String!
  type: String!
}

enum DatePeriodInterval {
  DAY
  WEEK
  MONTH
}

input DateRange {
  from: String
  to: String
}

input DeleteGroupInput {
  id: String!
}

type DeleteGroupResponse {
  group: Group
}

input DeleteStudyGroupInput {
  id: String!
}

type DeleteStudyGroupResponse {
  studyGroup: StudyGroup
}

type DeleteSubtitleResult {
  id: ID!
  deleted: Boolean
}

input DeleteTeamInput {
  id: String!
}

type DeleteTeamResponse {
  team: Team
}

input DeleteUserCertificateInput {
  id: ID!
}

type Discipline {
  skillLevel: String
  role: String
}

input DisciplineInput {
  skillLevel: String
  role: String
}

input Echo {
  text: String
}

input EchoInput {
  echo: String
}

type EchoResponse {
  echo: String
}

"""Series - Editor - Revisit how this works"""
type EditorEpisode {
  seriesId: String!
  episodeId: String!
  episodeUrl: String!

  """Record Meta"""
  activePublishedDateKey: Float
  isPublic: Boolean!
  publishedDateKey: Float!

  """Meta"""
  title: String!
  shortSummary: String!
  description: String!
  resources: [EpisodeResource!]!
  thumbnailUrl: String

  """Episodes"""
  activeEpisodeContentId: String
  episodeContentIds: [String!]!
  activeEpisodeContent: Webseries_AudioVisualContent
  episodeContent: [Webseries_AudioVisualContent!]!
}

type EditorQuestion {
  questionId: String
  authorId: String
  questionStatus: String
  isFlaggedForQA: Boolean
  question: QuestionData
  questionHistory: [QuestionVersionData]
  editorNote: String
  history: [QuestionHistory!]
  lastUpdated: Float
}

type EditorSeries {
  """Meta"""
  seriesId: String!
  seriesUrl: String!
  isProtected: Boolean!
  isPublic: Boolean!

  """Information"""
  title: String!
  description: String!
  artworkKey: String
  artworkUrl: String
  bannerUrl: String
  forumRoomId: String
  hubspot: Hubspot
  seriesOverviewContent: SeriesOverviewContent

  """Connections - Public"""
  activeEpisodes(limit: Int, offset: Int): [EditorEpisode!]!

  """Connections - Private"""
  allEpisodes: EpisodePublishStates!
}

type EmploymentHistory {
  id: String
  profileId: String
  company: String
  title: String
  description: String
  startDate: ISODate
  endDate: ISODate
}

input EmploymentHistoryInput {
  id: ID
  company: String!
  title: String!
  description: String
  startDate: ISODate!
  endDate: ISODate
}

input EpisodeProgressInput {
  episodeId: String!
  seriesId: String!
  secondsWatched: Int!
  percentComplete: Float!
}

"""TODO: Enum"""
type EpisodePublishStates {
  PUBLISH_DATE_NOT_SET: [EditorEpisode!]!
  PUBLISHING: [EditorEpisode!]!
  PUBLISHED: [EditorEpisode!]!
}

type EpisodeResource {
  title: String!
  url: String!
}

input EpisodeResourceInput {
  title: String!
  url: String!
}

type Error {
  messages: [ErrorMessage!]!
}

type ErrorMessage {
  key: String!
  message: String!
}

input EstimateAddBillingSubscriptionSeatsInput {
  seatsExtra: Int!
}

type EstimateAddBillingSubscriptionSeatsResponse {
  estimate: BillingEstimate!
  card: BillingSubscriptionCard
}

input EstimateCreateBillingSubscriptionInput {
  seats: Int!
  plan: BillingSubscriptionPlanInput!
  billing: BillingSubscriptionBillingInput!
}

type EstimateCreateBillingSubscriptionResponse {
  estimate: BillingEstimate!
}

input EventInput {
  eventType: String!
  properties: String!
}

type Exam {
  id: String!
  userId: String!
  courseId: String!
  title: String!
  description: String
  duration: Int!
  totalQuestions: Int!
  domainBreakdown: [ExamDomainBreakdown!]!
  questions: [ExamQuestion!]!
}

type ExamAnswerOption {
  id: String!
  text: String!
  correct: MaybeBoolean!
}

input ExamAnswerSubmissionInput {
  questionId: String!
  elapsedTime: Int!
  seenCount: Int!
  skippedCount: Int!
  answered: Boolean!
  answerSubmittedCount: Int!
  historicallyFlagged: Boolean!
  flagged: Boolean!
  selectedAnswerIds: [String!]
}

type ExamAnswerSubmissionResult {
  questionId: String!
  domain: String!
  elapsedTime: Int!
  seenCount: Int!
  skippedCount: Int!
  answered: Boolean!
  answerSubmittedCount: Int!
  historicallyFlagged: Boolean!
  flagged: Boolean!
  selectedAnswerIds: [String!]
  correct: MaybeBoolean!
}

type ExamAttempt {
  id: String!
  examId: String!
  courseId: String!
  userId: String!
  createdTimestamp: String!
  completedTimestamp: String
  score: Float
}

type ExamBlueprint {
  title: String!
  description: String
  duration: Int!
  totalQuestions: Int!
  domainBreakdown: [ExamDomainBreakdown!]!
}

type ExamDomainBreakdown {
  domain: String!
  percentage: Int!
}

type ExamQuestion {
  id: String!
  domain: String!
  question: String!
  explanation: String
  links: [ExamQuestionLink!]
  answers: [ExamAnswerOption!]!
}

type ExamQuestionLink {
  url: String
  title: String
}

input ExamSubmissionInput {
  examAttemptId: String!
  timeElapsed: Boolean!
  answers: [ExamAnswerSubmissionInput!]!
}

type ExamSubmissionResult {
  score: Float!
  timeElapsed: Boolean!
  answers: [ExamAnswerSubmissionResult!]!
}

type Explanation {
  text: String
  explanationLinks: [ExplanationLink!]
}

input ExplanationInput {
  text: String
  explanationLinks: [ExplanationLinkInput]
}

type ExplanationLink {
  text: String
  url: String
}

input ExplanationLinkInput {
  text: String
  url: String
}

input ExtendPersonalMembershipInput {
  userId: ID!
  currentTermEnd: String!
}

type ExtendPersonalMembershipResponse {
  userId: ID
}

type Facet {
  topic: [FacetValue!]
  vendor: [FacetValue!]
  technology: [FacetValue!]
  service: [FacetValue!]
  difficulty: [FacetValue!]
  visibility: [FacetValue!]
}

type FacetResponse {
  value: String
  count: Int
}

input FacetSearchInput {
  facetName: String
  facetQuery: String
  filters: String
}

type FacetValue {
  name: String!
  count: Int!
}

type Feature {
  id: ID!
  name: String
  displayName: String!
  valueType: String!
}

enum FeatureAccessMatchCondition {
  ALL
  ANY
}

type FeatureFlag {
  name: String!
  enabled: Boolean!
}

type FeatureFlagResponse {
  id: ID!
  name: String!
  description: String
  enabled: Boolean
}

input FeatureInput {
  id: ID!
  name: String
  displayName: String!
  valueType: String!
}

type FeatureRecommendation {
  type: String!
  reasons: [String]
}

type Features {
  mobile(identification: MobileIdentification!): FeaturesMobile!
}

type FeaturesMobile {
  ratings: MobileRatings!
}

enum FeatureValueType {
  number
  bool
  string
}

input Files {
  bucket: String!
  filePath: String!
}

type FileToUpload {
  signature: String!
  policy: String!
  AWSAccessKey: String!
  fileName: String!
  uploadUri: String!
  bucket: String!
}

input GdprEchoInput {
  echo: String
}

type GdprEchoResponse {
  echo: String
}

type GdprRequest {
  userId: String!
  email: String!
  createdDate: ISODate!
  status: String
  updatedDate: ISODate
  requestedBy: String
  updatedBy: String
  name: String
  description: String
}

enum GdprStatus {
  REQUESTED
  IN_PROGRESS
  COMPLETED
}

type GenerateVerificationTicketResponse {
  ticket: String
}

type GeoLocation {
  countryCode: String!
  country: String!
  lng: Float!
  lat: Float!
  ip: String!
}

input GetActiveEpisodeInput {
  seriesId: String!
  offset: Int
  limit: Int
}

type GetCompletionQuizResponse {
  quizId: String!
  completed: Boolean!
  remainingAttempts: Int!
  activeSession: Boolean!
}

enum GlobalSearch_AccessType {
  MEMBERSHIP
  MEMBERSHIP_OR_OWNED
  FREE
}

enum GlobalSearch_ContentType {
  COURSE
  COURSE_LAB
  COURSE_QUIZ
  COURSE_LECTURE
  COURSE_SECTION
  SERIES
  SERIES_VIDEO
  HANDS_ON_LAB
  LEARNING_PATH
  FACET
}

enum GlobalSearch_LearningType {
  COURSE
  LAB
  QUIZ
  LECTURE
  SECTION
  SERIES
  SERIES_EPISODE
  LEARNING_PATH
  PROJECTS
}

type GlobalSearch_Response {
  id: ID
  type: GlobalSearch_ContentType
  learningTypes: [GlobalSearch_LearningType]
  accessType: GlobalSearch_AccessType
  title: String
  description: String
  shortDescription: String
  authors: [String]
  cloudProviders: [String]
  topics: [String]
  technologies: [String]
  skillLevels: [String]
  roles: [String]
  url: String
  imageUrl: String
  secondaryImageUrl: String
  duration: String
}

input GlobalSearch_SearchInput {
  query: String
  filters: String
  hitsPerPage: Int
  page: Int
  facets: [String!]
}

input GrantPersonalMembershipInput {
  userId: ID!
  subscriptionCreatedAt: String!
  currentTermEnd: String!
}

type GrantPersonalMembershipResponse {
  userId: ID
}

type Group {
  id: ID!
  name: String!
  description: String
  colorScheme: String
  createdAt: ISODate
  updatedAt: ISODate
  deletedAt: ISODate
  numberOfUsers: Int
}

input GroupEchoInput {
  echo: String
}

type GroupEchoResponse {
  echo: String
}

type GroupUserConnection {
  id: ID!
  groupId: String
  userId: String
  admin: Boolean
  addedAt: ISODate
  removedAt: ISODate
}

type Handson_AudioVisualAdaptiveStream {
  playlistKey: String
  segmentDuration: String
  ext: String
  streamType: String
  sources: [Handson_AudioVisualSource!]

  """User has access, this will be included"""
  signedUrl: String
}

type Handson_AudioVisualContent {
  contentId: String
  createdDate: Float
  transcodeStatus: String
  transcodeStatusMessage: String

  """Nullable until completion"""
  finishedDate: Float
  duration: Int
  mediaType: String
  sources(videoQuality: Int): [Handson_AudioVisualSource!]
  adaptiveStreams: [Handson_AudioVisualAdaptiveStream!]
  thumbnailList: [Handson_Thumbnail!]
}

type Handson_AudioVisualSource {
  sourceType: String
  ext: String
  key: String
  presetId: String
  fileSize: String
  duration: Int

  """Audio Only"""
  audioBitRate: String
  audioMaxBitRate: String

  """Video Only"""
  frameRate: String
  height: Int
  maxHeight: Int
  width: Int
  maxWidth: Int
  videoBitRate: String
  videoMaxBitRate: String

  """Adaptive only"""
  segmentDuration: String

  """User has access, this will be included"""
  signedUrl: String
}

type Handson_Thumbnail {
  size: Int
  filename: String
  key: String
  url: String
}

input HandsonEchoInput {
  echo: String
}

type HandsonEchoResponse {
  echo: String
}

type HandsonLab {
  labId: String!
  visibility: String!
  title: String!
  labUrl: String!
  shortDescription: String!
  description: String
  thumbnailUrl: String
  primaryContentId: String
  duration: Float
  contentIds: [String!]
  isPopular: Boolean
  vendor: String
  topic: [String!]
  service: [String!]
  technology: [String!]
  difficulty: String

  """restricted to: [EDITOR,MEMBER,ADMIN]"""
  resource: [Resource!]
  createdDate: Float
  updatedDate: Float
  publishedDate: Float
  decommissionedDate: Float
  videoContent: Handson_AudioVisualContent
  videoContents: [Handson_AudioVisualContent!]
}

type HandsOnLabComponentContent implements CourseComponentContent {
  id: ID!
  type: String!
  labId: String
  name: String
  duration: Int
}

type HandsOnLabContent implements ComponentContent {
  type: String!
  labId: String
}

input HandsonLabInput {
  labId: String
  visibility: String
  title: String
  labUrl: String
  shortDescription: String
  description: String
  thumbnailUrl: String
  primaryContentId: String
  duration: Float
  contentIds: [String!]
  isPopular: Boolean
  vendor: String
  topic: [String!]
  service: [String!]
  technology: [String!]
  difficulty: String
  resource: [ResourceInput!]
  createdDate: Float
  updatedDate: Float
  publishedDate: Float
  decommissionedDate: Float
}

input HandsonLabsEventInput {
  platform: String
  contentType: String!
  grantType: String
  durationInSeconds: Int!
  labId: String
  labTitle: String
  labUrl: String
  metadataAsJSON: String
}

input HIERARCHY_OrganisationCourseActivityFilters {
  courseId: String
  progress: Int
  dateRange: DateRange
}

input HIERARCHY_organisationCourseEngagementSummaryFilters {
  dateRange: DateRange
}

type HiringOrganisation {
  organisationId: String
  id: ID
  name: String
  applicationEmail: String
  gtsName: String
}

input HiringOrganisationInput {
  applicationEmail: String!
}

type Hubspot {
  hubspotSubscribeFormId: String!
  title: String!
  description: String!
}

input HubspotEchoInput {
  echo: String
}

type HubspotEchoResponse {
  echo: String
}

input HubspotUpdateInput {
  hubspotSubscribeFormId: String!
  title: String!
  description: String!
}

input IdentifyInput {
  traitProperties: String
}

input IdentityEchoInput {
  echo: String
}

type IdentityEchoResponse {
  echo: String
}

enum ImpersonatePlatform {
  LEARN
  TEAMS
}

input IndexingEchoInput {
  echo: String
}

type IndexingEchoResponse {
  echo: String
}

type InProgressUserCourse {
  id: ID!
  courseOverview: CourseOverview
  upcomingComponents(limit: Int): [Component]
}

type InstructorCourseDashboard {
  periscopeSignedUrl: String
}

type InstructorDashboard {
  periscopeSignedUrl: String
}

type Invitation {
  id: ID!
  organisationId: String
  organisation: Organisation
  email: String
  createdAt: ISODate
  sentAt: ISODate
  updatedAt: ISODate
  acceptedAt: ISODate
  validUntil: ISODate
  status: InvitationStatus
  inviteAsAdmin: Boolean
  userId: String
}

input InvitationEmailTemplateInput {
  hasLogo: Boolean
  inviteRole: InvitationRoles
  email: String
}

enum InvitationPostActionType {
  ASSIGN_LEARNING_PATH
  ASSIGN_STUDY_GROUP
  ASSIGN_REPORTING_GROUP
  ASSIGN_TEAM
}

enum InvitationRoles {
  ADMIN
  STUDENT
  TEAM_COORDINATOR
}

enum InvitationStatus {
  JOINED
  PENDING
  EXPIRED
}

type InviterOrganisation {
  id: ID!
  name: String!
  termsConditionDownloadUrl: String
}

"""
Consumes compatible dates and converts to and from ISOString Date custom scalar type
"""
scalar ISODate

input Job {
  title: String!
  location: Location!
  salaryRange: SalaryRange!
  hideSalary: Boolean!
  summary: String
  description: String
  jobStatus: JobStatusEnum!
}

input JobLatLng {
  lat: Float!
  lng: Float!
}

type JobLatLngResponse {
  lat: Float!
  lng: Float!
}

type JobList {
  jobs: [JobResponse]
  pagination: JobListPagination
}

type JobListPagination {
  pageSize: Int
  total: Int
  page: Int
}

input JobQuery {
  query: String
}

type JobResponse {
  id: String!
  organisationId: String!
  organisationName: String!
  title: String!
  summary: String
  description: String
  location: LocationResponse
  salaryRange: SalaryRangeResponse
  createdAt: ISODate
  updatedAt: ISODate
  application: Application
  jobStatus: JobStatusEnum
}

enum JobStatusEnum {
  PUBLISHED
  WITHDRAWN
  DELETED
}

input JobUpdate {
  id: String!
  title: String!
  location: Location!
  salaryRange: SalaryRange!
  hideSalary: Boolean!
  summary: String
  description: String
  jobStatus: JobStatusEnum!
}

input JoinByJoinCodeInput {
  organisationId: String!
  joinCode: String!
}

type JoinByJoinCodeResponse {
  userIdentity: UserIdentity
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LabContent implements ComponentContent {
  type: String!
  quickLabsId: String
  labImage: String
  description: String
}

type LabCourseComponentContent implements CourseComponentContent {
  id: ID!
  type: String!
  description: String
  quickLabsId: String
  labImage: String
}

enum Labs_Difficulty {
  Apprentice
  Practitioner
  Professional
}

type Labs_Lab {
  id: String!
  name: String!
  description: String
  published: Boolean!
  createdAt: ISODate
  updatedAt: ISODate
  publishedAt: ISODate
  refreshedAt: ISODate
  discardedAt: ISODate
  timeLimit: String
  timeLimitValue: Int
  difficulty: Labs_Difficulty
  type: String
  guide: String
  disabled: Boolean!
  limDisabled: Boolean
  limInfo: Labs_LIMInfo
  instructions: String
  averageCompletionTime: String
  averageCompletionTimeRaw: Int
  diagram: Labs_LabDiagram
  image: Labs_LabImage
  remoteDetails: Labs_LabRemoteDetails
  categories: [Labs_LabCategory]
  tags: [Labs_LabTag]
  videos: [Labs_LabVideo]
  tasks: [Labs_LabTask]
  userLabHistory: [Labs_LabHistoryItem]
}

type Labs_LabCategory {
  id: ID!
  name: String
  createdAt: ISODate
}

type Labs_LabDiagram {
  fileName: String
  fileSize: Int
  contentType: String
  updatedAt: ISODate
  url: String
}

enum Labs_LabEvent {
  STARTED
  COMPLETED
  CANCELLED
  TIMEOUT
}

type Labs_LabHistoryItem {
  id: ID!
  createdAt: ISODate
  eventName: Labs_LabEvent
  labId: String
  userId: String
  courseId: String
}

type Labs_LabImage {
  fileName: String
  fileSize: Int
  contentType: String
  updatedAt: ISODate
}

type Labs_LabInstaceServiceCredential {
  id: ID
  username: String
  password: String
  type: String
  url: String
  outputs: [Labs_LabInstanceServiceCredentialOutput]
}

type Labs_LabInstance {
  id: ID!
  name: String!
  imageUrl: String!
  status: Labs_LabInstanceStatus
  createdAt: ISODate
  updatedAt: ISODate
  expiresAt: ISODate
  estimateBuildFinishAt: ISODate
  remoteDetails: Labs_LabInstanceRemoteDetails
  lab: Labs_Lab
}

type Labs_LabInstanceRemoteCredential {
  id: ID
  serviceName: String
  serviceType: String
  credentials: [Labs_LabInstaceServiceCredential]
}

type Labs_LabInstanceRemoteDetails {
  id: ID
  api: String
  status: Labs_LabInstanceStatus
  abused: Boolean
  maxLength: Int
  averageBuildTime: Float
  credentials: [Labs_LabInstanceRemoteCredential]
}

type Labs_LabInstanceServiceCredentialOutput {
  description: String
  outputKey: String
  outputValue: String
  webSshUrl: String
}

enum Labs_LabInstanceStatus {
  READY
  SHUTDOWN
  STARTING
}

input Labs_LabOperationOptions {
  courseId: String
}

type Labs_LabRemoteDetails {
  averageStartSeconds: Float
  clientType: String
  instant: Boolean
  maxRunMinutes: Int
  pooled: Boolean
}

type Labs_LabTag {
  id: ID!
  name: String!
}

type Labs_LabTask {
  id: ID!
  name: String!
  explanation: String
  disabled: Boolean
  createdAt: ISODate
}

type Labs_LabVideo {
  id: ID!
  name: String!
  description: String
  fileName: String
  createdAt: ISODate
  updatedAt: ISODate
  url: String
  qualities: [Labs_LabVideoQuality]
  contentId: String
}

type Labs_LabVideoQuality {
  quality: String!
  url: String
}

type Labs_LIMInfo {
  issues: [Labs_LIMIssue]
  serviceOutages: [Labs_LIMServiceOutage]
}

type Labs_LIMIssue {
  message: String
  notes: String
}

type Labs_LIMServiceOutage {
  message: String
  labsAffected: Int
  type: Labs_LIMServiceOutageType
}

type Labs_LIMServiceOutageType {
  name: String
}

type Labs_MyLab {
  id: ID!
  instance: Labs_LabInstance
}

input Labs_TrackEventInput {
  labId: String!
  userId: String!
  eventName: Labs_LabEvent
}

type Labs_TrackEventResponse {
  success: Boolean!
}

input LabsEchoInput {
  echo: String
}

type LabsEchoResponse {
  echo: String
}

type LabsOptions {
  topicOptions: [Option!]
  serviceOptions: [Option!]
  technologyOptions: [Option!]
  vendorOptions: [Option!]
  difficultyOptions: [Option!]
  visibilityOptions: [Option!]
}

type lastAccessedCourse {
  userId: String!
  courseId: String!
  componentId: String!
  courseUrl: String!
}

type LayoutConfig_BrowsePage {
  id: String
  sideMenu: LayoutConfig_SideMenu
  contentLayout: LayoutConfig_ContentLayout
}

type LayoutConfig_ContentLayout {
  items: [LayoutConfig_ContentLayoutItem!]
}

type LayoutConfig_ContentLayoutComponent {
  name: String
  url: String
  type: LayoutConfig_ContentLayoutType
  value: String
  limit: Int
  paginationEnabled: Boolean
  isCompact: Boolean
  recencyType: LayoutConfig_RecencyType
}

type LayoutConfig_ContentLayoutItem {
  id: String
  label: String
  description: String
  imageUrl: String
  visibility: LayoutConfig_ItemVisibility
  component: LayoutConfig_ContentLayoutComponent
}

enum LayoutConfig_ContentLayoutType {
  ALGOLIA
  CUSTOM
}

enum LayoutConfig_ItemVisibility {
  VISIBLE
  HIDDEN
}

enum LayoutConfig_RecencyType {
  NEW
  UPDATED
}

type LayoutConfig_SideMenu {
  items: [LayoutConfig_SideMenuItem!]
}

type LayoutConfig_SideMenuItem {
  id: String
  attribute: String
  label: String
  description: String
  visibility: LayoutConfig_ItemVisibility
}

type LearningPath {
  name: String!
  id: String!
  description: String
  shortDescription: String
  bannerUrl: String
  started: Boolean!
  tileUrl: String
  b2bOnly: Boolean!
  awards: [Award]!
  sections: [LearningPathSection]
  nextComponent: LearningPathComponent
}

type LearningPathComponent {
  type: LearningPathComponentType!
  id: String!
  title: String!
  url: String!
  duration: Float
  numberOfLessons: Int
  completed: Boolean
  completedPercent: Float
  supplementary: [LearningPathComponent]
}

type LearningPathComponents {
  primary: [LearningPathComponent]
}

enum LearningPathComponentType {
  COURSE
  WEB_SERIES_EPISODE
}

input LearningPathEchoInput {
  echo: String
}

type LearningPathEchoResponse {
  echo: String
}

input LearningPathPagination {
  pageNumber: Int!
  pageSize: Int!
}

type LearningPathSection {
  name: String!
  id: String!
  description: String
  shortDescription: String
  components: LearningPathComponents
  duration: Float
  numberOfLessons: Int
  completed: Boolean
  completedPercent: Float
}

type LearningPlan {
  subDate: Float
}

type LegacyTokenResult {
  firebaseAccessToken: String!
}

type LiveQuestion {
  questionId: String
  question: QuestionData
}

input Location {
  location: String
  latlng: JobLatLng
  remote: String!
}

type LocationResponse {
  location: String
  latlng: JobLatLngResponse
  remote: String!
}

type LookupApiSettingsResponse {
  consumerId: String!
  organisationId: String!
  disabled: Boolean
}

type MarketplaceEvent {
  id: String
  customerIdentifier: String
  timestamp: String
  productCode: String
  productTitle: String
  dimension: String
  expirationDate: String
  entitlementValue: Int
  acgPackageId: String
  seats: Int
}

enum MarketplaceOnboardingStatus {
  INVALID_TOKEN
  CREATION_PENDING
  CREATION_COMPLETED
}

"""Consumes String/Boolean and converts to Boolean"""
scalar MaybeBoolean

"""Plan billing cycle - singular of period"""
enum Membership_BillingCycle {
  monthly
  annual
}

type Membership_BillingDetails {
  name: String!
  email: String!
  company: String
  vat: String
  address: String
  suburb: String
  state: String
  zip: String
  countryCode: String!
}

input Membership_BillingDetailsInput {
  name: String!
  email: String!
  company: String
  vat: String
  address: String
  suburb: String
  state: String
  zip: String
  countryCode: String!
}

"""A list of competitors"""
input membership_CancellationCompetitorType {
  cbtnuggets: Boolean
  cloud_academy: Boolean
  linux_academy: Boolean
  pluralsight: Boolean
  qwiklabs: Boolean
  udemy: Boolean
  other_competitor: Boolean
}

"""A list of cancellation reasons"""
input membership_CancellationReasonType {
  joining_organisation: String
  completed_courses: Boolean
  completed_certifications: Boolean
  price_sensitive: Boolean
  chose_competitor: Boolean
  quality_content: Boolean
  quality_ux: Boolean
  quality_support: Boolean
  no_time_join_later: Boolean
  other_reason: String
}

type Membership_Card {
  id: ID!
  last4: String!
  brand: Membership_CardBrand!
  expiryYear: Int!
  expiryMonth: Int!
  status: Membership_PaymentStatus!
  gateway: String!
}

enum Membership_CardBrand {
  visa
  mastercard
  american_express
  discover
  jcb
  diners_club
  other
}

enum Membership_CheckoutPages {
  Plans
  Payment
}

type Membership_CountryPlans {
  monthly: Membership_Plan!
  annual: Membership_Plan!
  team: Membership_Plan!
}

type Membership_CountryRules {
  companyNumberLabel: String!
  companyNumberVisible: Boolean!
  companyNumberRequired: Boolean!
  billingAddressVisible: Boolean!
  billingAddressRequired: Boolean!
  postalCodeLabel: String!
  currencyCode: String!
  currencyLocale: String!
}

input Membership_createPaymentIntent_Input {
  providerPlanId: ID!
  providerCode: Membership_ProviderCode = chargebee_uk
  planType: Membership_PlanType = b2c
  countryCode: String!
  isUpdatePaymentMethod: Boolean!
  vatNumber: String

  """Seat count for B2B"""
  seats: Int
  amountDueFromUpgrade: Int
}

type Membership_createPaymentIntent_Response {
  paymentIntent: Membership_paymentIntent!
}

input Membership_createPaypalBillingAgreement_Input {
  token: String!
}

type Membership_createPaypalBillingAgreementAndExpectedError_Response {
  billingDetails: Membership_paypalBillingDetails
  error: Membership_ExpectedError
}

input Membership_createSubscription_Input {
  providerPlanId: ID!
  planType: Membership_PlanType = b2c
  providerCode: Membership_ProviderCode = chargebee_uk
  paymentMethod: Membership_PaymentMethod_Input
  billingDetails: Membership_BillingDetailsInput
  skipTrial: Boolean = false
}

"""Expected error codes to be handled in front-end"""
enum Membership_ErrorCode {
  ACTIVE_SUBSCRIPTION_EXISTS
  PLAN_UPDATE_ALREADY_SCHEDULED
  NO_SCHEDULED_PLAN_UPDATE
  PLAN_UPDATE_SAME
  SUBSCRIPTION_SCHEDULED_FOR_CANCELLATION
  FORCED_ERROR_FOR_NEW_SUBSCRIPTION
  PROVIDER_PAYMENT_ERROR
  PROVIDER_INVALID_REQUEST_ERRORS
  PROVIDER_OPERATION_FAILURE
  PROVIDER_OTHER_API_ERRORS
  UPDATE_IDENTITY_MEMBERSHIP_FAILED
  PROVIDER_PAYMENT_INTENT_INVALID
  ABUSE_PREVENTION_CRITERIA
}

type Membership_Estimate {
  changeType: Membership_PlanChangeType!
  total: String!
  subTotal: String!
  creditsTotal: String!
  credits: [Membership_EstimateCredits!]
  amountDue: String!
  isTaxed: Boolean!
  taxInclusive: String!
  taxExemptReason: String
  taxes: [Membership_EstimateTax!]
  taxMessage: String
  currencyCode: String!
  currencySymbol: String!
  nextBillingAt: ISODate!
  trialEnd: ISODate
}

type Membership_EstimateAndExpectedError_Response {
  estimate: Membership_Estimate
  error: Membership_ExpectedError
}

"""Credits applied to estimates transaction"""
type Membership_EstimateCredits {
  type: String!
  description: String!
  dateFrom: ISODate!
  dateTo: ISODate!
  taxes: [Membership_EstimateTax!]
  total: String!
}

type Membership_EstimateTax {
  name: String!
  description: String!
  amount: String!
}

type Membership_ExpectedError {
  code: Membership_ErrorCode!
  message: String!
  title: String
  json: String
}

input Membership_handleJoiningOrganisation_Input {
  organisation: String
}

type Membership_History {
  id: ID!
  userId: ID!
  triggeredByUserId: String!
  code: String!
  message: String!
  createdAt: ISODate!
}

input Membership_initPaypal_Input {
  returnUrl: String!
  cancelUrl: String!
  providerPlanId: String!
  providerCode: Membership_ProviderCode! = chargebee_uk
  planType: Membership_PlanType! = b2c
  countryCode: String
  vatNumber: String
}

type Membership_initPaypal_Response {
  token: String
}

type Membership_Invoice {
  id: ID!
  currencyCode: String!
  currencySymbol: String!
  date: ISODate!
  total: String!
  status: String!
  termStart: ISODate!
  termEnd: ISODate!
  description: String!
}

type Membership_InvoicePdf {
  downloadUrl: String!
  validTill: ISODate!
}

type Membership_invoicePdf_Response {
  pdf: Membership_InvoicePdf
}

type Membership_invoices_Response {
  invoices: [Membership_Invoice!]
}

type Membership_Migration {
  id: ID!
  userId: ID!
  createdAt: ISODate!
}

input Membership_migration_Input {
  userId: ID!
}

type Membership_migration_Response {
  migration: Membership_Migration
}

type Membership_Package {
  id: String!
  name: String!
  details: String!
  features: [String!]!
  plans: [Membership_Plan!]
}

type Membership_Packages {
  free: Membership_Package
  personalBasic: Membership_Package
  personalPlus: Membership_Package
  businessBasic: Membership_Package
  businessPlus: Membership_Package
}

"""Package tier grouping"""
enum Membership_PackageType {
  free
  personalBasic
  personalPlus
  businessBasic
  businessPlus
}

type Membership_paymentIntent {
  id: String!
  status: String!
  currencyCode: String!
  amount: String!
  gatewayAccountId: String!
  expiresAt: String!
  createdAt: String!
  modifiedAt: String!
  gateway: String!
}

input Membership_PaymentMethod_Input {
  type: Membership_PaymentMethodType!

  """PayPal Express checkout token"""
  token: String

  """Payment Intent ID for Card 3DS payments"""
  paymentIntentId: String
}

type Membership_PaymentMethods {
  card: Membership_Card
  paypal: Membership_Paypal
}

"""Types of payment methods available"""
enum Membership_PaymentMethodType {
  card
  paypal
}

enum Membership_PaymentPayPalStatus {
  verified
  unverified
}

enum Membership_PaymentStatus {
  valid
  expiring
  expired
  invalid
  pending_verification
}

type Membership_Paypal {
  id: ID!
  baId: String!
  email: String!
  firstName: String
  lastName: String
  status: Membership_PaymentStatus!
  payerId: String
  payerStatus: Membership_PaymentPayPalStatus
}

type Membership_paypalBillingDetails {
  firstName: String
  lastName: String
  email: String
  payerStatus: String
  payerId: String
  currency: String
  countryCode: String
  state: String
  zip: String
}

type Membership_Plan {
  id: ID!
  providerPlanId: ID!
  name: String!
  type: Membership_PlanType! @deprecated(reason: "Use planType instead!")
  planType: Membership_PlanType!
  isLegacy: Boolean!
  providerCode: Membership_ProviderCode!
  currencyCode: String!
  currencySymbol: String!
  billingCycle: String!
  group: String!
  period: String!
  periodUnit: String!
  price: String!
  monthlyPrice: String!
  annualPrice: String!
  unitPrice: Int!
  unitDefault: Int!
  unitMin: Int
  unitMax: Int
  trialDuration: Int
  trialUnit: String
  trialEnd: ISODate
  extras: [String!]!
  packageName: String!
  updatedAt: ISODate!
  canOfferTrial: Boolean!
  changeType: Membership_PlanChangeType
}

"""Business rules flag for plan change or checkout"""
enum Membership_PlanChangeType {
  NEW
  IMMEDIATE_UPGRADE
  SCHEDULED_UPGRADE
  SCHEDULED_DOWNGRADE
  TRIAL_UPGRADE
  TRIAL_DOWNGRADE
  NO_CHANGE
}

type Membership_PlanIdFilter {
  filter: String!
  plans: [String!]!
  description: String!
  default: Boolean!
  status: Membership_PlanIdFilterStatus!
}

enum Membership_PlanIdFilterStatus {
  grandfathered
  available
  unavailable
}

"""Plan type for API request plan ID prefix"""
enum Membership_PlanType {
  b2c
  b2b
  free
}

"""
Code for Chargebee entity, e.g. "chargebee_uk"
"""
enum Membership_ProviderCode {
  chargebee_uk
  chargebee_us
}

input Membership_submitCancellationReason_Input {
  feedback: String
  reasons: membership_CancellationReasonType
  competitors: membership_CancellationCompetitorType
}

type Membership_Subscription {
  id: ID!
  userId: ID!
  providerPlanId: ID!
  providerCode: Membership_ProviderCode!
  planType: Membership_PlanType!
  providerSubscriptionId: ID!
  providerSubscriptionUrl: String!
  providerCustomerId: ID!
  status: String!
  nextBillingAt: ISODate
  activatedAt: ISODate
  currentTermStart: ISODate
  currentTermEnd: ISODate
  trialStart: ISODate
  trialEnd: ISODate
  createdAt: ISODate!
  updatedAt: ISODate!
  cancelledAt: ISODate
  cancelReason: String
  billingDetails: Membership_BillingDetails
  paymentMethods: Membership_PaymentMethods
  plan: Membership_Plan
  scheduledPlan: Membership_Plan
}

type Membership_SubscriptionAndExpectedError_Response {
  subscription: Membership_Subscription
  error: Membership_ExpectedError
}

type Membership_SubscriptionsAndExpectedError_Response {
  subscriptions: [Membership_Subscription!]
  errors: [Membership_ExpectedError!]
}

type Membership_TestingToken {
  token: String!
}

"""Token type for testing valid card or error states"""
enum Membership_TestingTokenType {
  valid
  valid_amex
  valid_discover
  valid_fr
  valid_gb
  dispute
  declined
  declined_insufficient_funds
  declined_fraudulent
  declined_cvc
  declined_expired
  declined_on_charge
  require_3ds
  require_3ds2
}

input Membership_trackCheckoutEntry_Input {
  page: Membership_CheckoutPages!
}

input Membership_updateBillingDetails_Input {
  billingDetails: Membership_BillingDetailsInput!
}

input Membership_updatePaymentMethod_Input {
  paymentMethod: Membership_PaymentMethod_Input!
}

input Membership_updateSubscription_Input {
  providerPlanId: ID!
  planType: Membership_PlanType = b2c
  providerCode: Membership_ProviderCode = chargebee_uk
  billingDetails: Membership_BillingDetailsInput
  paymentMethod: Membership_PaymentMethod_Input
  skipTrial: Boolean = false
}

input Membership_updateSubscriptionPlan_Input {
  planId: ID!
}

type Membership_User {
  hasSubscription: Boolean!
  isCurrent: Boolean!
  isOverdue: Boolean!
}

type Membership_UserExpectedPackage {
  packageId: String
}

"""Plan Id filter record for a user"""
type Membership_UserPlanIdFilter {
  id: ID!
  userId: ID!
  filter: String!
  createdAt: String
  expiresOn: String
  ttl: String
}

type Membership_UserPlanOverride {
  id: ID!
  userId: ID!
  type: String!
  value: String!
  createdAt: String
  expiresOn: String
}

"""Types of user plan overrides"""
enum Membership_UserPlanOverrideType {
  trialEnd
}

"""Known webhook event types for processing"""
enum Membership_WebhookEventType {
  subscription_activated
  subscription_renewed
  subscription_cancelled
  payment_succeeded
  payment_failed
  payment_refunded
  subscription_changed
}

type Metadata {
  createdDate: ISODate
  notifyUpdatedDate: ISODate
  updatedDate: ISODate
}

type MetadataSEO {
  title: String
  description: String
}

input MetadataSEOInput {
  title: String
  description: String
}

type MiniSeries {
  seriesId: String!
  visibility: String!
  title: String!
  seriesUrl: String!
  shortDescription: String!
  description: String
  thumbnailUrl: String
  duration: Float
  labIds: [String!]
  createdDate: Float
  updatedDate: Float
  publishedDate: Float
  decommissionedDate: Float
  labs: [HandsonLab!]
}

input MiniSeriesInput {
  seriesId: String
  visibility: String
  title: String
  seriesUrl: String
  shortDescription: String
  description: String
  thumbnailUrl: String
  duration: Float
  labIds: [String!]
  createdDate: Float
  updatedDate: Float
  publishedDate: Float
  decommissionedDate: Float
}

input MobileIdentification {
  version: String!
  platform: String!
}

type MobileRatings {
  videoSessionRating: VideoSessionRating!
}

input ModifyTeamsInput {
  teamsToCreate: [CreateTeamInput]
  teamsToUpdate: [UpdateTeamInput]
  teamsToRemove: [DeleteTeamInput]
}

type ModifyTeamsResponse {
  taskId: String!
  teams: [TeamResponse]
}

input MoveUsersToTeamsInput {
  addUsersToTeams: [UsersToTeamsInput]
  removeUsersFromTeams: [UsersToTeamsInput]
}

type MoveUsersToTeamsResponse {
  teamUserConnections: [TeamUserConnection]
  taskId: String!
}

type Mutation {
  """BFF"""
  echo(input: EchoInput!): EchoResponse

  """restricted to: []"""
  createProduct(product: CreateProductInput!): Product

  """restricted to: []"""
  updateProduct(id: String!, product: UpdateProductInput!): Product

  """restricted to: []"""
  updateSetProductWeight(productWeightMap: [ProductWeightInput!]!): [String!]

  """restricted to: []"""
  deleteQuestion(threadId: String!): String

  """restricted to: []"""
  deleteAnswer(answerId: String!): String

  """restricted to: [VIEWER]"""
  grantCourseAccess(userId: String!, courseIds: [String!]!): CourseAccessResult

  """restricted to: [VIEWER]"""
  removeCourseAccess(userId: String!, courseIds: [String!]!): CourseAccessResult

  """restricted to: [VIEWER]"""
  openCourseComponent(courseId: String!, componentId: String!, timestamp: String!): ComponentCompleteResult

  """restricted to: [VIEWER]"""
  markCourseComponentComplete(courseId: String!, courseUrl: String!, componentId: String!, timestamp: String!, quizScore: Int): ComponentCompleteResult

  """restricted to: [VIEWER]"""
  markCourseComponentIncomplete(courseId: String!, courseUrl: String!, componentId: String!, timestamp: String!): ComponentCompleteResult

  """restricted to: []"""
  registerUser(handle: String!, user: UserInput!): UserRegisterResult!

  """restricted to: []"""
  updateUserHandle(handle: String!): UserHandleUpdateResult!

  """restricted to: []"""
  subscribeUser(subscription: SubscriptionInput!): SubscriptionResult!

  """restricted to: []"""
  unsubscribeUser: UnsubscribeResult!

  """restricted to: []"""
  updateUnsubscribeReason(subscriptionId: String!, reasonsForLeaving: [String!]!, competitors: [String!], extraComments: String, otherReason: String): UnsubscribeResult!

  """restricted to: []"""
  updateSubscriptionPaymentMethod(nonce: String!): SubscriptionPaymentMethod!

  """restricted to: []"""
  revokeUserMembership(userId: String!, subscriptionId: String!): String!

  """restricted to: []"""
  createUserPromotion(userId: String!, promotionId: String!, unit: String!, duration: Int!): Boolean

  """restricted to: []"""
  deleteUserPromotion(userId: String!): Boolean
  analyticsEcho(input: AnalyticsEchoInput!): AnalyticsEchoResponse
  assessmentsContentEcho(input: Echo): String
  saveAssessment(input: AssessmentsContentAssessmentInput!): AssessmentsContentAssessment
  saveQuestionPool(input: AssessmentsContentQuestionPoolInput!): AssessmentsContentQuestionPool
  saveQuestion(input: AssessmentsContentQuestionInput!): AssessmentsContentQuestionPool
  removeQuestion(input: AssessmentsContentRemoveQuestionInput!): AssessmentsContentQuestionPool
  deleteQuestionPool(input: String): AssessmentsContentDeleteQuestionPoolResponse
  assessmentsEcho(input: Echo): String

  """restricted to: [VIEWER]"""
  createAttempt(input: AssessmentsCreateAttemptInput!): AssessmentsAttempt

  """restricted to: [VIEWER]"""
  submitChoices(input: AssessmentsSubmitChoicesInput!): SubmitChoicesResponse

  """restricted to: [VIEWER]"""
  gradeAttempt(input: AssessmentsGradeAttemptInput!): AssessmentsGradedAttempt

  """requires feature access"""
  flagQuestion(input: AssessmentsQuestionFlagInput!): AssessmentsAttemptQuestion

  """requires feature access"""
  updateQuestionIndex(input: AssessmentsUpdateQuestionIndexInput!): AssessmentsAttempt
  createBillingSubscription(input: CreateBillingSubscriptionInput!): CreateBillingSubscriptionResponse!

  """restricted to: [ORGANISATION_ADMIN]"""
  addBillingSubscriptionSeats(input: AddBillingSubscriptionSeatsInput!): AddBillingSubscriptionSeatsResponse!

  """restricted to: [ORGANISATION_ADMIN]"""
  updateBillingSubscriptionBilling(input: UpdateBillingSubscriptionBillingInput!): UpdateBillingSubscriptionBillingResponse!

  """restricted to: [ORGANISATION_ADMIN]"""
  updateBillingSubscriptionCard(input: UpdateBillingSubscriptionCardInput!): UpdateBillingSubscriptionCardResponse!

  """restricted to: [ORGANISATION_ADMIN]"""
  syncBillingSubscription: SyncBillingSubscriptionResponse!

  """restricted to: [ORGANISATION_ADMIN]"""
  updateBillingSubscriptionAutorenew(input: UpdateBillingSubscriptionAutorenewInput!): UpdateBillingSubscriptionAutorenewResponse!

  """restricted to: [ADMIN,SERVER]"""
  ACG_syncBillingSubscription(input: ACG_syncBillingSubscriptionInput!): ACG_syncBillingSubscriptionResponse!

  """restricted to: [ADMIN,SERVER]"""
  ACGDEV_recreateBillingSubscription(input: ACGDEV_recreateBillingSubscriptionInput!): ACGDEV_recreateBillingSubscriptionResponse!
  careersEcho(input: CareersEchoInput!): CareersEchoResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  createJob(job: Job!): OrganisationJobResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  updateJob(job: JobUpdate!): OrganisationJobResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  updateJobStatus(jobId: String!, status: JobStatusEnum!): OrganisationJobResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  createHiringOrganisation(hiringOrganisation: HiringOrganisationInput!): HiringOrganisation!
  createApplication(jobId: String!): Application
  submitJobApplication(input: SubmitJobApplicationInput): SubmitJobApplicationResponse
  certificationsEcho(input: certificationsEchoInput!): certificationsEchoResponse
  addUserCertificate(input: AddUserCertificateInput!): UserCertificate
  updateUserCertificate(input: UpdateUserCertificateInput!): UserCertificate
  deleteUserCertificate(input: DeleteUserCertificateInput!): Boolean
  createUserCertification(userCertification: UserCertificationInput!): UserCertification!
  updateUserCertification(userCertification: UserCertificationUpdate!): UserCertification!
  completeCertificationUpload(userCertification: UserCertificationCompleteUpdate!): UserCertification!

  """restricted to: [ADMIN]"""
  ACG_completeCertificationUpload(userCertification: UserCertificationCompleteUpdate!, userId: String!): UserCertification!
  removeUserCertification(userCertificationId: String!): UserCertification!
  cancelCertificatesUpload(userCertificationId: String!): String
  cloudPlaygroundEcho(input: CloudPlaygroundEchoInput!): CloudPlaygroundEchoResponse

  """restricted to: [VIEWER]"""
  CloudPlayground_acceptTc: CloudPlayground_AccountStatusResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  CloudPlayground_acceptOrganisationTc: CloudPlayground_AccountStatusResponse

  """requires feature access"""
  CloudPlayground_startSandboxInstance(consoleType: ConsoleType!): CloudPlayground_MySandbox!

  """requires feature access"""
  CloudPlayground_stopSandboxInstance(instanceId: String!): CloudPlayground_MySandbox!

  """requires feature access"""
  CloudPlayground_provisionServerInstance(input: CloudPlayground_ProvisionServerInstanceInput): CloudPlayground_ProvisionServerInstanceResponse

  """requires feature access"""
  CloudPlayground_stopServerInstance(input: CloudPlayground_StopServerInstanceInput): CloudPlayground_StopServerInstanceResponse

  """requires feature access"""
  CloudPlayground_startServerInstance(input: CloudPlayground_StartServerInstanceInput): CloudPlayground_StartServerInstanceResponse

  """requires feature access"""
  CloudPlayground_terminateServerInstance(input: CloudPlayground_TerminateServerInstanceInput): CloudPlayground_TerminateServerInstanceResponse

  """requires feature access"""
  CloudPlayground_executeServerInstanceCommand(input: CloudPlayground_ExecuteServerInstanceCommandInput): CloudPlayground_ExecuteServerInstanceCommandResponse

  """requires feature access"""
  CloudPlayground_addServerInstanceVolume(input: CloudPlayground_AddServerInstanceVolumeInput): CloudPlayground_AddServerInstanceVolumeResponse

  """requires feature access"""
  CloudPlayground_removeServerInstanceVolume(input: CloudPlayground_RemoveServerInstanceVolumeInput): CloudPlayground_RemoveServerInstanceVolumeResponse

  """restricted to: [ADMIN]"""
  CloudPlayground_updateSplit(input: CloudPlayground_UpdateSplitInput!): CloudPlayground_UpdateSplitResponse
  cloudProfileEcho(input: CloudProfileEchoInput!): CloudProfileEchoResponse
  updateCloudProfile(cloudProfile: CloudProfile!): CloudProfileResponse
  updateCloudProfilePicture(base64EncodedPicture: String!): CloudProfileResponse
  removeCloudProfileEmploymentHistoryRole(employmentHistory: CloudProfileEmploymentHistoryKeysInput): CloudProfileEmploymentHistoryKeys
  updateProfile(input: ProfileInput!): Profile
  uploadProfilePicture(input: UploadProfilePictureInput!): Profile
  removeEmploymentHistory(input: RemoveEmploymentHistoryInput!): EmploymentHistory!
  contentEcho(input: ContentEchoInput!): ContentEchoResponse

  """restricted to: [VIEWER]"""
  transcodeContent(contentId: String!, isProtectedContent: Boolean!, transcoderConfiguration: TranscoderConfiguration!): AudioVisualContent
  contentSearchEcho(input: ContentSearchEchoInput!): ContentSearchEchoResponse
  contentTaggingEcho(input: ContentTaggingEchoInput!): ContentTaggingEchoResponse

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_createContentTags(tags: [ContentTagCreateInput!]): CreateContentTagsResult!

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_updateContentTags(tags: [ContentTagUpdateInput!]): [ContentTag]!
  courseEcho(input: CourseEchoInput!): CourseEchoResponse

  """restricted to: [VIEWER]"""
  startFreeCourse(courseId: String!): StartFreeCourseResult

  """restricted to: [VIEWER]"""
  startMemberCourse(courseId: String!): Boolean

  """restricted to: [ADMIN]"""
  indexCourses: Boolean

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  setCourseOutline(input: Course_SetCourseOutlineInput!): Course_SetCourseOutlineResponse

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  setCourseComponent(input: Course_SetCourseComponentInput!): Course_SetCourseComponentResponse

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  createCourseShell(input: Course_CreateCourseShellInput!): Course_CreateCourseShellResponse

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  updateCourseShell(input: Course_UpdateCourseShellInput!): Course_UpdateCourseShellResponse

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_putRolesAndGoals(rolesAndGoals: [RecommendationRoleInput!]): [RecommendationRole]

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_putRelatedCourses(relatedCourses: [RelatedCourseInput!]): [RelatedCourse]
  gdprEcho(input: GdprEchoInput!): GdprEchoResponse

  """restricted to: [ADMIN]"""
  createGdprRequest(input: CreateGdprRequestInput!): GdprRequest

  """restricted to: [ADMIN]"""
  updateGdprStatus(input: UpdateGdprStatusInput!): GdprRequest

  """restricted to: [ADMIN]"""
  updateBulkGdprStatus(inputs: [UpdateGdprStatusInput!]!): [GdprRequest]
  groupEcho(input: GroupEchoInput!): GroupEchoResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  createGroup(input: CreateGroupInput): CreateGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  updateGroup(input: UpdateGroupInput): UpdateGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  deleteGroup(input: DeleteGroupInput): DeleteGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  addUserToGroup(input: AddUserToGroupInput): AddUserToGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  addUsersToGroup(input: UsersGroupInput): UsersGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  removeUserFromGroup(input: RemoveUserFromGroupInput): RemoveUserFromGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  removeUsersFromGroup(input: UsersGroupInput): UsersGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  assignGroupAdmin(input: AssignGroupAdminInput): AssignGroupAdminResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  unassignGroupAdmin(input: UnassignGroupAdminInput): UnassignGroupAdminResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_addUserToGroup(organisationId: String!, input: AddUserToGroupInput): AddUserToGroupResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_removeUserFromGroup(organisationId: String!, input: RemoveUserFromGroupInput): RemoveUserFromGroupResponse

  """restricted to: [ADMIN]"""
  ACG_removeUsersFromGroup(organisationId: String!, input: UsersGroupInput): UsersGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  createStudyGroup(input: CreateStudyGroupInput!): CreateStudyGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  updateStudyGroup(input: UpdateStudyGroupInput!): UpdateStudyGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  activateStudyGroup(input: ActivateStudyGroupInput!): ActivateStudyGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  cancelStudyGroup(input: CancelStudyGroupInput!): CancelStudyGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  deleteStudyGroup(input: DeleteStudyGroupInput!): DeleteStudyGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  addUserToStudyGroup(input: AddUserToStudyGroupInput): AddUserToStudyGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  removeUserFromStudyGroup(input: RemoveUserFromStudyGroupInput!): RemoveUserFromStudyGroupResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_removeUserFromStudyGroup(organisationId: String!, input: RemoveUserFromStudyGroupInput!): RemoveUserFromStudyGroupResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  createTeam(input: CreateTeamInput!): CreateTeamResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  updateTeam(input: UpdateTeamInput!): UpdateTeamResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  deleteTeam(input: DeleteTeamInput!): DeleteTeamResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  modifyTeams(input: ModifyTeamsInput!): ModifyTeamsResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  moveUsersToTeams(input: MoveUsersToTeamsInput!): MoveUsersToTeamsResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_moveUsersToTeams(organisationId: String!, input: MoveUsersToTeamsInput!): MoveUsersToTeamsResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_removeUserFromAllTeamsAndGroups(userId: String!, organisationId: String!): RemoveUserFromAllTeamsAndGroupsResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_addUsersToTeamsAndRemoveFromOldTeam(organisationId: String!, input: AddUsersToTeamsAndRemoveFromOldTeamInput!): AddUsersToTeamsAndRemoveFromOldTeamResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_removeUsersFromTeam(organisationId: String!, input: RemoveUsersFromTeamInput!): RemoveUsersFromTeamResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_migrateGroups(organisationId: String!, groupIds: [String]!): Boolean
  handsonEcho(input: HandsonEchoInput!): HandsonEchoResponse

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_putLab(lab: HandsonLabInput!): HandsonLab

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_addTopic(topic: String!): LabsOptions

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_addService(service: String!): LabsOptions

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_addVendor(vendor: String!): LabsOptions

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_addTechnology(technology: String!): LabsOptions

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_putMiniSeries(series: MiniSeriesInput!): MiniSeries

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_putSeriesList(seriesList: SeriesListInput!): SeriesList
  hubspotEcho(input: HubspotEchoInput!): HubspotEchoResponse
  createLearningPlan(plan: String!): LearningPlan
  sendReminders(reminders: [Reminder]!): SendRemindersResponse

  """restricted to: [ADMIN,SERVER]"""
  addUserToStudyPlan(input: AddUserToStudyPlanInput!): AddUserToStudyPlanResponse

  """restricted to: [ADMIN,SERVER]"""
  removeUserFromStudyPlan(input: RemoveUserFromStudyPlanInput!): RemoveUserFromStudyPlanResponse

  """restricted to: [ADMIN,SERVER]"""
  updateMembershipSwagUrl(input: UpdateMembershipSwagUrlInput!): UpdateMembershipSwagUrlResponse
  identityEcho(input: IdentityEchoInput!): IdentityEchoResponse

  """restricted to: [VIEWER]"""
  joinByJoinCode(input: JoinByJoinCodeInput!): JoinByJoinCodeResponse

  """restricted to: [VIEWER]"""
  addUserToOrganisationByInvitation(input: AddUserToOrganisationByInvitationInput!): AddUserToOrganisationByInvitationResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  assignOrganisationRole(input: AssignOrganisationRoleInput!): AssignOrganisationRoleResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_removeFromOrganisation(input: ACG_RemoveFromOrganisationInput): ACG_RemoveFromOrganisationResponse!

  """restricted to: [ADMIN,SERVER]"""
  ACG_addToOrganisation(input: ACG_AddToOrganisationInput): ACG_AddToOrganisationResponse!

  """restricted to: [ADMIN,SERVER]"""
  ACG_assignOrganisationRole(input: AssignOrganisationRoleInput!, organisationId: String!, updatedBy: String): AssignOrganisationRoleResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  addOrganisationAdmin(input: AddOrganisationAdminInput): AddOrganisationAdminResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  removeOrganisationAdmin(input: RemoveOrganisationAdminInput): RemoveOrganisationAdminResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_addOrganisationAdmin(input: ACG_AddOrganisationAdminInput): ACG_AddOrganisationAdminResponse

  """restricted to: [ADMIN]"""
  ACG_removeOrganisationAdmin(input: ACG_RemoveOrganisationAdminInput): ACG_RemoveOrganisationAdminResponse

  """restricted to: [SUPERADMIN]"""
  ACG_grantSiteRole(input: ACG_GrantSiteRoleInput): ACG_GrantSiteRoleResponse

  """restricted to: [SUPERADMIN]"""
  ACG_revokeSiteRole(input: ACG_RevokeSiteRoleInput): ACG_RevokeSiteRoleResponse
  addCareerInformation(input: AddCareerInformationInput): AddCareerInformationResponse!
  updateEmail(input: UpdateEmailInput): UpdateEmailResponse!

  """restricted to: [VIEWER]"""
  updateBasicAccountInformation(input: UpdateBasicAccountInformationInput): UpdateBasicAccountInformationResponse

  """restricted to: [SERVER]"""
  ACG_updateUserCloudProfile(input: ACG_UpdateUserCloudProfileInput): ACG_UpdateUserCloudProfileResponse

  """restricted to: [ADMIN]"""
  ACG_updateEmailForUser(input: ACG_UpdateEmailForUserInput): ACG_UpdateEmailForUserResponse!

  """restricted to: [ADMIN]"""
  generateVerificationTicketForUser(userId: String): GenerateVerificationTicketResponse
  sendEmailVerification: sendEmailVerificationResponse
  unlinkAccount(input: UnlinkAccountInput): UnlinkAccountResponse

  """restricted to: [SERVER]"""
  grantPersonalMembership(input: GrantPersonalMembershipInput): GrantPersonalMembershipResponse

  """restricted to: [SERVER]"""
  extendPersonalMembership(input: ExtendPersonalMembershipInput): ExtendPersonalMembershipResponse

  """restricted to: [SERVER]"""
  revokePersonalMembership(input: RevokePersonalMembershipInput): RevokePersonalMembershipResponse
  indexingEcho(input: IndexingEchoInput!): IndexingEchoResponse

  """restricted to: [ADMIN]"""
  ACGDEV_configureAllOrganisationsIndex: JSON

  """restricted to: [ADMIN]"""
  ACGDEV_configureAllOrganisationUsersIndex: Boolean

  """restricted to: [ADMIN]"""
  ACGDEV_configureAllOrganisationGroupsIndex: Boolean

  """restricted to: [ADMIN]"""
  ACGDEV_configureAllOrganisationInvitationsIndex: Boolean

  """restricted to: [ADMIN]"""
  ACGDEV_configureLearningPathIndex: Boolean
  Labs_echo(input: LabsEchoInput!): LabsEchoResponse

  """restricted to: [SERVER]"""
  ACG_Labs_trackEvent(input: Labs_TrackEventInput!): Labs_TrackEventResponse!

  """requires feature access"""
  Labs_createInstance(labId: String!, options: Labs_LabOperationOptions): Labs_MyLab!

  """restricted to: [VIEWER]"""
  Labs_stopInstance(labId: String!, options: Labs_LabOperationOptions): Labs_MyLab!

  """restricted to: [VIEWER]"""
  Labs_abandonInstance(labId: String!, options: Labs_LabOperationOptions): Labs_MyLab!

  """restricted to: [VIEWER]"""
  Labs_cancelInstance(labId: String!, options: Labs_LabOperationOptions): Labs_MyLab!
  learningPathEcho(input: LearningPathEchoInput!): LearningPathEchoResponse

  """restricted to: [ADMIN]"""
  createLearningPath(id: String!, path: String!): LearningPath

  """restricted to: [VIEWER]"""
  startLearningPath(id: String!): Boolean!

  """restricted to: [SERVER]"""
  ACG_startLearningPath(learningPathId: String!, userId: String!): Boolean!
  Membership_trackCheckoutEntry(input: Membership_trackCheckoutEntry_Input): String!
  Membership_createPaymentIntent(input: Membership_createPaymentIntent_Input!): Membership_createPaymentIntent_Response!
  Membership_initPaypal(input: Membership_initPaypal_Input!): Membership_initPaypal_Response!
  Membership_createPaypalBillingAgreement(input: Membership_createPaypalBillingAgreement_Input!): Membership_createPaypalBillingAgreementAndExpectedError_Response!
  ACG_Membership_addUserPlanIdFilter(input: ACG_Membership_addUserPlanIdFilter_Input!): Membership_UserPlanIdFilter!
  ACG_Membership_removeUserPlanIdFilter(input: ACG_Membership_removeUserPlanIdFilter_Input!): String!
  Membership_createSubscription(input: Membership_createSubscription_Input!): Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_createSubscription(input: ACG_Membership_createSubscription_Input!): Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_syncSubscription(input: ACG_Membership_syncSubscription_Input!): Membership_SubscriptionAndExpectedError_Response!
  Membership_updateSubscription(input: Membership_updateSubscription_Input!): Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_updateSubscription(input: ACG_Membership_updateSubscription_Input!): Membership_SubscriptionAndExpectedError_Response!
  Membership_updateSubscriptionPlan(input: Membership_updateSubscriptionPlan_Input!): Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_updateSubscriptionPlan(input: ACG_Membership_updateSubscriptionPlan_Input!): Membership_SubscriptionAndExpectedError_Response!
  Membership_endTrial: Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_endTrial(input: ACG_Membership_endTrial_Input!): Membership_SubscriptionAndExpectedError_Response!
  Membership_scheduleCancellation: Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_scheduleCancellation(input: ACG_Membership_scheduleCancellation_Input!): Membership_SubscriptionAndExpectedError_Response!
  Membership_handleJoiningOrganisation(input: Membership_handleJoiningOrganisation_Input): Membership_SubscriptionAndExpectedError_Response!
  Membership_submitCancellationReason(input: Membership_submitCancellationReason_Input): String!
  ACG_Membership_submitCancellationReason(input: ACG_Membership_submitCancellationReason_Input!): String!
  Membership_removeScheduledCancellation: Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_removeScheduledCancellation(input: ACG_Membership_removeScheduledCancellation_Input!): Membership_SubscriptionAndExpectedError_Response!
  Membership_removeScheduledChanges: Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_removeScheduledChanges(input: ACG_Membership_removeScheduledChanges_Input!): Membership_SubscriptionAndExpectedError_Response!
  Membership_updatePaymentMethod(input: Membership_updatePaymentMethod_Input!): Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_updatePaymentMethod(input: ACG_Membership_updatePaymentMethod_Input!): Membership_SubscriptionAndExpectedError_Response!
  Membership_removePaymentMethod: Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_removePaymentMethod(input: ACG_Membership_removePaymentMethod_Input!): Membership_SubscriptionAndExpectedError_Response!
  Membership_updateBillingDetails(input: Membership_updateBillingDetails_Input!): Membership_SubscriptionAndExpectedError_Response!
  ACG_Membership_updateBillingDetails(input: ACG_Membership_updateBillingDetails_Input!): Membership_SubscriptionAndExpectedError_Response!
  ACGDEV_Membership_syncSubscriptions(userIds: [String!]): Membership_SubscriptionsAndExpectedError_Response!
  ACGDEV_Membership_createSubscription(input: ACGDEV_Membership_createSubscription_Input!): Membership_SubscriptionAndExpectedError_Response!
  ACGDEV_Membership_cancelSubscription(input: ACGDEV_Membership_cancelSubscription_Input!): Membership_SubscriptionAndExpectedError_Response!
  ACGDEV_Membership_removeSubscription(input: ACGDEV_Membership_removeSubscription_Input!): Membership_SubscriptionAndExpectedError_Response!
  ACGDEV_Membership_webhook(input: ACGDEV_Membership_webhook_Input!): String!
  ACG_Membership_addUserPlanOverride(input: ACG_Membership_addUserPlanOverride_Input!): Membership_UserPlanOverride!
  ACG_Membership_removeUserPlanOverride(input: ACG_Membership_removeUserPlanOverride_Input!): String!
  ACGDEV_Membership_setMigratedSubscription(input: Membership_migration_Input!): Membership_migration_Response!
  ACGDEV_Membership_unsetMigratedSubscription(input: Membership_migration_Input!): Membership_migration_Response!
  ACGDEV_Membership_importSubscriptions(input: ACGDEV_Membership_importSubscriptions_Input!): String!
  organisationInvitationEcho(input: OrganisationInvitationEchoInput!): OrganisationInvitationEchoResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  createInvitations(input: CreateInvitationInput!, childOrganisationId: String): CreateInvitationResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  assignTeamToInvitations(input: AssignTeamToInvitationsInput!): UpdateInvitationsResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  resendOrganisationInvitation(code: String!): OrganisationInvitationResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  revokeOrganisationInvitation(code: String!): OrganisationInvitationResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_acceptInvitation(code: String!): OrganisationInvitationResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_resendOrganisationInvitation(code: String!): OrganisationInvitationResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_revokeOrganisationInvitation(code: String!): OrganisationInvitationResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_createInvitations(organisationId: String!, input: CreateInvitationInput!): CreateInvitationResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_anonymiseInvitations(email: String!): OrganisationInvitationResponse
  organisationLearningPathEcho(input: OrganisationLearningPathEchoInput!): OrganisationLearningPathEchoResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserAssignLearningPath(input: AssignLearningPathInput!): UserLearningPathConnection

  """restricted to: [ORGANISATION_ADMIN]"""
  removeUserFromLearningPath(input: RemoveUserFromLearningPathInput!): UserLearningPathConnection

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationUserAssignLearningPath(organisationId: ID!, input: AssignLearningPathInput!): UserLearningPathConnection
  organisationReportingEcho(input: OrganisationReportingEchoInput!): OrganisationReportingEchoResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  shareLearningPathProgress(input: ShareReportInput!): ShareReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  shareStudyGroupProgress(input: ShareReportInput!): ShareReportResponse
  organisationWarehouseEcho(input: OrganisationWarehouseEchoInput!): OrganisationWarehouseEchoResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  shareOrganisationStudyGroupProgress(input: ShareReportInput!): ShareReportResponse
  organisationsEcho(input: OrganisationsEchoInput!): OrganisationsEchoResponse

  """restricted to: [ADMIN]"""
  ACG_addPoints(input: ACG_AddPointsInput!): ACG_AddPointsResponse

  """restricted to: [ADMIN]"""
  ACG_createSubscriptionOrganisation(input: ACG_CreateSubscriptionOrganisationInput): ACG_CreateSubscriptionOrganisationResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_createSelfServiceOrganisation(input: ACG_CreateSelfServiceOrganisationInput): ACG_CreateSelfServiceOrganisationResponse

  """restricted to: [ADMIN]"""
  createOrganisation(input: CreateOrganisationInput): CreateOrganisationResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  updateOrganisation(input: UpdateOrganisationInput): UpdateOrganisationResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  updateChildOrganisation(childOrganisationId: String!, input: UpdateOrganisationInput): UpdateOrganisationResponse

  """restricted to: [ADMIN]"""
  ACG_updateOrganisation(input: ACG_UpdateOrganisationInput): ACG_UpdateOrganisationResponse

  """restricted to: [ADMIN]"""
  ACG_archiveOrganisation(input: ACG_ArchiveOrganisationInput): ACG_ArchiveOrganisationResponse

  """restricted to: [ADMIN]"""
  ACG_restoreArchivedOrganisation(input: ACG_RestoreArchivedOrganisationInput): ACG_RestoreArchivedOrganisationResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_addDomain(input: ACG_AddDomainInput): ACG_AddDomainResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_removeDomain(input: ACG_RemoveDomainInput): ACG_RemoveDomainResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_addJoinCode(input: ACG_AddJoinCodeInput!): ACG_AddJoinCodeResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_removeJoinCode(input: ACG_RemoveJoinCodeInput!): ACG_RemoveJoinCodeResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_updateOrganisationSubscription(input: ACG_UpdateOrganisationSubscriptionInput): ACG_UpdateOrganisationSubscriptionResponse

  """restricted to: [ADMIN]"""
  ACG_modifyOrganisationAccountDetails(input: ACG_ModifyOrganisationAccountDetailsInput): ACG_ModifyOrganisationAccountDetailsResponse

  """restricted to: [ADMIN]"""
  ACG_extendOrganisationSubscriptionEndDate(input: ACG_extendOrganisationSubscriptionEndDateInput): ACG_extendOrganisationSubscriptionEndDateResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  addJoinCode: AddJoinCodeResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  removeJoinCode(input: RemoveJoinCodeInput!): RemoveJoinCodeResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  uploadCompanyLogo(input: UploadCompanyLogoInput): UploadCompanyLogoResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  removeCompanyLogo: RemoveCompanyLogoResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  updateCustomInvitationMessage(input: UpdateCustomInvitationMessageInput): UpdateCustomInvitationMessageResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  toggleLicenseConsumed(input: ToggleUserLicenseConsumedInput!): ToggleUserLicenseConsumedResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  toggleWidgetVisibility(input: ToggleWidgetVisibilityInput!): ToggleWidgetVisibilityResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  requestBetaFeature(feature: BetaFeature!): OrganisationResponse!

  """restricted to: [ADMIN,SERVER]"""
  ACG_updateSeatsInUse(organisationId: String!, numberOfSeats: Int!): OrganisationResponse!

  """restricted to: [ADMIN,SERVER]"""
  ACG_toggleLicenseConsumed(organisationId: String!, input: ToggleUserLicenseConsumedInput!): ToggleUserLicenseConsumedResponse

  """restricted to: [ADMIN]"""
  ACG_approveBetaFeature(organisationId: String!, feature: BetaFeature!): OrganisationResponse!

  """restricted to: [ADMIN,SERVER]"""
  ACG_updateOrganisationSamlConnectionName(input: ACG_updateOrganisationSamlConnectionNameInput): OrganisationResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_updateOrganisationDisableInvitations(input: ACG_updateOrganisationDisableInvitationsInput): OrganisationResponse

  """restricted to: [ADMIN]"""
  ACGDEV_syncMarketplaceEntitlement(ProductCode: String, CustomerIdentifier: String): JSON

  """restricted to: [ADMIN]"""
  ACGDEV_convertToMarketplaceChargeModel(input: ACGDEV_convertToMarketplaceChargeModelInput!): JSON

  """restricted to: [ADMIN]"""
  ACGDEV_convertToSubscriptionChargeModel(input: ACGDEV_convertToSubscriptionChargeModelInput!): JSON
  sendAdminOnboardingEmail(input: SendAdminOnboardingEmailInput!): SendAdminOnboardingEmailResponse
  createMarketplaceOrganisation(input: CreateMarketplaceOrganisationInput!): CreateMarketplaceOrganisationResponse

  """requires feature access"""
  createApiSettings(input: CreateApiSettingsInput!): CreateApiSettingsResponse

  """requires feature access"""
  deleteApiSettings(id: String!): Boolean

  """restricted to: [ADMIN]"""
  ACG_updateInternalRoles(input: UpdateInternalRolesInput!): UpdateInternalRolesResponse

  """restricted to: [ADMIN]"""
  ACG_enableFeatureFlag(organisationId: String!, featureFlagName: String!): Boolean

  """restricted to: [ADMIN]"""
  ACG_disableFeatureFlag(organisationId: String!, featureFlagName: String!): Boolean

  """restricted to: [ORGANISATION_ADMIN]"""
  createChildOrganisation(input: CreateChildOrganisationInput!): ChildOrganisationResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_createChildOrganisation(organisationId: String!, input: CreateChildOrganisationInput!): ChildOrganisationResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_moveOrganisationBranch(parentOrganisationId: String!, organisationId: String!): ChildOrganisationIdsResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_buildOrganisationHierarchy(organisationId: String!, children: [OrganisationHierarchyNode]!): OrganisationResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  assignOrganisationUserRole(input: AssignOrganisationUserRoleInput!): AssignOrganisationUserRoleResponse!

  """restricted to: [SERVER,ADMIN]"""
  ACG_assignOrganisationUserRole(organisationId: String!, input: AssignOrganisationUserRoleInput!): AssignOrganisationUserRoleResponse!

  """restricted to: [ADMIN]"""
  ACGDEV_sendAssignIdentityRoleEmail(input: ACGDEV_sendAssignIdentityRoleEmailInput!): JSON
  packagingEcho(input: PackagingEchoInput!): PackagingEcho

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_updateUserPackage(input: ACG_Packaging_UpdateUserPackageInput!): ACG_Packaging_UpdateUserPackageResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_updateOrganisationPackage(input: ACG_Packaging_UpdateOrganisationPackageInput!): ACG_Packaging_UpdateOrganisationPackageResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_addPackageFeature(input: ACG_Packaging_AddPackageFeatureInput!): ACG_Packaging_AddPackageFeatureResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_createPackage(input: ACG_Packaging_CreatePackageInput!): ACG_Packaging_CreatePackageResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_createFeature(input: ACG_Packaging_CreateFeatureInput!): ACG_Packaging_CreateFeatureResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_addSubscriptionFeatureOverride(input: ACG_Packaging_AddSubscriptionFeatureOverrideInput!): ACG_Packaging_AddSubscriptionFeatureOverrideResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_updateUserFeatureOverrides(input: ACG_Packaging_UpdateUserFeatureOverridesInput!): ACG_Packaging_UpdateUserFeatureOverridesResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_updateOrganisationFeatureOverrides(input: ACG_Packaging_UpdateOrganisationFeatureOverridesInput!): ACG_Packaging_UpdateOrganisationFeatureOverridesResponse
  questionEcho(input: QuestionEchoInput!): QuestionEchoResponse
  ACG_createQuestion(question: QuestionInput!): EditorQuestion
  ACG_updateQuestion(question: QuestionInput!): EditorQuestion
  ACG_publishQuestion(questionId: String!): EditorQuestion

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_importQuestions(questions: [QuestionInput!]!): [EditorQuestion]

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_putAssessmentMetadata(input: AssessmentMetadataInput!): AssessmentMetadata
  quizEcho(input: QuizEchoInput!): QuizEchoResponse

  """restricted to: [ADMIN]"""
  issueCompletionCertificateForUser(userId: String!, courseId: String!, userName: String!, courseName: String!): QuizCompletionCertificate

  """restricted to: [VIEWER]"""
  issueCompletionCertificate(courseId: String!, userName: String!, courseName: String!): QuizCompletionCertificate

  """restricted to: [VIEWER]"""
  generateQuizCompletionCertificate(quizId: String!, userName: String!, courseName: String!): QuizCompletionCertificate

  """restricted to: [VIEWER]"""
  startQuiz(quizId: String!): QuizSession

  """restricted to: [VIEWER]"""
  answerQuizQuestion(sessionId: String!, answers: [Int!]!): QuizSession
  Ratings_echo(input: Ratings_EchoInput!): Ratings_EchoResponse

  """restricted to: [VIEWER]"""
  Ratings_createRating(input: Ratings_CreateRatingInput!): Ratings_Rating
  sandboxEcho(input: SandboxEchoInput!): SandboxEchoResponse

  """restricted to: [ORGANISATION_MEMBER]"""
  startSandboxSession(acceptedTerms: Boolean): SandboxSession!

  """restricted to: [ORGANISATION_MEMBER]"""
  terminateSandboxSession: Boolean!

  """restricted to: [ORGANISATION_MEMBER]"""
  extendSandboxSession: SandboxSession!

  """restricted to: [ADMIN]"""
  ACG_updateSandboxResource(vocareumUserId: String!, params: UpdateSandboxResourceParams): Boolean
  seriesEcho(input: SeriesEchoInput!): SeriesEchoResponse

  """restricted to: [ADMIN,EDITOR]"""
  createSeries(title: String!, seriesUrl: String!, description: String!): EditorSeries!

  """restricted to: [ADMIN,EDITOR]"""
  updateSeries(seriesId: String!, seriesUpdateInput: SeriesUpdateInput!): EditorSeries!

  """restricted to: [ADMIN,EDITOR]"""
  setSeriesOverviewContent(seriesId: String!, seriesOverviewContent: SeriesOverviewContentInput!): EditorSeries!

  """restricted to: [ADMIN,EDITOR]"""
  setEpsiodePublicallyHidden(episodeId: String!): EditorEpisode!

  """restricted to: [ADMIN,EDITOR]"""
  setEpsiodePublicallyVisible(episodeId: String!): EditorEpisode!
  setEpisodeProgress(episodeProgress: EpisodeProgressInput!): Boolean
  setEpisodeViewed(seriesId: String!, episodeId: String!): Boolean

  """restricted to: [ADMIN,EDITOR]"""
  publishEpisode(episodeId: String!, publishTime: Float): EditorEpisode!

  """restricted to: [ADMIN,EDITOR]"""
  setThumbnailSource(episodeId: String!, thumbnailUrl: String!): EditorEpisode!

  """restricted to: [ADMIN,EDITOR]"""
  setEpisodeContentSource(episodeId: String!, contentId: String!): EditorEpisode!

  """restricted to: [ADMIN,EDITOR]"""
  setEpisodePrimaryContentSource(episodeId: String!, contentId: String!): EditorEpisode!

  """restricted to: [ADMIN,EDITOR]"""
  setEpisodeResources(episodeId: String!, resources: [EpisodeResourceInput!]!): EditorEpisode!

  """restricted to: [ADMIN,EDITOR]"""
  updateEpisodeMetaData(episodeId: String!, updateEpisode: UpdateEpisodeInput!): EditorEpisode!

  """restricted to: [ADMIN,EDITOR]"""
  createEpisodeUnpublished(seriesId: String!, createEpisode: CreateEpisodeInput!): EditorEpisode!
  skillsAssessmentEcho(input: SkillsAssessmentEchoInput!): SkillsAssessmentEchoResponse
  setSelfAssessment(input: SetSelfAssessmentInput): SetSelfAssessmentResponse
  setAchievement(input: SetAchievementInput): SetAchievementResponse
  submitAssessmentAnswer(input: SubmitAssessmentAnswerInput): SubmitAssessmentAnswerResponse
  skillsAssessmentSetupEcho(input: SkillsAssessmentSetupEchoInput!): SkillsAssessmentSetupEchoResponse
  sendSkillsAssessmentReminder(input: SendSkillsAssessmentReminderInput!): SendSkillsAssessmentReminderResponse

  """restricted to: [ADMIN]"""
  createSkillsAssessmentRequest(input: CreateSkillsAssessmentRequestInput!): SkillsAssessment

  """restricted to: [ORGANISATION_ADMIN]"""
  createSkillsAssessment(input: CreateSkillsAssessmentInput): CreateSkillsAssessmentResponse

  """restricted to: [SERVER]"""
  ACG_saveSkillsAssessmentResult(input: SaveSkillsAssessmentResultInput!): SaveSkillsAssessmentResultResponse
  subtitlesEcho(input: SubtitlesEchoInput!): SubtitlesEchoResponse

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  createTranscription(input: TranscriptionInput): SubtitleTranscription

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  bulkCreateTranscriptions(input: [TranscriptionInput!]): [SubtitleTranscription!]

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  importSubtitle(contentId: String!): SubtitleTranscription

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  deleteSubtitle(contentId: String!): DeleteSubtitleResult

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  setSubtitleVisibility(input: SubtitleVisibilityInput!): SubtitleTranscription
  tokenEcho(ping: String!): String
  trackingEcho(ping: String!): String
  trackDurationCourse(event: CourseEventInput!): Boolean!
  trackDurationWebseries(event: WebseriesEventInput!): Boolean!
  trackDurationHandsonLabs(event: HandsonLabsEventInput!): Boolean!
  trackDurationACGHandsonLabs(event: ACGHandsonLabsEventInput!): Boolean!
  trackCourseIssue(event: CourseIssueInput): Boolean!
  trackEvent(event: EventInput): Boolean!

  """restricted to: [VIEWER]"""
  identify(event: IdentifyInput): Boolean!
  page(event: PageInput): Boolean!
}

enum NextComponentAction {
  START
  CONTINUE
}

type NextComponentResult {
  action: NextComponentAction!
  courseId: String!
  courseUrl: String!
  artworkUrl: String
  courseTitle: String!
  components: [UpNextComponent!]!
}

input NumberComparisonCondition {
  value: Float!
  operator: ComparisonOperator!
}

type Option {
  label: String
  value: String
  description: String
}

type Organisation {
  id: ID!
  name: String
  website: String

  """restricted to: [SERVER,ADMIN]"""
  promotion: String

  """restricted to: [SERVER,ADMIN,ORGANISATION_ADMIN]"""
  chargeModel: String

  """restricted to: [SERVER,ADMIN]"""
  usePoints: Boolean

  """restricted to: [SERVER,ADMIN,ORGANISATION_ADMIN]"""
  points: OrganisationPoints

  """restricted to: [SERVER,ADMIN]"""
  accountType: OrganisationAccountType

  """restricted to: [SERVER,ADMIN,ORGANISATION_ADMIN]"""
  subscription: OrganisationSubscription

  """restricted to: [SERVER,ADMIN,ORGANISATION_ADMIN]"""
  reporting: OrganisationReporting
  features: OrganisationFeatures
  hasMembership: Boolean
  deactivated: Boolean

  """restricted to: [SERVER,ADMIN,ORGANISATION_ADMIN]"""
  domains: [String!]

  """restricted to: [SERVER,ADMIN,ORGANISATION_ADMIN]"""
  joinCodes: [String!]

  """restricted to: [SERVER,ADMIN,ORGANISATION_ADMIN]"""
  consumedLicenses: Int

  """restricted to: [SERVER,ADMIN,ORGANISATION_ADMIN]"""
  deactivatedLicenses: Int

  """restricted to: [ADMIN]"""
  connectionName: String

  """restricted to: [ADMIN]"""
  disableInvitations: Boolean

  """restricted to: [ADMIN]"""
  archivedAt: ISODate

  """restricted to: [SERVER,ADMIN,ORGANISATION_ADMIN]"""
  createdAt: ISODate
  companyLogo: String
  customInvitationMessage: String
  isExpired: Boolean
  onboardingEvents: [String]
  widgetsVisibility: [WidgetVisibility]
  betaFeatureRequests: [BetaFeatureRequest]

  """restricted to: [SERVER,ADMIN,ORGANISATION_ADMIN]"""
  entitlement: OrganisationEntitlement
  termsConditionDownloadUrl: String
  parentOrganisationId: String
  parentOrganisationIds: [String]
  rootParentOrganisationId: String
  childOrganisationIds: [String]
}

enum OrganisationAccountType {
  TEST
  INTERNAL
  FREEBIE
  TRIAL
  PAYING
}

type OrganisationActivity {
  data: [ActivityData]!
  totalCount: Int!
}

type OrganisationActivityStats {
  licensesUsed: Int
}

input OrganisationCertificationActivityFilters {
  certificateId: String
  groupId: String
  userIds: [String]
  acquiredDateRange: DateRange
}

type OrganisationCertificationActivityReportItem {
  id: ID!
  userId: String
  displayName: String
  email: String
  picture: String
  certificateId: String
  certificateTitle: String
  certificateProvider: String
  acquiredDate: ISODate
  expireDate: ISODate
  expired: Boolean
  certificateUrl: String
}

type OrganisationCertificationActivityReportResponse {
  total: Int!
  data: [OrganisationCertificationActivityReportItem]
  downloadUrl: String!
}

input OrganisationCertificationSummaryFilters {
  certificateIds: [String]
  groupId: String
  userIds: [String]
  validOnly: Boolean
  acquiredDateRange: DateRange
}

type OrganisationCertificationSummaryReportItem {
  id: ID!
  certificateId: String!
  certificateTitle: String!
  certificateProvider: String!
  lastAcquiredAt: ISODate
  numberOfUsers: Int!
}

input OrganisationCourseActivityFilters {
  courseId: String
  groupId: String
  userIds: [String]
  progress: Int
  dateRange: DateRange
}

type OrganisationCourseActivityReportItem {
  id: ID!
  userId: String
  displayName: String
  email: String
  picture: String
  courseId: String
  courseTitle: String
  progress: Int
  minsWatchedAllTime: Float
  lastActivity: ISODate
}

type OrganisationCourseActivityReportResponse {
  total: Int!
  data: [OrganisationCourseActivityReportItem]
  downloadUrl: String!
}

input OrganisationCourseEngagementActivityFilters {
  courseId: String
  groupId: String
  userIds: [String]
  progress: Int
  dateRange: DateRange
}

type OrganisationCourseEngagementActivityReportItem {
  id: ID!
  userId: String
  componentId: String
  contentDuration: String
  courseId: String
  completedAt: String
}

type OrganisationCourseEngagementActivityReportResponse {
  total: Int!
  data: [OrganisationCourseEngagementActivityReportItem]
}

input OrganisationCourseEngagementFilters {
  courseId: String
  groupId: String
  userIds: [String]
  dateRange: DateRange
  period: Period!
}

type OrganisationCourseEngagementReportItem {
  id: ID!
  startDate: ISODate!
  endDate: ISODate!
  activeUsersCount: Int
  completedComponentsCount: Int
  completedComponentsPerActiveUser: Int
}

input OrganisationCourseEngagementSummaryFilters {
  dateRange: DateRange
  courseId: String
  userIds: [String]
  groupId: String
}

type OrganisationCourseEngagementSummaryReportResponse {
  activeUsersCount: Int!
  completedComponentsCount: Int!
  completedComponentsPerActiveUser: Int!
  totalContentDurationMinutes: Int!
}

input OrganisationCourseEventFilters {
  completed: Boolean
  dateRange: DateRange
  groupId: String
  courseId: String
  userIds: [String]
}

type OrganisationCourseEventReportItem {
  id: ID!
  userId: String
  name: String
  email: String
  courseId: String
  courseTitle: String
  startDate: ISODate
  completeDate: ISODate
  completed: Boolean
}

type OrganisationCourseProgressReportItem {
  id: ID!
  courseId: String!
  numberOfUsers: Int!
  progress: Int
}

type OrganisationCustomReport {
  periscopeSignedUrl: String
}

type OrganisationEntitlement {
  customerIdentifier: String
  dimension: String
  expirationDate: String
  productCode: String
}

input OrganisationExamSimActivityFilters {
  groupId: String
  courseId: String
  userIds: [String]
}

type OrganisationExamSimActivityReportItem {
  id: ID!
  userId: String
  displayName: String
  email: String
  picture: String
  courseId: String
  courseTitle: String
  score: Float
  startedAt: ISODate
  completedAt: ISODate
}

type OrganisationExamSimActivityReportResponse {
  total: Int
  data: [OrganisationExamSimActivityReportItem]
  downloadUrl: String!
}

input OrganisationExamSimCompletedActivityFilters {
  groupId: String
  courseId: String
  userIds: [String]
  dateRange: DateRange
}

type OrganisationExamSimCompletedActivityReportItem {
  id: ID!
  userId: String
  displayName: String
  email: String
  picture: String
  courseId: String
  courseTitle: String
  score: Float
  startedAt: ISODate
  completedAt: ISODate
}

type OrganisationExamSimCompletedActivityReportResponse {
  total: Int
  data: [OrganisationExamSimCompletedActivityReportItem]
}

input OrganisationExamSimCompletedSummaryFilters {
  groupId: String
  userIds: [String]
  courseId: String
  dateRange: DateRange
}

type OrganisationExamSimCompletedSummaryResponse {
  completedExamSimCount: Int
}

input OrganisationExamSimSummaryFilters {
  groupId: String
  courseId: String
  userIds: [String]
  dateRange: DateRange
  period: Period
}

type OrganisationExamSimSummaryReportItem {
  id: ID!
  startDate: ISODate
  courseId: String
  averageBestScore: Int
  averageScore: Int
  numberOfUsers: Int
  numberOfAttempts: Int
}

type OrganisationFeatures {
  enhancedSyllabus: Boolean
  requireEmployeeId: Boolean
  restrictForumAccess: Boolean
  restrictSocial: Boolean
  restrictProfileEdit: Boolean
  registrationMethod: String
  allowInvitations: Boolean
}

input OrganisationFeaturesInput {
  enhancedSyllabus: Boolean
  requireEmployeeId: Boolean
  restrictForumAccess: Boolean
  restrictSocial: Boolean
  restrictProfileEdit: Boolean
}

type OrganisationGroupUserJoinedStatItem {
  startDate: ISODate
  endDate: ISODate
  joinedCount: Int
  cumulativeJoinedCount: Int
}

input OrganisationGroupUserJoinedStatsInput {
  from: String!
  to: String!
  interval: DatePeriodInterval!
  groupId: String!
}

type OrganisationGroupUserLeftStatItem {
  startDate: ISODate
  endDate: ISODate
  leftCount: Int
  cumulativeLeftCount: Int
}

input OrganisationGroupUserLeftStatsInput {
  from: String!
  to: String!
  interval: DatePeriodInterval!
  groupId: String!
}

type OrganisationGroupUserRejoinedStatItem {
  startDate: ISODate
  endDate: ISODate
  rejoinedCount: Int
  cumulativeRejoinedCount: Int
}

input OrganisationGroupUserRejoinedStatsInput {
  from: String!
  to: String!
  interval: DatePeriodInterval!
  groupId: String!
}

input OrganisationHierarchyNode {
  name: String
  children: [OrganisationHierarchyNode]
}

type OrganisationInvitation {
  id: ID!
  code: String!
  email: String!
  createdAt: ISODate
  sentAt: ISODate
  updatedAt: ISODate
  acceptedAt: ISODate
  validUntil: ISODate
  status: OrganisationInvitationStatus!
  inviteAsAdmin: Boolean
  inviteRole: InvitationRoles
  userId: String
  inviteLink: String
  organisationId: String!
  organisation: InviterOrganisation

  """restricted to: [SERVER,ADMIN]"""
  revokedBy: String

  """restricted to: [SERVER,ADMIN]"""
  anonymisedAt: ISODate
}

input OrganisationInvitationCountInput {
  organisationId: String!
  status: InvitationStatus!
  inviteAsAdmin: Boolean
}

input OrganisationInvitationEchoInput {
  echo: String
}

type OrganisationInvitationEchoResponse {
  echo: String
}

input OrganisationInvitationFilters {
  query: String
  status: OrganisationInvitationStatus
  inviteAsAdmin: Boolean
}

input OrganisationInvitationPagination {
  page: Int
  pageSize: Int
}

input OrganisationInvitationPostAction {
  action: InvitationPostActionType!
  payload: String
}

type OrganisationInvitationResponse {
  invitation: OrganisationInvitation
  taskId: String
}

enum OrganisationInvitationStatus {
  JOINED
  PENDING
  EXPIRED
  REVOKED
}

type OrganisationJobList {
  jobs: [OrganisationJobResponse]
  pagination: JobListPagination
}

type OrganisationJobResponse {
  id: String!
  organisationId: String!
  organisationName: String
  title: String!
  location: LocationResponse!
  salaryRange: SalaryRangeResponse!
  hideSalary: Boolean!
  summary: String
  description: String
  jobStatus: JobStatusEnum!
  createdAt: ISODate
  updatedAt: ISODate
}

type OrganisationLearningPath {
  id: ID!
  name: String!
  tileUrl: String
  description: String
  shortDescription: String
}

input OrganisationLearningPathEchoInput {
  echo: String
}

type OrganisationLearningPathEchoResponse {
  echo: String
}

type OrganisationLearningPathReportItem {
  id: ID!
  level: Int
  levelName: String
  userId: String!
  startDate: String
  learningPathId: String
  learningPathName: String
}

type OrganisationLearningPathSection {
  id: ID!
  name: String!
  completed: Boolean!
  completedPercent: Float
}

type OrganisationLearningPathUser {
  id: ID!
}

type OrganisationMembers {
  data: [User!]!
  totalCount: Int!
}

type OrganisationPoints {
  balance: String
  purchases: [PointsPurchase]
}

input OrganisationQuizActivityFilters {
  groupId: String
  courseId: String
  userIds: [String]
  dateRange: DateRange
}

type OrganisationQuizActivityReportItem {
  id: ID!
  userId: String
  fullName: String
  displayName: String
  email: String
  picture: String
  courseId: String
  quizId: String
  quizTitle: String
  score: Int
  completedAt: ISODate
}

type OrganisationQuizActivityReportResponse {
  total: Int
  data: [OrganisationQuizActivityReportItem]
  downloadUrl: String!
}

input OrganisationQuizCompletedSummaryFilters {
  groupId: String
  userIds: [String]
  courseId: String
  dateRange: DateRange
}

type OrganisationQuizCompletedSummaryReportResponse {
  completedQuizCount: Int
}

input OrganisationQuizSummaryFilters {
  groupId: String
  courseId: String
  userIds: [String]
}

type OrganisationQuizSummaryReportItem {
  id: ID!
  quizId: String
  quizTitle: String
  courseId: String
  averageBestScore: Int
  averageScore: Int
  numberOfUsers: Int
  numberOfAttempts: Int
}

type OrganisationReporting {
  periscopeDashboardId: String
  periscopeEnabled: Boolean
}

input OrganisationReportingEchoInput {
  echo: String
}

type OrganisationReportingEchoResponse {
  echo: String
}

input OrganisationReportingInput {
  periscopeDashboardId: String
  periscopeEnabled: Boolean
}

type OrganisationResponse {
  organisation: Organisation
}

type OrganisationRestrictions {
  restrictProfileEdit: Boolean
}

enum OrganisationRole {
  ADMIN
  STUDENT
  TEAM_COORDINATOR
}

input OrganisationsEchoInput {
  echo: String
}

type OrganisationsEchoResponse {
  echo: String
}

type organisationStudyGroupProgressReportItem {
  id: ID!
  groupName: String
  displayName: String
  courseTitle: String
  email: String
  startDate: ISODate
  completeDate: ISODate
  progress: Float
  lastActivity: ISODate
}

type organisationStudyGroupProgressReportResponse {
  total: Int!
  data: [organisationStudyGroupProgressReportItem]
  csvDownloadUrl: String
  pdfDownloadUrl: String
}

type OrganisationSubscription {
  startDate: String
  endDate: String
  userLicenseCount: Int
  expired: Boolean
  daysRemaining: Int
  endDateOverride: String
  endDateOverrideReason: String
}

input OrganisationSubscriptionInput {
  startDate: String
  endDate: String
  userLicenseCount: Int
  endDateOverride: String
  endDateOverrideReason: String
}

type OrganisationSupportRoles {
  id: ID!
  organisationWriteAccess: Boolean!
}

type OrganisationUser {
  id: ID!
  name: String
  email: String
  picture: String
  displayName: String
  lastSeenTimestamp: ISODate
  admin: Boolean
  status: OrganisationUserStatus
  team: String
  teamCoordinator: Boolean
  organisationJoinedTimestamp: ISODate
}

type organisationUserActivityReportItem {
  id: ID
  userId: String
  courseId: String
  displayName: String
  email: String
  role: String
  status: String
  courseTitle: String
  progress: Int
  lastActivity: ISODate
  completedLessons: Int
  completedQuizzes: Int
  completedExamSims: Int
  joinedAt: ISODate
  teamName: String
}

type organisationUserActivityReportResponse {
  total: Int!
  data: [organisationUserActivityReportItem]
  csvDownloadUrl: String
}

type OrganisationUserCourseEventStatItem {
  startDate: ISODate
  endDate: ISODate
  userCount: Int
  newUserCount: Int
  cumulativeUserCount: Int
}

input organisationUserCourseEventStatsInput {
  from: String!
  to: String!
  interval: DatePeriodInterval!
  eventType: CourseEventType!
}

type OrganisationUserDetail {
  id: ID!
  name: String
  email: String
  admin: Boolean
  lastSeenTimestamp: ISODate
  picture: String
  organisationJoinedTimestamp: ISODate
  organisationLicenseConsumed: Boolean
  status: OrganisationUserDetailStatus
}

input OrganisationUserDetailFilters {
  groupId: String
  userIds: [String]
  emails: [String]
}

enum OrganisationUserDetailStatus {
  Active
  Deactivated
}

input OrganisationUserEngagementReportFilter {
  from: String!
  to: String!
  interval: DatePeriodInterval!
}

type OrganisationUserEngagementReportItem {
  id: ID!
  startDate: ISODate
  endDate: ISODate
  joinedCount: Int!
}

type OrganisationUserIdentity {
  id: ID
  userIdentity: UserIdentity
}

type OrganisationUserJoined {
  id: ID
  organisationId: String
  joinedAt: ISODate
  joinMethod: String
}

type OrganisationUserJoinedStatItem {
  startDate: ISODate
  endDate: ISODate
  joinedCount: Int
  cumulativeJoinedCount: Int
}

input OrganisationUserJoinedStatsInput {
  from: String!
  to: String!
  interval: DatePeriodInterval!
}

type OrganisationUserLearningPath {
  id: ID!
  name: String!
  status: String!
  tileUrl: String
  description: String
  shortDescription: String
}

type OrganisationUserLeftStatItem {
  startDate: ISODate
  endDate: ISODate
  leftCount: Int
  cumulativeLeftCount: Int
}

input OrganisationUserLeftStatsInput {
  from: String!
  to: String!
  interval: DatePeriodInterval!
}

type OrganisationUserRejoinedStatItem {
  startDate: ISODate
  endDate: ISODate
  rejoinedCount: Int
  cumulativeRejoinedCount: Int
}

input OrganisationUserRejoinedStatsInput {
  from: String!
  to: String!
  interval: DatePeriodInterval!
}

enum OrganisationUserRole {
  ADMIN
  STUDENT
  TEAM_COORDINATOR
}

type OrganisationUsersDetailResponse {
  total: Int
  data: [OrganisationUserDetail]
}

input OrganisationUsersFilters {
  userIds: [String]
  query: String
}

type OrganisationUserStartedCourse {
  id: ID
  name: String
  completedPercent: Float
  lastComponentCompletedDate: ISODate
  artworkUrl: String
}

enum OrganisationUserStatus {
  Active
  Deactivated
}

input OrganisationUserStudyPlansInput {
  userId: String!
}

input OrganisationWarehouseEchoInput {
  echo: String
}

type OrganisationWarehouseEchoResponse {
  echo: String
}

type Package {
  id: ID!
  name: String
  displayName: String!
  description: String
  baseId: ID
  isPrivate: String
}

type PackageFeature {
  packageId: ID!
  featureId: ID!
  boolValue: String
  numberValue: Int
  stringValue: String
}

type PackageFeatures {
  packageId: ID!
  packageName: String!
  features: String!
}

input PackageInput {
  id: ID!
  name: String
  displayName: String!
  description: String
  baseId: ID
  isPrivate: String
}

enum Packaging_FeatureAccessLevel {
  ENABLED
  DISABLED
  UPGRADE
}

enum Packaging_FeatureValueType {
  number
  bool
  string
}

type Packaging_Package {
  id: ID!
  name: String! @deprecated
  displayName: String!
  description: String @deprecated
  baseId: ID @deprecated
  isPrivate: String @deprecated
}

type Packaging_PackagesResponse {
  packages: [Packaging_Package]!
}

enum Packaging_PackageType {
  FREE
  PERSONAL_BASIC
  PERSONAL_PLUS
  BUSINESS_BASIC
  BUSINESS_PLUS
}

type Packaging_UserFeatureAccess {
  packageId: ID!
  packageName: String!
  features: String!
}

type Packaging_UserFeatureAccessResponse {
  userFeatureAccess: Packaging_UserFeatureAccess
}

input Packaging_UserFeatureAccessRolesInput {
  member: Boolean!
}

type PackagingEcho {
  echo: String
}

input PackagingEchoInput {
  echo: String
}

input Page {
  pageNumber: Int!
  pageSize: Int!
}

type PagedPurchases {
  data: [ProductPurchaseView!]!
  totalCount: Int!
}

input PageInput {
  category: String
  name: String
  properties: String!
}

input Pagination {
  page: Int!
  pageSize: Int!
}

type PaypalPaymentMethod {
  accountEmail: String!
  type: String!
}

enum Period {
  DAY
  WEEK
  MONTH
}

type PointsPurchase {
  id: String!
  amount: String
  createdTimestamp: String
  description: String
  purchaseDate: String
}

type PosterSource {
  url: String!
}

type Preset {
  id: String!
  description: String
}

type Price {
  price: Float!
  standardPrice: Float!
  currency: String!
  currencySymbol: String!
  isDiscount: Boolean!
  discountedBy: String!
  discountPromoCodeId: String
  showPrice: Boolean!
  upsell: Boolean!
}

type Product {
  sku: Int!
  id: String!
  title: String!
  type: String!
  courses: [ProductCourse!]!
  brand: String
  isVisible: Boolean
  isActive: Boolean
  includesPracticeExams: Boolean
  includesQuizzes: Boolean
  upsellBundleId: String
  upsellBundleId2: String
  prices: [ProductPrice!]!
}

type ProductCourse {
  courseId: String!
  sequence: Int!
}

input ProductCourseInput {
  courseId: String!
  sequence: Int!
}

type ProductPrice {
  currency: String!
  price: Float!
}

input ProductPriceInput {
  currency: String!
  price: Float!
}

type ProductPurchaseView {
  orderId: String!
  brandId: String!
  userId: String!
  organisationId: String
  currency: String!
  productId: String!
  purchasedTimestamp: String!
  total: Float!
  revenue: Float
  tax: Float
  promoCode: String
  usePoints: Boolean
  description: String
  courses: [String!]
  buyerDisplayName: String
  buyerName: String
  buyerEmail: String
}

input ProductWeightInput {
  id: String!
  weight: Int!
}

type Profile {
  id: ID
  displayname: String
  handle: String
  email: String
  name: String
  location: String
  jobTitle: String
  employer: String
  bio: String
  picture: String
  twitterUrl: String
  githubUrl: String
  linkedinUrl: String
  facebookUrl: String
  certifications: [ProfileCertification]
  completedCourses: [ProfileCourseInfo]
  employmentHistories: [EmploymentHistory]
  communityEngagement: CommunityEngagement
  restrictions: OrganisationRestrictions
  visibilityToggles: VisibilityToggles
  organisation: ProfileOrganisation
}

input ProfileByHandleInput {
  handle: String!
}

input ProfileByIdInput {
  id: String!
}

type ProfileCertification {
  id: String
  imageUrl: String
  expiryDate: ISODate
  acquiredDate: ISODate
  credentialUrl: String
  certificateNumber: String
  certification: CertificationType
  dateAcquired: String @deprecated
  provider: String @deprecated
  title: String @deprecated
}

type ProfileCompletion {
  id: String
  completedPercent: Int
  sections: [ProfileCompletionSection]
}

type ProfileCompletionSection {
  title: String
  completed: Boolean
}

type ProfileCourseInfo {
  id: String
  artworkUrl: String
  name: String
}

input ProfileInput {
  displayname: String
  email: String
  location: String
  jobTitle: String
  employer: String
  bio: String
  picture: String
  name: String
  twitterUrl: String
  githubUrl: String
  linkedinUrl: String
  facebookUrl: String
  employmentHistories: [EmploymentHistoryInput!]
  visibilityToggles: VisibilityTogglesInput
}

type ProfileOrganisation {
  id: String
  name: String
}

type ProfilePreview {
  url: String!
}

type ProfilePreviewPage {
  url: String!
  page: Int!
}

input ProfilesByIdsInput {
  ids: [String]!
}

type PromoCode {
  promoCodeId: String!
  promoCodeObj: PromoCodeObj!
}

type PromoCodeObj {
  remainingQuantity: Int!
  originalQuantity: Int!
  description: String
  publicSubtitle: String
  publicTitle: String
  hasExpired: Boolean!
  prices: PromoCodePrice
  expires: String
}

type PromoCodePrice {
  price: Float!
  currency: String!
  currencySymbol: String!
}

type PromoVideoUrl {
  processing: Boolean
}

"""Episode - Public"""
type PublicEpisode {
  seriesId: String!
  episodeId: String!
  episodeUrl: String!

  """Meta"""
  title: String!
  shortSummary: String!
  description: String!
  resources: [EpisodeResource!]!
  publishedDateKey: Float!
  thumbnailUrl: String!

  """Episodes"""
  activeEpisodeContentId: String

  """Connections"""
  episodeViews: Int!
  publicSeries: PublicSeries!

  """Null when user is not logged in"""
  userProgress: UserProgress
  activeEpisodeContent: Webseries_AudioVisualContent
}

type PublicSeries {
  seriesId: String!
  seriesUrl: String!
  isProtected: Boolean!
  title: String!
  description: String!
  forumRoomId: String
  hubspot: Hubspot
  artworkKey: String!
  artworkUrl: String
  bannerUrl: String
  seriesOverviewContent: SeriesOverviewContent

  """Connections"""
  activeEpisodes(limit: Int, offset: Int): [PublicEpisode!]!
  seriesEpisodeByUrl(episodeUrl: String!): PublicEpisode!
}

type PublicUserCertification {
  id: String
  certificationId: String
  title: String
  provider: String
}

type Purchase {
  orderId: String!
  brandId: String!
  userId: String!
  organisationId: String
  purchasedTimestamp: String!
  currency: String!
  total: Float!
  revenue: Float
  tax: Float
  invoiceUrl: String
  products: [PurchasedProduct!]!
}

type PurchasedProduct {
  productId: String!
  total: Float!
  revenue: Float
  tax: Float
  promoCode: String
  usePoints: Boolean
  description: String
  courses: [String!]
}

type Query {
  """BFF"""
  bffHealthCheck: Boolean!

  """restricted to: [ADMIN]"""
  isAdminCheck: String
  algoliaSecuredApiKey: AlgoliaSecuredApiKey

  """Identity"""
  getUserProfile(userId: String): User
  getUserProfileBatch(userIds: [String!]!): [User]!
  getUserProfileByHandle(handle: String!): User
  getUserProfileByHandleBatch(handles: [String!]!): [User]!

  """Identity"""
  getUserHandle(userId: String): UserHandle
  getUserHandleBatch(userIds: [String!]!): [UserHandle]!

  """Checkout"""
  getUserProductPrices(userPromotion: String, selectProducts: [String!], userPromoCodeIds: [String!], userCurrency: String, visibleOnly: Boolean, filterMembersOnly: Boolean, activeOnly: Boolean, filterOwned: Boolean): [UserProductPrice!]!

  """Membership"""
  getAvailablePlans(currency: String!, promotionId: String, token: String): SubscriptionPlan

  """Feature"""
  features: Features

  """restricted to: [VIEWER]"""
  purchasesByUser(userId: String, limit: Int, before: Int, after: Int): [Purchase!]

  """restricted to: [ADMIN,ORGANISATION_ADMIN]"""
  purchasesOrganisationQuery(orgId: String!, queryOpts: String): PagedPurchases!

  """restricted to: [VIEWER]"""
  verifyExternalPurchase(name: String!, price: Float!, courseId: String!): VerifyPurchaseResult!

  """restricted to: [VIEWER]"""
  getLastAccessedCourse: lastAccessedCourse

  """restricted to: [VIEWER]"""
  requestFileUpload(courseId: String!, fileName: String, type: String!, componentIdentifier: String!): FileToUpload

  """restricted to: [VIEWER]"""
  getRestrictedFiles(files: [Files]!): SignedUrls

  """restricted to: [VIEWER]"""
  getCompletedCourseComponentIds(courseIds: [String!]!): [CompletedCourseComponents!]

  """restricted to: [VIEWER]"""
  getUserCourseComponent(courseId: String!, sectionId: String!, componentId: String!): UserCourseComponent

  """restricted to: [VIEWER]"""
  getUserCourse(courseId: String!): UserCourse

  """restricted to: [VIEWER]"""
  profile: User!

  """restricted to: [ADMIN]"""
  reindexForumRooms: Boolean

  """restricted to: [VIEWER]"""
  getBraintreeClientToken(currency: String!): ClientTokenResult!

  """restricted to: [VIEWER]"""
  calculateTax(currency: String!, country: String!, amount: Float!, taxnumber: String): CalculateTaxResult!

  """restricted to: [VIEWER]"""
  validateVATNumber(vatnumber: String!, country: String!): VATValidationResult!

  """restricted to: [VIEWER]"""
  getUserSubscriptionHistory(userId: String): [UserSubscription]

  """restricted to: [VIEWER]"""
  getSubscriptionPaymentsHistory(userId: String): [SubscriptionPayment]

  """restricted to: [VIEWER]"""
  getSubscriptionPaymentMethod: SubscriptionPaymentMethod

  """restricted to: [VIEWER]"""
  getUserPromotion(userId: String!): SubscriptionUserTrial
  analyticsHealthCheck: Boolean!

  """restricted to: [ADMIN,ORGANISATION_ADMIN]"""
  organisationCustomReport(orgId: String!): OrganisationCustomReport

  """restricted to: [ADMIN,INSTRUCTOR]"""
  instructorCourseDashboard(courseId: String!): InstructorCourseDashboard

  """restricted to: [ADMIN,INSTRUCTOR]"""
  instructorDashboard(userId: String!): InstructorDashboard
  assessmentsContentHealthCheck: Boolean
  assessmentById(id: String!): AssessmentsContentAssessment
  assessments(ids: [String]!): [AssessmentsContentAssessment]
  assessmentQuestions(input: [AssessmentsContentAssessmentQuestionsInput!]!): [AssessmentsContentAssessmentQuestions]
  questionPool(id: String): AssessmentsContentQuestionPool
  assessmentsHealthCheck: Boolean

  """restricted to: [VIEWER]"""
  assessment(id: String): AssessmentsAssessment

  """requires feature access"""
  assessmentAttempt(id: String): AssessmentsAttempt

  """requires feature access"""
  assessmentAttemptResult(id: String): AssessmentsGradedAttempt

  """restricted to: [VIEWER]"""
  attemptHistory(id: String): [AssessmentsGradedAttempt]
  billingGqlHealth: Boolean!
  billingPlan(input: BillingPlanInput!): BillingPlanResponse!
  billingBusinessPlans(input: BillingBusinessPlansInput!): BillingBusinessPlansResponse!

  """restricted to: [ORGANISATION_ADMIN]"""
  billingSubscription: BillingSubscriptionResponse!

  """restricted to: [ADMIN,SERVER]"""
  ACG_billingSubscription(input: ACG_billingSubscriptionInput!): ACG_billingSubscriptionResponse!
  estimateCreateBillingSubscription(input: EstimateCreateBillingSubscriptionInput!): EstimateCreateBillingSubscriptionResponse!

  """restricted to: [ORGANISATION_ADMIN]"""
  estimateAddBillingSubscriptionSeats(input: EstimateAddBillingSubscriptionSeatsInput!): EstimateAddBillingSubscriptionSeatsResponse!

  """restricted to: [ORGANISATION_ADMIN]"""
  billingInvoices: BillingInvoicesResponse!

  """restricted to: [ADMIN]"""
  ACG_billingInvoices(organisationId: String!): BillingInvoicesResponse!

  """restricted to: [ORGANISATION_ADMIN]"""
  billingHistory: BillingHistoryResponse!

  """restricted to: [ADMIN,SERVER]"""
  ACG_billingHistory(input: ACG_billingHistoryInput!): ACG_billingHistoryResponse!
  careersHealthCheck: Boolean!
  jobs: [JobResponse]!
  job(id: String!): JobResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationJob(id: String!): OrganisationJobResponse
  jobList(query: JobQuery, page: Int, pageSize: Int): JobList

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationJobList(query: JobQuery, page: Int, pageSize: Int): OrganisationJobList

  """restricted to: [ORGANISATION_ADMIN]"""
  hiringOrganisation: HiringOrganisation!
  candidateApplications: [Application]!
  candidateApplicationForJob(jobId: String): Application
  jobApplicationConsent: Boolean
  userGeoLocation: GeoLocation
  careersFeatures: [FeatureFlag!]!
  profilePreview: ProfilePreview
  profilePreviewPages: [ProfilePreviewPage]
  certificationsHealthCheck: Boolean!
  certificateProviders: [CertificateProvider]
  myCertificates: [UserCertificate]

  """restricted to: [ADMIN,SERVER]"""
  ACG_userCertificates(userId: ID): [UserCertificate]

  """Public"""
  certificate(certificateId: String): Certification
  certificates(certificateIds: [String]): [Certification]
  getAllUserCertifications(current: Boolean): [UserCertification!]!
  getUserCertificationsCount(userIds: [String!]!): [ActiveUserCertification!]
  getPublicUserCertifications(userId: String!): [PublicUserCertification!]

  """Protected"""
  getUserCertification(userId: String, userCertificationId: String!): UserCertification
  requestCertificatesUpload: CertificationToUpload!
  getUploadedCertificationLink(userCertificationId: String!): CertificationLink
  cloudPlaygroundHealthCheck: Boolean!

  """restricted to: [VIEWER]"""
  CloudPlayground_myAccountStatus: CloudPlayground_AccountStatus

  """restricted to: [VIEWER]"""
  CloudPlayground_sandboxInstance(instanceId: String!): CloudPlayground_SandboxInstance

  """restricted to: [VIEWER]"""
  CloudPlayground_mySandbox: CloudPlayground_MySandbox

  """restricted to: [VIEWER]"""
  CloudPlayground_serverInstance(instanceId: String!): CloudPlayground_ServerInstance

  """restricted to: [VIEWER]"""
  CloudPlayground_myServers: CloudPlayground_MyServers

  """restricted to: [ADMIN]"""
  CloudPlayground_splits: [CloudPlayground_Split]
  cloudProfileHealthCheck: Boolean!
  cloudProfile(id: String): CloudProfileResponse

  """restricted to: [SERVER,ADMIN]"""
  ACG_cloudProfile(id: String!): CloudProfileResponse
  cloudProfileByHandle(handle: String): CloudProfileResponse

  """Returns full profile to owner only"""
  myProfile: Profile

  """Returns public profile to anyone"""
  profileById(input: ProfileByIdInput!): Profile

  """Returns an array of public profiles to anyone"""
  profileByIds(input: ProfilesByIdsInput!): [Profile]

  """Returns full profile to owner; public profile to anyone else"""
  profileByHandle(input: ProfileByHandleInput!): Profile

  """restricted to: [SERVER,ADMIN]"""
  ACG_profileById(input: ProfileByIdInput!): Profile
  profileCompletion: ProfileCompletion
  contentHealthCheck: Boolean!
  getContentBatch(contentIds: [String!]!): [AudioVisualContent]!
  getProtectedContents(contentIds: [String!]!): [AudioVisualContent]!
  getUnprotectedContents(contentIds: [String!]!): [AudioVisualContent]!
  getThumbnailLists(contentIds: [String!]!): [[Thumbnail]]

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  assetUploadUrl(filename: String!): UploadUrlResponse

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  attachmentUploadUrl(filename: String!): UploadUrlResponse

  """restricted to: [VIEWER]"""
  getContentUploadData: ContentUploadData

  """restricted to: [VIEWER]"""
  getCustomPresets: [Preset!]
  contentSearchHealthCheck: Boolean!
  GlobalSearch_courses: [GlobalSearch_Response]
  GlobalSearch_labs: [GlobalSearch_Response]
  contentTaggingHealthCheck: Boolean!
  getContentTags: [ContentTag]!
  courseHealthCheck: Boolean!
  courseOverview(courseId: String!): CourseOverview
  courseOverviews(courseIds: [String!]): [CourseOverview]
  ratingsByCourseIds(courseIds: [String!]): [CourseRating]
  userStartedCourses(filter: CourseInfoFilter): [CourseInfo]
  userAccessibleCourses(courseIds: [String!]!): [CourseOverview]
  userOwnedCourses(courseIds: [String!]!): [CourseOverview]
  userMembershipCourses(courseIds: [String!]!): [CourseOverview]
  userCourseOverview(courseId: String!): UserCourseOverviewResult

  """restricted to: [ADMIN,SERVER]"""
  coursesStartedForUser(userId: String!, filter: CourseInfoFilter): [CourseInfo]

  """restricted to: [ADMIN,SERVER]"""
  courseStartedForUserByCourseId(userId: String!, courseId: String!): CourseInfo

  """restricted to: [ADMIN,SERVER]"""
  ACG_coursesStartedForUsers(userIds: [String!], courseId: String): [UserStartedCoursesResult]

  """restricted to: [VIEWER]"""
  myCourses: Course_UserCourses

  """restricted to: [SERVER,ADMIN]"""
  ACG_coursesForUser(userId: String!): Course_UserCourses
  rolesAndGoals: [RecommendationRole]
  relatedCourses: [RelatedCourse]

  """restricted to: [VIEWER]"""
  getRecommendedCoursesForUser: [CourseRecommendation]

  """restricted to: [VIEWER]"""
  getRecommendedFeaturesForUser: [FeatureRecommendation]
  courseComponentPreviousNext(courseId: String!, componentId: String!): CourseComponentPreviousNextNavigation
  browsePageLayoutConfig: LayoutConfig_BrowsePage
  gdprHealthCheck: Boolean!

  """restricted to: [ADMIN]"""
  getGdprRequest(userId: String!): GdprRequest

  """restricted to: [ADMIN]"""
  getGdprRequests: [GdprRequest]
  groupHealthCheck: Boolean!

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationGroup(id: String): Group

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationGroups: [Group]

  """restricted to: [ORGANISATION_ADMIN]"""
  groupUsers(groupId: String!): [GroupUserConnection]

  """restricted to: [ORGANISATION_ADMIN]"""
  groupsByUserIdAndOrganisationId(userId: String): [GroupUserConnection]

  """restricted to: [ADMIN,SERVER]"""
  ACG_groupUsers(groupId: String!, organisationId: String!): [GroupUserConnection]

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationGroups(organisationId: String!, filters: OrganisationUsersFilters): [Group]

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationGroup(organisationId: String!, groupId: String!): Group

  """restricted to: [ORGANISATION_ADMIN]"""
  studyPlan(id: String): StudyPlan

  """restricted to: [ORGANISATION_MEMBER]"""
  userStudyPlans: UserStudyPlansResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserStudyPlans(input: OrganisationUserStudyPlansInput): UserStudyPlansResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  studyGroup(id: String!): StudyGroup

  """restricted to: [ORGANISATION_ADMIN]"""
  studyGroupsForUser(userId: String): [StudyGroup]
  studyGroupProgress(id: String!): [StudyGroupUserProgress]

  """restricted to: [ADMIN,SERVER]"""
  ACG_studyGroupProgress(organisationId: String!, id: String!): [StudyGroupUserProgress]

  """restricted to: [ADMIN,SERVER]"""
  ACG_studyGroups(organisationId: String!): [StudyGroupResponse]

  """restricted to: [ADMIN,SERVER]"""
  ACG_reportingGroups(organisationId: String!): [ReportingGroup]

  """restricted to: [ORGANISATION_ADMIN]"""
  team(id: String!): Team

  """restricted to: [ORGANISATION_ADMIN]"""
  teams: [Team]

  """restricted to: [ADMIN,SERVER]"""
  ACG_teams(organisationId: String!): [Team]
  handsonHealthCheck: Boolean!
  handsonLabByUrl(labUrl: String!): HandsonLab
  handsonLabs: SearchResponse!
  searchLabs(searchInput: SearchInput!): SearchResponse!
  searchForFacetValues(input: FacetSearchInput!): [FacetResponse]!
  getLabsOptions: LabsOptions

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_handsonLabById(labId: String!): HandsonLab

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_handsonLabByUrl(labUrl: String!): HandsonLab

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_handsonLabs: [HandsonLab]!

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_searchLabs(searchInput: SearchInput!): SearchResponse!
  handsonSeriesByUrl(seriesUrl: String!): MiniSeries
  handsonSeries: SeriesSearchResponse!
  searchSeries(searchInput: SeriesSearchInput!): SeriesSearchResponse!
  getSeriesList: SeriesList

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_handsonSeries: [MiniSeries]!

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_handsonSeriesById(seriesId: String!): MiniSeries

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_handsonSeriesByUrl(seriesUrl: String!): MiniSeries

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_searchSeries(searchInput: SeriesSearchInput!): SeriesSearchResponse!
  hubspotHealthCheck: Boolean!
  getLearningPlan(plan: String!): LearningPlan
  identityHealthCheck: Boolean!
  roles: Roles

  """restricted to: [SUPERADMIN,ADMIN]"""
  ACG_userSiteRoles(filter: UserSiteRolesFilter): [UserSiteRole]
  userId: ID
  userIdentity: UserIdentity

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserIdentity(userId: String): OrganisationUserIdentity

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserIdentities(userIds: [ID]!): [OrganisationUserIdentity]
  profilePhotoUploadUrl(filename: String!): UploadUrlResponse
  userReputation(userId: String!): UserReputation

  """restricted to: [VIEWER]"""
  generateHandle(handle: String): String

  """restricted to: [ADMIN]"""
  ACG_userIdentity(userId: String): UserIdentity

  """restricted to: [SERVER]"""
  ACG_organisationUserIdentity(userId: String): OrganisationUserIdentity

  """restricted to: [SERVER]"""
  ACG_userIsInOrganisation(organisationId: String, userId: String): Boolean

  """restricted to: [SERVER]"""
  ACG_organisationActiveUserCount(organisationId: String): Int

  """restricted to: [ADMIN]"""
  ACG_searchAuth0Users(query: String!, page: Int, pageSize: Int): ACG_SearchAuth0UsersResponse

  """restricted to: [SERVER]"""
  ACG_auth0Id(auth0Email: String!): ACG_Auth0Id

  """restricted to: [ADMIN]"""
  ACG_impersonationUrl(userId: String!, platform: ImpersonatePlatform): String

  """restricted to: [VIEWER]"""
  getUserIdentities(userId: String): Auth0User
  indexingHealthCheck: Boolean!

  """restricted to: [ORGANISATION_ADMIN,ADMIN]"""
  searchApiKey: SearchApiKeyResponse

  """restricted to: [ADMIN]"""
  ACG_searchApiKey(organisationId: String): ACG_SearchApiKeyResponse
  Labs_healthCheck: Boolean!

  """restricted to: [VIEWER]"""
  Labs_lab(labId: String!): Labs_Lab

  """restricted to: [VIEWER,SERVER]"""
  Labs_labs(labIds: [String!]): [Labs_Lab]

  """restricted to: [VIEWER]"""
  Labs_myLab: Labs_MyLab
  learningPathHealthCheck: Boolean!
  learningPath(id: String!): LearningPath
  allLearningPaths: [LearningPath]
  startedLearningPaths: [LearningPath]!

  """restricted to: [ADMIN]"""
  startedLearningPathsForUser(userId: String!): [LearningPath]!

  """restricted to: [SERVER]"""
  ACG_allLearningPaths: [LearningPath]

  """restricted to: [SERVER]"""
  ACG_startedLearningPathProgressForUser(userId: String!): [ACG_LearningPath]!
  Membership_healthCheck: String!
  Membership_countryRules(countryCode: String!): Membership_CountryRules
  Membership_estimate(providerPlanId: ID!, providerCode: Membership_ProviderCode = chargebee_uk, planType: Membership_PlanType = b2c, countryCode: String!, vatNumber: String): Membership_EstimateAndExpectedError_Response
  Membership_estimateUpdateSubscription(packageType: Membership_PackageType!, billingCycle: Membership_BillingCycle!, countryCode: String!, vatNumber: String, providerCode: Membership_ProviderCode = chargebee_uk, planType: Membership_PlanType = b2c): Membership_EstimateAndExpectedError_Response
  Membership_history: [Membership_History!]
  ACG_Membership_history(userId: ID!): [Membership_History!]
  Membership_invoices: Membership_invoices_Response
  Membership_invoicePdf(providerInvoiceId: ID!): Membership_invoicePdf_Response
  ACG_Membership_invoices(input: ACG_Membership_invoices_Input!): Membership_invoices_Response
  Membership_countryPlans(
    """Country code for which to fetch the plans, (default: "us")"""
    countryCode: String = "us"
  ): Membership_CountryPlans!
  Membership_packages(
    """Country code for which to fetch the plans, (default: "us")"""
    countryCode: String = "us"
  ): Membership_Packages!
  Membership_packagePlans(
    """Country code for which to fetch the plans, (default: "us")"""
    countryCode: String = "us"
  ): Membership_Packages!
  ACG_Membership_userExpectedPackage(userId: String, orgId: String, member: Boolean): Membership_UserExpectedPackage!
  Membership_userPlanIdFilter: Membership_UserPlanIdFilter!
  ACG_Membership_planIdFilters: [Membership_PlanIdFilter!]!
  ACG_Membership_userPlanIdFilter(userId: ID!): Membership_UserPlanIdFilter!
  Membership_subscription: Membership_Subscription
  Membership_hasSubscription: Boolean!
  ACG_Membership_subscription(userId: ID!): Membership_Subscription
  ACG_Membership_hasSubscription(userId: ID!): Boolean!
  ACGDEV_Membership_testingToken(type: Membership_TestingTokenType = valid): Membership_TestingToken!
  ACG_Membership_userPlanOverrides(userId: ID!): [Membership_UserPlanOverride!]
  Membership_migration: Membership_migration_Response
  ACG_Membership_migration(userId: ID!): Membership_migration_Response
  Membership_hasMigratedSubscription: Boolean!
  ACG_Membership_hasMigratedSubscription(userId: ID!): Boolean!
  organisationInvitationHealthCheck: Boolean!
  organisationInvitation(code: String!): OrganisationInvitation

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationInvitations(organisationId: String!, filters: OrganisationInvitationFilters, pagination: OrganisationInvitationPagination): [OrganisationInvitation]

  """restricted to: [ORGANISATION_ADMIN]"""
  invitationEmailTemplate(input: InvitationEmailTemplateInput!): String

  """restricted to: [ADMIN]"""
  ACG_sendInvitationEmailTemplate(input: InvitationEmailTemplateInput!): String
  organisationLearningPathHealthCheck: Boolean!

  """restricted to: [ORGANISATION_ADMIN]"""
  allLearningPathsProgress: [OrganisationLearningPathReportItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserLearningPathConnections(userId: String!): [UserLearningPathConnection]

  """restricted to: [VIEWER]"""
  organisationUserLearningPaths: [OrganisationUserLearningPath]

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationLearningPathUsers(organisationId: ID!, learningPathId: ID!): [OrganisationLearningPathUser]

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationLearningPathProgress(organisationId: ID!, learningPathId: ID!, pagination: LearningPathPagination): [OrganisationLearningPathReportItem]
  organisationReportingHealthCheck: Boolean!

  """restricted to: [ORGANISATION_ADMIN]"""
  previewLearningPathProgressPdf(payload: String!): String

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUsersJoined(last: Int): [OrganisationUserJoined]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserStartedCourseList(userId: ID): [OrganisationUserStartedCourse]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserCourseEventStats(input: organisationUserCourseEventStatsInput!): [OrganisationUserCourseEventStatItem]

  """restricted to: [ADMIN]"""
  ACG_organisationUserCourseEventStats(organisationId: String!, input: organisationUserCourseEventStatsInput!): [OrganisationUserCourseEventStatItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserJoinedStats(input: OrganisationUserJoinedStatsInput!): [OrganisationUserJoinedStatItem]

  """restricted to: [ADMIN]"""
  ACG_organisationUserJoinedStats(organisationId: String!, input: OrganisationUserJoinedStatsInput!): [OrganisationUserJoinedStatItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserLeftStats(input: OrganisationUserLeftStatsInput!): [OrganisationUserLeftStatItem]

  """restricted to: [ADMIN]"""
  ACG_organisationUserLeftStats(organisationId: String!, input: OrganisationUserLeftStatsInput!): [OrganisationUserLeftStatItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserRejoinedStats(input: OrganisationUserRejoinedStatsInput!): [OrganisationUserRejoinedStatItem]

  """restricted to: [ADMIN]"""
  ACG_organisationUserRejoinedStats(organisationId: String!, input: OrganisationUserRejoinedStatsInput!): [OrganisationUserRejoinedStatItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationGroupUserJoinedStats(input: OrganisationGroupUserJoinedStatsInput!): [OrganisationGroupUserJoinedStatItem]

  """restricted to: [ADMIN]"""
  ACG_organisationGroupUserJoinedStats(organisationId: String!, input: OrganisationGroupUserJoinedStatsInput!): [OrganisationGroupUserJoinedStatItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationGroupUserLeftStats(input: OrganisationGroupUserLeftStatsInput!): [OrganisationGroupUserLeftStatItem]

  """restricted to: [ADMIN]"""
  ACG_organisationGroupUserLeftStats(organisationId: String!, input: OrganisationGroupUserLeftStatsInput!): [OrganisationGroupUserLeftStatItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationGroupUserRejoinedStats(input: OrganisationGroupUserRejoinedStatsInput!): [OrganisationGroupUserRejoinedStatItem]

  """restricted to: [ADMIN]"""
  ACG_organisationGroupUserRejoinedStats(organisationId: String!, input: OrganisationGroupUserRejoinedStatsInput!): [OrganisationGroupUserRejoinedStatItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationStudyGroupProgressDownloadUrl(fileType: String): String!

  """restricted to: [ADMIN]"""
  ACG_organisationStudyGroupProgressDownloadUrl(organisationId: String!): String!

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserEngagementReport(filters: OrganisationUserEngagementReportFilter!): [OrganisationUserEngagementReportItem]

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationUserEngagementReport(organisationId: String!, filters: OrganisationUserEngagementReportFilter!): [OrganisationUserEngagementReportItem]
  organisationWarehouseHealthCheck: Boolean!

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationCourseProgressReport(take: Int): [OrganisationCourseProgressReportItem]

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationCourseProgressReport(organisationId: String, take: Int): [OrganisationCourseProgressReportItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationCertificationSummaryReport(filters: OrganisationCertificationSummaryFilters): [OrganisationCertificationSummaryReportItem]

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationCertificationSummaryReport(organisationId: String!, filters: OrganisationCertificationSummaryFilters): [OrganisationCertificationSummaryReportItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationCertificationActivityReport(filters: OrganisationCertificationActivityFilters, pagination: Page): OrganisationCertificationActivityReportResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationCertificationActivityReport(organisationId: String!, filters: OrganisationCertificationActivityFilters, pagination: Page): OrganisationCertificationActivityReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationCourseEngagementReport(filters: OrganisationCourseEngagementFilters!): [OrganisationCourseEngagementReportItem]

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationCourseEngagementReport(organisationId: String!, filters: OrganisationCourseEngagementFilters!): [OrganisationCourseEngagementReportItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationCourseEngagementActivityReport(filters: OrganisationCourseEngagementActivityFilters): OrganisationCourseEngagementActivityReportResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationCourseEngagementActivityReport(organisationId: String!, filters: OrganisationCourseEngagementActivityFilters): OrganisationCourseEngagementActivityReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationCourseEngagementSummaryReport(filters: OrganisationCourseEngagementSummaryFilters!): OrganisationCourseEngagementSummaryReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  HIERARCHY_organisationCourseEngagementSummaryReport(organisationIds: [String], filters: HIERARCHY_organisationCourseEngagementSummaryFilters): OrganisationCourseEngagementSummaryReportResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationCourseEngagementSummaryReport(organisationId: String!, filters: OrganisationCourseEngagementSummaryFilters!): OrganisationCourseEngagementSummaryReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationCourseActivityReport(filters: OrganisationCourseActivityFilters, pagination: Page): OrganisationCourseActivityReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  HIERARCHY_organisationCourseActivityReport(organisationIds: [String], filters: HIERARCHY_OrganisationCourseActivityFilters, pagination: Page): OrganisationCourseActivityReportResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationCourseActivityReport(organisationId: String!, filters: OrganisationCourseActivityFilters, pagination: Page): OrganisationCourseActivityReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationExamSimActivityReport(filters: OrganisationExamSimActivityFilters, pagination: Page): OrganisationExamSimActivityReportResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationExamSimActivityReport(organisationId: String!, filters: OrganisationExamSimActivityFilters, pagination: Page): OrganisationExamSimActivityReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationExamSimSummaryReport(filters: OrganisationExamSimSummaryFilters): [OrganisationExamSimSummaryReportItem]

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationExamSimSummaryReport(organisationId: String!, filters: OrganisationExamSimSummaryFilters): [OrganisationExamSimSummaryReportItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationExamSimCompletedActivityReport(filters: OrganisationExamSimCompletedActivityFilters): OrganisationExamSimCompletedActivityReportResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationExamSimCompletedActivityReport(organisationId: String!, filters: OrganisationExamSimCompletedActivityFilters): OrganisationExamSimCompletedActivityReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationExamSimCompletedSummaryReport(filters: OrganisationExamSimCompletedSummaryFilters!): OrganisationExamSimCompletedSummaryResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationExamSimCompletedSummaryReport(organisationId: String!, filters: OrganisationExamSimCompletedSummaryFilters!): [OrganisationExamSimCompletedSummaryResponse]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationQuizActivityReport(filters: OrganisationQuizActivityFilters, pagination: Page): OrganisationQuizActivityReportResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationQuizActivityReport(organisationId: String!, filters: OrganisationQuizActivityFilters, pagination: Page): OrganisationQuizActivityReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationQuizSummaryReport(filters: OrganisationQuizSummaryFilters): [OrganisationQuizSummaryReportItem]

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationQuizSummaryReport(organisationId: String!, filters: OrganisationQuizSummaryFilters): [OrganisationQuizSummaryReportItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationQuizCompletedSummaryReport(filters: OrganisationQuizCompletedSummaryFilters): OrganisationQuizCompletedSummaryReportResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationQuizCompletedSummaryReport(organisationId: String!, filters: OrganisationQuizCompletedSummaryFilters): OrganisationQuizCompletedSummaryReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationCourseEventReport(filters: OrganisationCourseEventFilters, pagination: Page): [OrganisationCourseEventReportItem]

  """restricted to: [SERVER,ADMIN]"""
  ACG_organisationCourseEventReport(organisationId: String!, filters: OrganisationCourseEventFilters, pagination: Page): [OrganisationCourseEventReportItem]

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUsersDetail(filters: OrganisationUserDetailFilters, pagination: Page): OrganisationUsersDetailResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationUsersDetail(organisationId: String!, filters: OrganisationUserDetailFilters, pagination: Page): OrganisationUsersDetailResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationUserActivityReport(groupId: String): organisationUserActivityReportResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  organisationStudyGroupProgressReport: organisationStudyGroupProgressReportResponse

  """restricted to: [ADMIN]"""
  ACG_organisationStudyGroupProgressReport(organisationId: String!): organisationStudyGroupProgressReportResponse
  organisationsHealthCheck: Boolean!

  """restricted to: [ADMIN,ORGANISATION_ADMIN]"""
  isOrganisationAdminCheck: String
  organisation: Organisation

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisation(orgId: String, domain: String): Organisation

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationBySamlConnectionName(connectionName: String!): Organisation

  """restricted to: [ADMIN,SERVER]"""
  ACG_organisationUsers(organisationId: String!, filters: OrganisationUsersFilters, pagination: Pagination): [OrganisationUser]
  marketplaceOnboardingStatus(RegistrationToken: String!): MarketplaceOnboardingStatus

  """restricted to: [ADMIN,SERVER]"""
  ACG_marketplaceEventHistory(CustomerIdentifier: String!): [MarketplaceEvent]

  """restricted to: [ADMIN]"""
  ACGDEV_getEntitlement(ProductCode: String, CustomerIdentifier: String): JSON

  """restricted to: [ADMIN]"""
  ACGDEV_validateToken(RegistrationToken: String): JSON

  """restricted to: [ORGANISATION_ADMIN]"""
  userInvitationEmailTemplate(hasLogo: Boolean): String!

  """requires feature access"""
  apiSettings: [ApiSettings]

  """restricted to: [ADMIN]"""
  ACG_apiSettings(organisationId: String!): [ApiSettings]

  """restricted to: [ADMIN,SERVER]"""
  ACG_lookupApiSettings(consumerId: String!): LookupApiSettingsResponse

  """restricted to: [ADMIN]"""
  ACG_organisationSupportRoles: OrganisationSupportRoles

  """restricted to: [ADMIN]"""
  ACG_organisationSupportRolesForUser(userId: String!): OrganisationSupportRoles

  """restricted to: [ADMIN]"""
  ACG_featureFlags(organisationId: String!, tag: String): [FeatureFlagResponse]
  latestReleasedChangeLog: ChangeLog
  preReleasedChangeLog(changeLogKey: String!): ChangeLog

  """restricted to: [ORGANISATION_ADMIN]"""
  childOrganisations: ChildOrganisationsResponse

  """restricted to: [ORGANISATION_ADMIN]"""
  childOrganisationIds: ChildOrganisationIdsResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_childOrganisationIds(organisationId: String): ChildOrganisationIdsResponse
  packagingHealthCheck: Boolean!
  packages: [Package]!
  userFeatureAccess: UserFeatures

  """restricted to: [ADMIN,SERVER]"""
  ACG_packages: [Package]!

  """restricted to: [ADMIN,SERVER]"""
  ACG_features: [Feature]!

  """restricted to: [ADMIN,SERVER]"""
  ACG_packagesFeatures: [PackageFeatures]!

  """restricted to: [ADMIN,SERVER]"""
  ACG_subscriberPackage(organisationId: ID, userId: ID): SubscriberPackage

  """restricted to: [ADMIN,SERVER]"""
  ACG_userFeatureAccess(input: ACG_userFeatureAccessInput): UserFeatures
  Packaging_packages: Packaging_PackagesResponse
  Packaging_userFeatureAccess: Packaging_UserFeatureAccessResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_packages: ACG_Packaging_PackagesResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_features: ACG_Packaging_FeaturesResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_packagesFeatures: ACG_Packaging_PackagesFeaturesResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_subscriberPackage(input: ACG_Packaging_SubscriberPackageInput!): ACG_Packaging_SubscriberPackageResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_userFeatureAccess(input: ACG_Packaging_UserFeatureAccessInput!): ACG_Packaging_UserFeatureAccessResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_userAuditTrail(input: ACG_Packaging_UserAuditTrailInput!): ACG_Packaging_UserAuditTrailResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_organisationAuditTrail(input: ACG_Packaging_OrganisationAuditTrailInput!): ACG_Packaging_OrganisationAuditTrailResponse

  """restricted to: [ADMIN,SERVER]"""
  ACG_Packaging_globalAuditTrail: ACG_Packaging_GlobalAuditTrailResponse
  questionHealthCheck: Boolean!
  ACG_questionById(questionId: String!): EditorQuestion

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  ACG_searchQuestions(searchInput: QuestionSearchInput!): QuestionSearchResponse!

  """restricted to: [SERVER,ADMIN]"""
  searchLiveQuestions(searchInput: QuestionSearchInput!): [LiveQuestion!]
  getAssessmentMetadata: AssessmentMetadata
  quizHealthCheck: Boolean!

  """restricted to: [ADMIN]"""
  completionCertificatesForUser(userId: String!): [QuizCompletionCertificate]
  getQuizCompletionCertificate(quizId: String!): QuizCompletionCertificate
  completionCertificate(certificateId: String!): QuizCompletionCertificate
  getCompletionQuiz(quizId: String!): GetCompletionQuizResponse
  Ratings_healthCheck: Boolean!

  """restricted to: [VIEWER]"""
  Ratings_rating(category: String!, entityId: String!): Ratings_Rating

  """restricted to: [VIEWER]"""
  Ratings_allRatingsByEntity(category: String!, entityId: String): [Ratings_Rating]
  sandboxHealthCheck: Boolean!

  """restricted to: [ORGANISATION_MEMBER]"""
  checkSandboxSession: CheckSandboxSession

  """restricted to: [ADMIN]"""
  ACG_sandboxUser(userId: String!): SandboxUser

  """restricted to: [ADMIN]"""
  ACG_sandboxUserByVocareumId(vocareumId: String!): SandboxUser
  seriesHealthCheck: Boolean!
  getActiveSeries: [PublicSeries!]!
  getActiveSeriesByIds(seriesIds: [String!]!): [PublicSeries!]!
  getActiveSeriesByUrl(seriesUrl: String!): PublicSeries
  getActiveSeriesByUrls(seriesUrls: [String!]!): [PublicSeries]!

  """restricted to: [ADMIN,EDITOR]"""
  getAllSeries: [EditorSeries!]!

  """restricted to: [ADMIN,EDITOR]"""
  getAllSeriesByIds(seriesIds: [String!]!): [EditorSeries!]!

  """restricted to: [ADMIN,EDITOR]"""
  getAllSeriesByUrl(seriesUrl: String!): EditorSeries!
  getActivePublicLatestEpisodes(limit: Int): [PublicEpisode!]!
  getActiveEpisode(episodeId: String!): PublicEpisode
  getActiveEpisodesByIds(episodeIds: [String!]!): [PublicEpisode]!
  getActiveEpisodesBySeriesIds(activeEpisodeInput: [GetActiveEpisodeInput!]!): [[PublicEpisode]]!
  skillsAssessmentHealthCheck: Boolean!
  assessmentCandidateSession(sessionId: String): AssessmentCandidateSession
  skillsAssessmentSetupHealthCheck: Boolean!
  generateSkillsAssessmentUploadUrl(requestId: String!): String!
  skillsAssessment(skillsAssessmentId: String!): SkillsAssessment

  """restricted to: [ORGANISATION_ADMIN]"""
  skillsAssessmentGroups: [SkillsAssessmentOrgGroup]
  skillsAssessmentUserSession(skillsAssessmentUserSessionId: String!): SkillsAssessmentUserSession

  """restricted to: [ORGANISATION_ADMIN]"""
  skillsAssessmentResults: SkillsAssessmentResults

  """restricted to: [ADMIN]"""
  ACG_skillsAssessments: [SkillsAssessment]
  subtitlesHealthCheck: Boolean!
  subtitleTranscription(contentIds: [String!]): [SubtitleTranscription]!
  tokenHealthCheck: Boolean!
  getLegacyFirebaseAccessToken: LegacyTokenResult
  trackingHealthCheck: Boolean!
}

type Question {
  text: String!
  id: String!
  correctAnswers: Int!
  answers: [String!]!
}

input QuestionAnswerInput {
  answerId: String
  text: String
  correct: Boolean
}

type QuestionData {
  answers: [Answer]
  questionText: String
  explanation: Explanation
  imageUrl: String
  assessmentType: [AssessmentTypeEnum]
  disciplines: [Discipline!]
  cloudProviders: [String!]
  technologies: [String!]
  services: [String!]
  topics: [String!]
}

input QuestionEchoInput {
  echo: String
}

type QuestionEchoResponse {
  echo: String
}

type QuestionFacet {
  authors: [QuestionFacetValue!]
  isFlaggedForQA: [QuestionFacetValue!]
  status: [QuestionFacetValue!]
  services: [QuestionFacetValue!]
  technologies: [QuestionFacetValue!]
  cloudProviders: [QuestionFacetValue!]
  assessmentType: [QuestionFacetValue!]
  topics: [QuestionFacetValue!]
  roles: [QuestionFacetValue!]
  skillLevel: [QuestionFacetValue!]
}

type QuestionFacetValue {
  name: String!
  count: Int!
}

type QuestionHistory {
  authorId: String
  status: QuestionStatusEnum
  editorNote: String
  date: Float
}

input QuestionInput {
  questionId: String!
  authorId: String
  editorNote: String
  isFlaggedForQA: Boolean
  questionStatus: QuestionStatusEnum
  assessmentType: [AssessmentTypeEnum]
  disciplines: [DisciplineInput!]
  cloudProviders: [String!]
  technologies: [String!]
  services: [String!]
  topics: [String!]
  questionText: String
  answers: [QuestionAnswerInput!]
  imageUrl: String
  explanation: ExplanationInput
}

input QuestionSearchInput {
  query: String
  filters: String
  hitsPerPage: Int
  page: Int
  facets: [String!]
}

type QuestionSearchResponse {
  questions: [EditorQuestion]
  facets: QuestionFacet
}

enum QuestionStatusEnum {
  DRAFT
  LIVE
  QA
  HIDDEN
  DECOMMISSIONED
}

type QuestionVersionData {
  version: Float
  questionData: QuestionData
}

type Quiz {
  id: String!
  questions: [QuizQuestion]
}

type QuizAnswer {
  correct: MaybeBoolean
  text: String
}

type QuizCompletionCertificate {
  imageUrl: String
  pdfUrl: String
  verifyUrl: String
  userId: String
  courseId: String
}

type QuizContent implements ComponentContent {
  type: String!
  duration: Int
  quizName: String
  quizId: String
  isPracticeExam: Boolean
  questionCount: Int
  topics: [Topic!]
}

type QuizCourseComponentContent implements CourseComponentContent {
  id: ID!
  type: String!
  quizName: String
  name: String
  description: String
  quizId: String
  quizType: String
  duration: Int
}

input QuizEchoInput {
  echo: String
}

type QuizEchoResponse {
  echo: String
}

type QuizQuestion {
  id: String!
  answers: [QuizAnswer]
  explanation: String
  links: [String]
  originalCategories: [String]
  question: String!
  questionCode: String
  tags: [String]
}

type QuizSession {
  sessionId: String!
  quizId: String!
  userId: String!
  lives: Int!
  livesRemaining: Int!
  attempts: Int!
  totalQuestions: Int!
  currentQuestion: Int
  question: Question
  finished: Boolean
}

input RateCourseInput {
  courseId: String!
  score: CourseRatingScore!
  comment: String
}

input RateCourseItemInput {
  entityId: String!
  score: CourseRatingScore!
  comment: String
}

input Ratings_CreateRatingInput {
  vote: Ratings_Vote!
  category: String!
  entityId: String!
  comment: String
}

input Ratings_EchoInput {
  echo: String
}

type Ratings_EchoResponse {
  echo: String
}

type Ratings_Rating {
  id: ID!
  vote: Ratings_Vote!
  category: String!
  entityId: String!
  comment: String
  createdAt: ISODate
}

enum Ratings_Vote {
  UPVOTE
  NONE
  DOWNVOTE
}

type Recommendation {
  id: String!
  type: String
}

type RecommendationGoal {
  id: String!
  text: String
  recommendations: [Recommendation]
}

input RecommendationGoalInput {
  id: String!
  text: String
  recommendations: [RecommendationInput!]
}

input RecommendationInput {
  id: String!
  type: String
}

type RecommendationRole {
  id: String!
  text: String
  goals: [RecommendationGoal]
}

input RecommendationRoleInput {
  id: String!
  text: String
  goals: [RecommendationGoalInput!]
}

type Refund {
  refundId: String!
  orderId: String!
  refunded: String!
  total: Float!
  tax: Float!
  productId: String!
}

type RelatedCourse {
  courseId: String!
  nextCourse: [String!]
  relatedCourses: [String!]
}

input RelatedCourseInput {
  courseId: String!
  nextCourse: [String!]
  relatedCourses: [String!]
}

input Reminder {
  userId: String
  trackCode: String
  lastUpdated: Float
  title: String
  url: String
  artworkUrl: String
  progress: Float
  componentTitle: String
  componentChapter: String
}

type RemoveCompanyLogoResponse {
  organisation: Organisation
}

input RemoveEmploymentHistoryInput {
  id: ID!
}

input RemoveJoinCodeInput {
  code: String
}

type RemoveJoinCodeResponse {
  organisation: Organisation
}

input RemoveOrganisationAdminInput {
  userId: String!
}

type RemoveOrganisationAdminResponse {
  deleted: Boolean
  organisationId: String
  userId: String
  organisationUser: UserIdentity
}

type RemoveUserFromAllTeamsAndGroupsResponse {
  removedTeamUserConnections: [TeamUserConnection]
  removedGroupUserConnections: [GroupUserConnection]
}

type RemoveUserFromAllTeamsResponse {
  removedTeamUserConnections: [TeamUserConnection]
}

input RemoveUserFromGroupInput {
  userId: String!
  groupId: String!
}

type RemoveUserFromGroupResponse {
  groupUserConnection: GroupUserConnection
}

input RemoveUserFromLearningPathInput {
  learningPathId: String!
  userId: String!
}

input RemoveUserFromStudyGroupInput {
  userId: String!
  studyGroupId: String!
}

type RemoveUserFromStudyGroupResponse {
  groupUserConnection: GroupUserConnection
}

input RemoveUserFromStudyPlanInput {
  userId: String!
  courseId: String!
}

type RemoveUserFromStudyPlanResponse {
  success: Boolean!
}

input RemoveUsersFromTeamInput {
  teamId: String!
  userIds: [String]!
}

type RemoveUsersFromTeamResponse {
  taskId: String
  removedTeamUserConnections: [TeamUserConnection]
}

input ReportCustomHeader {
  property: String
  header: String
}

type ReportingGroup {
  id: ID!
  name: String!
  description: String
  colorScheme: String
  createdAt: ISODate
  updatedAt: ISODate
  numberOfUsers: Int
}

enum ReportType {
  USER_REPORT
  API_REPORT
}

type Resource {
  title: String!
  url: String!
}

input ResourceInput {
  title: String!
  url: String!
}

input RevokePersonalMembershipInput {
  userId: ID!
  revokeImmediately: Boolean
}

type RevokePersonalMembershipResponse {
  userId: ID
}

enum Role {
  ADMIN
  SERVER
  ORGANISATION_ADMIN
  VIEWER
  BFF
  EDITOR
  INSTRUCTOR
  MEMBER
}

type Roles {
  organisationAdmin: Boolean
  admin: Boolean
  editor: Boolean
  instructor: Boolean
  superadmin: Boolean
  moderator: Boolean
}

type S3ContentUploadData {
  key: String!
  signature: String!
  policyBase64: String!
  AWSAccessKey: String!
  uploadUri: String!
  bucket: String!
}

input SalaryRange {
  min: Float!
  max: Float
  currency: String!
}

type SalaryRangeResponse {
  min: Float!
  max: Float
  currency: String!
}

input SandboxEchoInput {
  echo: String
}

type SandboxEchoResponse {
  echo: String
}

enum SandboxResourceStatus {
  initializing
  active
  terminating
  cleanup
}

type SandboxSession {
  userId: String!
  sessionStartTime: ISODate
  sessionEndTime: ISODate
  ssoUrl: String
  sshKey: String
  accountId: String
  secretAccessKey: String
  accessKeyId: String
  sessionToken: String
  status: SandboxResourceStatus
}

type SandboxUser {
  userId: String!
  acceptedTerms: Boolean
  userIdMd5: String!
  vocareumId: String!
}

input SaveSkillsAssessmentResultInput {
  skillsAssessmentId: String!
  groupId: String!
  groupName: String!
  organisationId: String!
  organisationName: String!
  sessionId: String!
  role: String!
  isPrimary: Boolean!
  selfAssessedLevel: String!
  evaluatedLevel: String!
}

type SaveSkillsAssessmentResultResponse {
  sessionId: String!
}

type ScopedSearchApiKey {
  id: ID
  apiKey: String
  validUntil: String
}

type SearchApiKey {
  id: ID
  apiKey: String
  validUntil: String
}

type SearchApiKeyResponse {
  id: ID!
  publicApiKey: SearchApiKey
  scopedApiKey: SearchApiKey
  rootScopedApiKey: SearchApiKey
  rootPrivateApiKey: SearchApiKey
}

input SearchInput {
  query: String
  filters: String
  limit: Int
  facets: [String!]
}

type SearchResponse {
  labs: [HandsonLab]
  facets: Facet
}

type Section {
  id: ID!
  isHidden: Boolean
  courseId: String!
  description: String
  title: String
  sequence: Int
  url: String
  components: [Component!]!
}

input SelfAssessmentInput {
  isPrimary: Boolean!
  role: String!
  skillLevel: String!
}

input SendAdminOnboardingEmailInput {
  RegistrationToken: String!
  email: String!
}

type SendAdminOnboardingEmailResponse {
  invitation: Invitation
}

type sendEmailVerificationResponse {
  status: String
}

type SendRemindersResponse {
  ok: Boolean
}

input SendSkillsAssessmentReminderInput {
  reminderId: String!
}

type SendSkillsAssessmentReminderResponse {
  numberOfUsersToRemind: Int!
}

input SeriesEchoInput {
  echo: String
}

type SeriesEchoResponse {
  echo: String
}

type SeriesList {
  seriesIds: [String!]
  miniSeries: [MiniSeries!]
}

input SeriesListInput {
  seriesIds: [String!]
}

type SeriesOverviewContent {
  contentId: String
  thumbnailUrl: String
  content: Webseries_AudioVisualContent
}

input SeriesOverviewContentInput {
  contentId: String!
  thumbnailUrl: String
}

input SeriesSearchInput {
  query: String
  filters: String
  limit: Int
}

type SeriesSearchResponse {
  miniSeries: [MiniSeries]
}

input SeriesUpdateInput {
  isProtected: Boolean!
  title: String!
  description: String!
  artworkKey: String!
  artworkUrl: String
  bannerUrl: String
  forumRoomId: String
  isPublic: Boolean!
  hubspot: HubspotUpdateInput
}

input SetAchievementInput {
  sessionId: String!
  achievements: [AchievementInput!]
}

type SetAchievementResponse {
  assessmentCandidateSession: AssessmentCandidateSession
}

input SetSelfAssessmentInput {
  sessionId: String!
  selfAssessments: [SelfAssessmentInput!]!
}

type SetSelfAssessmentResponse {
  assessmentCandidateSession: AssessmentCandidateSession
}

input ShareReportInput {
  emails: [String!]
  body: String
  subject: String
  payload: String
}

type ShareReportResponse {
  success: Boolean
}

type SignedUrls {
  urls: [String]!
}

enum SiteRole {
  SUPERADMIN
  ADMIN
  EDITOR
  INSTRUCTOR
  MODERATOR
}

type SkillsAssessment {
  id: String!
  organisationName: String
  contactName: String
  email: String
  startDate: String
  dueDate: String
  status: SkillsAssessmentStatus
  createdAt: String
  invitesCount: Int!
  startedCount: Int!
  completedCount: Int!
  organisationId: String
}

input SkillsAssessmentEchoInput {
  echo: String
}

type SkillsAssessmentEchoResponse {
  echo: String
}

input SkillsAssessmentGroup {
  name: String!
  emails: [String]!
  id: String
}

type SkillsAssessmentOrgGroup {
  id: ID!
  name: String!
}

type SkillsAssessmentQuestion {
  id: ID
  questionText: String
  imageUrl: String
  answers: [AssessmentAnswer]
  noOfCorrectAnswer: Int
  role: String
  skillLevel: String
  recommendedTimeInSeconds: Int
}

type SkillsAssessmentResult {
  label: String
  value: Int
}

type SkillsAssessmentResults {
  skillsSummary: [SkillsAssessmentResult]
  disciplinesSummary: [SkillsAssessmentResult]
  participantsInvited: Int
  skillsAssessed: Int
}

input SkillsAssessmentSetupEchoInput {
  echo: String
}

type SkillsAssessmentSetupEchoResponse {
  echo: String
}

enum SkillsAssessmentStatus {
  CREATED
  PENDING
  IN_PROGRESS
  COMPLETED
}

type SkillsAssessmentUserSession {
  id: String!
  email: String!
  groupName: String
  groupId: String
  skillsAssessment: SkillsAssessment
}

input Sorter {
  field: String!
  order: String!
}

enum SortOrder {
  asc
  desc
}

type StartFreeCourseResult {
  status: Boolean!
}

input StringComparisonCondition {
  value: String!
  operator: ComparisonOperator
}

type StudyGroup {
  id: ID!
  name: String!
  description: String
  colorScheme: String
  createdAt: ISODate
  updatedAt: ISODate
  deletedAt: ISODate
  numberOfUsers: Int
  studyPlanId: String
  studyPlan: StudyPlan
}

type StudyGroupResponse {
  id: ID!
  name: String!
  description: String
  colorScheme: String
  createdAt: ISODate
  updatedAt: ISODate
  courseId: String
  active: Boolean
}

type StudyGroupUserProgress {
  id: ID!
  userId: String!
  progress: Float!
  picture: String
  email: String
  displayName: String
  lastActivity: ISODate
}

type StudyPlan {
  id: ID!
  courseId: String!
  cloudProviderId: String
  startDate: ISODate
  completeDate: ISODate
  emailNotification: Boolean
  targetProgress: Int!
  studyPlanEnabled: Boolean
  active: Boolean
  group: Group
}

input SubmitAssessmentAnswerInput {
  sessionId: String!
  questionId: String!
  selectedAnswers: [String!]!
}

type SubmitAssessmentAnswerResponse {
  assessmentCandidateSession: AssessmentCandidateSession
}

type SubmitChoices_AttemptGraded {
  message: String
}

union SubmitChoicesResponse = AssessmentsQuestionResults | SubmitChoices_AttemptGraded

input SubmitJobApplicationInput {
  jobId: String!
}

type SubmitJobApplicationResponse {
  job: JobResponse
}

type SubscriberPackage {
  packageId: ID!
  packageName: String!
  features: String!
  overrides: String
}

input SubscriptionBillingContactDetails {
  name: String
  email: String
  street: String
  city: String
  postCode: String
  region: String
}

type SubscriptionDiscount {
  amount: Float
  billingCycles: Int
}

input SubscriptionDiscountInput {
  amount: Float
  billingCycles: Int
}

type SubscriptionFeatureOverride {
  subscriberId: ID!
  featureId: ID!
  boolValue: String
  numberValue: Int
  stringValue: String
}

input SubscriptionFeatureOverrideInput {
  featureId: ID!
  subscriberId: ID!
  valueType: FeatureValueType
  value: String
}

input SubscriptionInput {
  planType: String!
  currency: String!
  price: Float!
  planPrice: Float
  promotionId: String
  promotionToken: String
  trial: SubscriptionTrialInput
  discount: SubscriptionDiscountInput
  nonce: String!
  country: String!
  selfDeclared: Boolean
  vatNumber: String
  billingContact: SubscriptionBillingContactDetails
}

type SubscriptionPayment {
  currency: String!
  paymentInstrumentType: String!
  refundedTransactionId: String
  success: Boolean
  status: String!
  transactionCreatedAt: String
  type: String!
  invoiceUrl: String
  customerLocation: String
  subscriptionId: String!
  transactionAmount: Float!
}

union SubscriptionPaymentMethod = CreditCardPaymentMethod | PaypalPaymentMethod

type SubscriptionPlan {
  currencyCode: String!
  currencySymbol: String!
  promotionId: String
  promotionExpiry: String
  trial: SubscriptionTrial
  annual: SubscriptionPlanPeriod!
  monthly: SubscriptionPlanPeriod!
}

type SubscriptionPlanPeriod {
  name: String!
  price: Float!
  discount: SubscriptionDiscount
}

type SubscriptionResult {
  subscriptionId: String
  result: String!
  friendlyError: String
  code: String
}

type SubscriptionTrial {
  duration: Int
  unit: TrialDurationUnit
}

input SubscriptionTrialInput {
  duration: Int
  unit: TrialDurationUnit
}

type SubscriptionUserTrial {
  trial: SubscriptionTrial!
  promotionId: String!
}

input SubtitlesEchoInput {
  echo: String
}

type SubtitlesEchoResponse {
  echo: String
}

type SubtitleTranscription {
  id: ID!
  lastUpdated: Float
  status: SubtitleTranscriptionStatus
  transcriptionType: SubtitleTranscriptionType
  visibility: SubtitleVisibility
  subtitleUrl: String

  """restricted to: [EDITOR,INSTRUCTOR,ADMIN]"""
  editorUrl: String
}

enum SubtitleTranscriptionStatus {
  IN_PROGRESS
  ERROR
  COMPLETE
  CANCELLED
  SUBMITTED
}

enum SubtitleTranscriptionType {
  HUMAN
  AUTOMATED
}

enum SubtitleVisibility {
  LIVE
  HIDDEN
  NONE
}

input SubtitleVisibilityInput {
  contentId: String
  visibility: SubtitleVisibility
}

type SyncBillingSubscriptionResponse {
  subscription: BillingSubscription!
}

type TagVoteSum {
  tagId: String!
  voteSum: Int!
}

type Team {
  id: ID!
  name: String!
  createdAt: ISODate
  updatedAt: ISODate
  deletedAt: ISODate
  numberOfUsers: Int
  numberOfCoordinators: Int
}

type TeamResponse {
  id: ID!
  name: String!
  createdAt: ISODate
  updatedAt: ISODate
  deletedAt: ISODate
}

type TeamUserConnection {
  teamId: String
  userId: String
}

enum TeamWidget {
  DASHBOARD_ACCOUNT_SETUP
  DASHBOARD_FEATURES_SETUP
  INVITATION_PAGE
}

type Testimonial {
  id: String
  imageSrc: String
  videoSrc: String
  name: String
  role: String
  quote: String
}

input TestimonialInput {
  id: String
  imageSrc: String
  videoSrc: String
  name: String
  role: String
  quote: String
}

type TextContent implements ComponentContent {
  type: String!
  textsources: [TextSource!]
}

type TextCourseComponentContent implements CourseComponentContent {
  id: ID!
  type: String!
  textsources: [CourseTextSourceContent!]
}

type TextSource {
  bucket: String!
  key: String!
}

type Thread {
  author: String!
  comments: [Comment]
  answers: [Answer]
  componentId: String
  createdTimestamp: Int!
  description: String
  roomId: String!
  tags: [String]
  title: String!
  updatedTimestamp: Int!
  updatedUser: String!
}

type Thumbnail {
  size: Int!
  filename: String!
  key: String!
  url: String!
}

input ToggleUserLicenseConsumedInput {
  userIds: [String]
  licenseConsumed: Boolean!
}

type ToggleUserLicenseConsumedResponse {
  organisation: Organisation
  taskId: String
}

input ToggleWidgetVisibilityInput {
  widgetName: TeamWidget!
  visible: Boolean!
}

type ToggleWidgetVisibilityResponse {
  organisation: Organisation
}

type Topic {
  tag: String!
  title: String!
}

input TranscoderConfiguration {
  thumbnailPreset: String
  videoAudioConfigs: VideoAudioConfiguration!
  adaptiveStreamingConfigs: [AdaptiveStreamingConfiguration!]!
}

input TranscriptionInput {
  contentId: String!
  sourceUrl: String!
  automated: Boolean!
}

enum TrialDurationUnit {
  day
  month
}

input UnassignGroupAdminInput {
  userId: String!
  groupId: String!
}

type UnassignGroupAdminResponse {
  groupUserConnection: GroupUserConnection
}

input UnlinkAccountInput {
  secondaryUserId: String!
  secondaryProvider: String!
}

type UnlinkAccountResponse {
  status: String
}

type UnsubscribeResult {
  subscriptionId: String
  success: Boolean!
}

input UpdateBasicAccountInformationInput {
  name: String
  email: String
  employeeId: String
}

type UpdateBasicAccountInformationResponse {
  userIdentity: UserIdentity
}

input UpdateBillingSubscriptionAutorenewInput {
  isAutoRenew: Boolean!
}

type UpdateBillingSubscriptionAutorenewResponse {
  subscription: BillingSubscription!
}

input UpdateBillingSubscriptionBillingInput {
  billing: BillingSubscriptionBillingInput!
}

type UpdateBillingSubscriptionBillingResponse {
  subscription: BillingSubscription!
}

input UpdateBillingSubscriptionCardInput {
  paymentSource: BillingPaymentSourceInput
}

type UpdateBillingSubscriptionCardResponse {
  card: BillingSubscriptionCard!
}

input UpdateCustomInvitationMessageInput {
  customInvitationMessage: String
}

type UpdateCustomInvitationMessageResponse {
  organisation: Organisation
}

input UpdateEmailInput {
  email: String
}

type UpdateEmailResponse {
  userIdentity: UserIdentity
}

input UpdateEpisodeInput {
  title: String
  shortSummary: String
  description: String
  episodeUrl: String
}

input UpdateGdprStatusInput {
  userId: String!
  status: GdprStatus!
}

input UpdateGroupInput {
  id: String!
  name: String
  description: String
  colorScheme: String
}

type UpdateGroupResponse {
  group: Group
}

input UpdateInternalRolesInput {
  userId: String!
  organisationWriteAccess: Boolean!
}

type UpdateInternalRolesResponse {
  permission: OrganisationSupportRoles
}

type UpdateInvitationsResponse {
  taskId: String!
}

input UpdateMembershipSwagUrlInput {
  userId: String!
  url: String!
}

type UpdateMembershipSwagUrlResponse {
  encodedEmail: String
  url: String
}

input UpdateOrganisationInput {
  name: String
  website: String
}

type UpdateOrganisationResponse {
  taskId: String
  organisation: Organisation
}

input UpdateProductInput {
  isVisible: Boolean!
  isActive: Boolean!
  isMembersOnly: Boolean!
  isOrganisationOnly: Boolean!
  title: String!
  includesPracticeExams: Boolean!
  includesQuizzes: Boolean!
  upsellBundleId: String
  upsellBundleId2: String
  prices: [ProductPriceInput!]
  isFeatured: Boolean
  type: String
  duration: Float
  artworkKey: String
  ctaTitle: String
  ctaFooter: String
  description: String
  shortSummary: String
  prerequisites: [String!]
  audience: [String!]
  requirements: [String!]
  outcomes: [String!]
  previewVideoUrl: String
  previewVideoPosterUrl: String
  backgroundPosterUrl: String
  artworkUrl: String
  bundleCourseDescription: String
  vendors: [String!]
  primaryTopic: String
  topics: [String!]
  skillLevels: [String!]
  services: [String!]
  roles: [String!]
  authors: [String!]
  url: String!
}

input UpdateSandboxResourceParams {
  state: UpdateSandboxResourceState
  budget: Float
}

enum UpdateSandboxResourceState {
  active
  inactive
}

input UpdateStudyGroupInput {
  id: String!
  name: String!
  description: String
  colorScheme: String
  courseId: String!
  cloudProviderId: String
  acceleratorProgramEnabled: Boolean
}

type UpdateStudyGroupResponse {
  studyGroup: StudyGroup
}

input UpdateStudyPlanInput {
  groupId: String!
  studyPlanId: String!
  completeDate: String
  studyPlanEnabled: Boolean
  emailNotification: Boolean
}

type UpdateStudyPlanResponse {
  studyPlan: StudyPlan
}

input UpdateTeamInput {
  id: String!
  name: String
}

type UpdateTeamResponse {
  team: Team
}

input UpdateUserCertificateInput {
  id: String!
  certificationId: String!
  acquiredDate: ISODate!
  expiryDate: ISODate
  credentialUrl: String
  certificateNumber: String!

  """base64 encoded file"""
  file: String
}

input UploadCompanyLogoInput {
  base64EncodedImage: String!
}

type UploadCompanyLogoResponse {
  organisation: Organisation
}

input UploadProfilePictureInput {
  encodedImage: String!
}

type UploadUrlResponse {
  url: String
}

type UpNextComponent {
  sectionId: String!
  sectionUrl: String
  componentId: String!
  title: String!
  url: String!
  sectionSequence: Int!
  componentSequence: Int!
  content: UserComponentContent
}

type User {
  id: String
  userId: String
  organisationId: String
  isRegistered: Boolean
  emailVerified: Boolean
  emailVerificationRequired: Boolean
  isMember: Boolean
  membershipStartDate: String
  givenName: String
  familyName: String
  employeeId: String
  legacyVideoDownload: Boolean
  memberUntil: String

  """Connection"""
  voteSum: Int
  tagVoteSums: [TagVoteSum!]

  """Deprecated        """
  bio: String @deprecated(reason: "Get bio from profile service instead")
  name: String @deprecated(reason: "Get name from profile service instead")
  email: String @deprecated(reason: "Get email from profile service instead")
  picture: String @deprecated(reason: "Get picture from profile service instead")
  location: String @deprecated(reason: "Get location from profile service instead")
  employer: String @deprecated(reason: "Get employer from profile service instead")
  jobTitle: String @deprecated(reason: "Get jobTitle from profile service instead")
  githubUrl: String @deprecated(reason: "Get githubUrl from profile service instead")
  twitterUrl: String @deprecated(reason: "Get twitterUrl from profile service instead")
  facebookUrl: String @deprecated(reason: "Get facebookUrl from profile service instead")
  linkedinUrl: String @deprecated(reason: "Get linkedinUrl from profile service instead")
  displayname: String @deprecated(reason: "Get displayname from profile service instead")
}

type UserCertificate {
  id: ID
  certification: Certificate
  status: UserCertificateStatus
  acquiredDate: ISODate
  expiryDate: ISODate
  imageUrl: String
  credentialUrl: String
  certificateNumber: String
}

enum UserCertificateStatus {
  EXPIRED
  ACTIVE
}

type UserCertification {
  id: String!
  userId: String!
  certificationId: String
  certificateNumber: String
  dateAcquired: String
  expiryDate: String
  title: String
  provider: String
  status: String!
  certificateUploadKey: String
  certificateConvertedKey: String
  imgUrl: String
  errorReason: String
  createdTimestamp: String
  updatedTimestamp: String
}

input UserCertificationCompleteUpdate {
  id: String!
  certificateNumber: String
  dateAcquired: String
  expiryDate: String
  certificationId: String
}

input UserCertificationInput {
  certificationId: String!
  certificateNumber: String
  dateAcquired: String
  expiryDate: String
}

input UserCertificationUpdate {
  id: String!
  certificateNumber: String
  dateAcquired: String
  expiryDate: String
  status: String
  certificateUploadKey: String
  certificateConvertedKey: String
}

type UserCloudProfile {
  id: ID
  displayname: String
  email: String
  location: String
  jobTitle: String
  employer: String
  bio: String
  picture: String
  name: String
  linkedinUrl: String
  twitterUrl: String
  githubUrl: String
  facebookUrl: String
}

interface UserComponentContent {
  type: String!
}

type UserComponentResource {
  title: String!
  url: String
}

type UserCourse {
  allowDownload: Boolean
  sections: [UserCourseSection]
  shortSummary: String
  shortTitle: String!
  title: String!
  type: String!
  uniqueid: String!
  url: String!
}

type UserCourseComponent {
  componentIdentifier: String!
  content: UserComponentContent!
  completed: Boolean
  description: String!
  resources: [UserComponentResource!]!
  sequence: Int!
  title: String!
}

type UserCourseComponentsNavigation {
  id: ID!
  previous: Component
  current: Component
  next: Component
}

type UserCourseOverviewResult {
  id: ID!
  courseOverview: CourseOverview

  """restricted to: [VIEWER]"""
  hasAccess: Boolean
  navigation(componentId: String!): UserCourseComponentsNavigation
  upcomingComponents(limit: Int): [Component]
}

type UserCourseSection {
  components: [CondensedUserCourseComponent]!
  description: String!
  sectionIdentifier: String!
  sequence: Int!
  title: String!
}

input UserFeatureAccessRoles {
  member: Boolean!
}

type UserFeatures {
  packageId: ID!
  packageName: String!
  features: String!
}

type UserHandle {
  handle: String!
}

type UserHandleUpdateResult {
  handle: UserHandle
  errors: Error
}

type UserIdentity {
  id: ID!
  careerInformation: CareerInformation
  givenName: String
  familyName: String
  employeeId: String
  createdAt: ISODate
  updatedAt: ISODate
  organisationId: String
  lastSeenTimestamp: ISODate
  organisationLicenseConsumed: Boolean
  managedTeamId: String
  handle: String @deprecated(reason: "Get handle from profile service instead")
  name: String @deprecated(reason: "Get name from profile service instead")
  picture: String @deprecated(reason: "Get picture from profile service instead")
  email: String @deprecated(reason: "Get email from profile service instead")
  displayName: String @deprecated(reason: "Get displayname from profile service instead")
  bio: String @deprecated(reason: "Get bio from profile service instead")
  employer: String @deprecated(reason: "Get employer from profile service instead")
  location: String @deprecated(reason: "Get location from profile service instead")
  jobTitle: String @deprecated(reason: "Get jobTitle from profile service instead")
  roles: Roles
  siteRoles: [SiteRole]
}

input UserInput {
  displayname: String
  name: String
  email: String
  picture: String
  bio: String
  employeeId: String
  employer: String
  jobTitle: String
  twitterUrl: String
  githubUrl: String
  facebookUrl: String
  linkedinUrl: String
  registrationMethod: String
  location: String
}

type UserLabContent implements UserComponentContent {
  type: String!
  quickLabsId: String
  labImage: String
  description: String
}

type UserLearningPathConnection {
  id: ID!
  learningPathId: String!
  userId: String!
  assignedBy: String
  assignedAt: ISODate!
  startedAt: ISODate
  status: String!
  level: Int
  levelName: String
  learningPath: OrganisationLearningPath
  sections: [OrganisationLearningPathSection]
}

type UserProductPrice {
  id: String!
  ID: ID!

  """Visibility Status"""
  isVisible: Boolean!
  isActive: Boolean!
  isMembersOnly: Boolean!
  isOrganisationOnly: Boolean
  type: String!
  title: String!
  artworkKey: String!
  summary: String
  invoiceDescription: String
  statementDescriptor: String
  discountText: String
  upsellBundleId: String
  upsellBundleId2: String
  checkoutMessage: String
  courseIds: [String!]!
  includesQuizzes: Boolean!
  includesPracticeExams: Boolean!

  """Search Meta"""
  primaryTopic: String
  services: [String]
  topics: [String]
  vendors: [String]
  skillLevels: [String]
  requirements: [String]
  outcomes: [String]
  authors: [String]
  audience: [String]
  price: Price
  availablePromoCodes: AvailablePromoCodes
  sku: String!
}

type UserProgress {
  status: String!
  secondsWatched: Int
  percentComplete: Float
}

type UserQuizContent implements UserComponentContent {
  type: String!
  duration: Int
  quizName: String
  quizId: String
  isPracticeExam: Boolean
  questionCount: Int
  topics: [Topic!]
}

input UserRatingByCourseIdsInput {
  userId: String
  courseIds: [String!]
}

input UserRatingByEntityIdsInput {
  userId: String
  entityIds: [String!]
}

type UserRegisterResult {
  handle: UserHandle
  user: User
  errors: Error
}

type UserReputation {
  voteSum: Int!
}

type UserSearchResult {
  query: String!
  users: [User!]!
}

input UsersGroupInput {
  userIds: [String!]
  groupId: String!
}

type UsersGroupResponse {
  groupUserConnections: [GroupUserConnection]
}

type UserSiteRole {
  userIdentity: UserIdentity
}

input UserSiteRolesFilter {
  role: SiteRole
}

type UserStartedCoursesResult {
  userId: String!
  courses: [CourseInfo]!
}

input UsersToTeamsInput {
  teamId: ID!
  userId: String!
  teamCoordinator: Boolean
}

type UserStudyPlanProgress {
  id: ID!
  userId: String!
  studyPlan: StudyPlan
  courseProgress: Float
  lastActivity: ISODate
}

type UserStudyPlansResponse {
  userStudyPlanProgress: [UserStudyPlanProgress]
}

type UserSubscription {
  subscriptionId: String!
  planType: String
  planName: String
  status: String!
  created: String
  updated: String
  country: String!
  cancelledDate: String
  firstBillingDate: String
  paidThroughDate: String
  billingDayOfMonth: Int
  currentBillingCycle: Int
  daysPastDue: Int
  failureCount: Int
  currencyCode: String
  currencySymbol: String
  nextBillingDate: String
  nextBillingPeriodAmount: Float
  trialDuration: Int
  trialDurationUnit: String
  trialPeriod: Boolean
  memberUntilDate: String
  paidThroughRevoked: Boolean
}

type UserTextContent implements UserComponentContent {
  type: String!
  textsources: [UserTextSource!]
}

type UserTextSource {
  url: String
}

type UserVideoContent implements UserComponentContent {
  type: String!
  duration: Int
  videoposter: String
  posters: [PosterSource!]
  videosources(filter: VideoSourceFilter): [UserVideoSource!]
}

type UserVideoSource {
  type: String!
  description: String
  filesize: Int
  duration: Int
  url: String
}

type UserWhitepaperContent implements UserComponentContent {
  type: String!
  url: String
}

type VATValidationResult {
  valid: Boolean!
  taxNumber: String
  taxDeducted: Boolean!
}

type VerifyPurchaseResult {
  isVerified: Boolean!
}

input VideoAudioConfiguration {
  video: [String!]!
  audio: [String!]!
}

type VideoContent implements ComponentContent {
  type: String!
  duration: Int
  processing: Boolean
  videoposter: String
  posters: [PosterSource!]
  videosources: [VideoSource!]
}

type VideoCourseComponentContent implements CourseComponentContent {
  id: ID!
  type: String!
  contentId: String
  subtitleUrl: String
  duration: Int
  videoposter: String
  posters: [CourseComponentPosterSource!]
  videosources(filter: CourseVideoSourceFilter): [CourseVideosources]
}

type VideoSessionRating {
  active: Boolean!
  durationInSeconds: Float!
}

type VideoSource {
  type: String!
  bucket: String!
  key: String!
  description: String
  filesize: Int
  duration: Int
}

input VideoSourceFilter {
  videoType: String
  preferredQuality: String
}

enum Visibility {
  PUBLIC
  PRIVATE
}

type VisibilityToggles {
  cloudTranscripts: Visibility
  certifications: Visibility
  employmentHistories: Visibility
}

input VisibilityTogglesInput {
  cloudTranscripts: Visibility
  certifications: Visibility
  employmentHistories: Visibility
}

type Webseries_AudioVisualAdaptiveStream {
  playlistKey: String
  segmentDuration: String
  ext: String
  streamType: String
  sources: [Webseries_AudioVisualSource!]

  """User has access, this will be included"""
  signedUrl: String
}

type Webseries_AudioVisualContent {
  contentId: String
  createdDate: Float
  transcodeStatus: String
  transcodeStatusMessage: String

  """Nullable until completion"""
  finishedDate: Float
  duration: Int
  mediaType: String
  sources(videoQuality: Int): [Webseries_AudioVisualSource!]
  adaptiveStreams: [Webseries_AudioVisualAdaptiveStream!]
  thumbnailList: [Webseries_Thumbnail!]
}

type Webseries_AudioVisualSource {
  sourceType: String
  ext: String
  key: String
  presetId: String
  fileSize: String
  duration: Int

  """Audio Only"""
  audioBitRate: String
  audioMaxBitRate: String

  """Video Only"""
  frameRate: String
  height: Int
  maxHeight: Int
  width: Int
  maxWidth: Int
  videoBitRate: String
  videoMaxBitRate: String

  """Adaptive only"""
  segmentDuration: String

  """User has access, this will be included"""
  signedUrl: String
}

type Webseries_Thumbnail {
  size: Int
  filename: String
  key: String
  url: String
}

input WebseriesEventInput {
  platform: String
  contentType: String!
  grantType: String
  durationInSeconds: Int!
  seriesId: String
  seriesTitle: String
  seriesUrl: String
  episodeId: String
  episodeTitle: String
  episodeUrl: String
  metadataAsJSON: String
}

type WhitepaperContent implements ComponentContent {
  type: String!
  url: String
}

type WhitepaperCourseComponentContent implements CourseComponentContent {
  id: ID!
  type: String!
  url: String
}

type WidgetVisibility {
  name: String!
  visible: Boolean!
}

